<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HttpAgent</name>
    </assembly>
    <members>
        <member name="T:HttpAgent.HttpFileDownloadBuilder">
            <summary>
                HTTP 文件下载构建器
            </summary>
            <remarks>使用 <c>HttpRequestBuilder.DownloadFile(requestUri, destinationPath)</c> 静态方法创建。</remarks>
        </member>
        <member name="M:HttpAgent.HttpFileDownloadBuilder.#ctor(System.Net.Http.HttpMethod,System.Uri)">
            <summary>
                <inheritdoc cref="T:HttpAgent.HttpFileDownloadBuilder" />
            </summary>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址</param>
        </member>
        <member name="P:HttpAgent.HttpFileDownloadBuilder.RequestUri">
            <summary>
                请求地址
            </summary>
        </member>
        <member name="P:HttpAgent.HttpFileDownloadBuilder.Method">
            <summary>
                请求方式
            </summary>
        </member>
        <member name="P:HttpAgent.HttpFileDownloadBuilder.BufferSize">
            <summary>
                用于传输操作的缓冲区大小
            </summary>
            <remarks>以字节为单位，默认值为 <c>80 KB</c>。</remarks>
        </member>
        <member name="P:HttpAgent.HttpFileDownloadBuilder.DestinationPath">
            <summary>
                文件保存的目标路径
            </summary>
        </member>
        <member name="P:HttpAgent.HttpFileDownloadBuilder.FileExistsBehavior">
            <summary>
                当目标文件已存在时的行为
            </summary>
            <remarks>默认值为创建新文件，如果文件已存在则抛出异常。</remarks>
        </member>
        <member name="P:HttpAgent.HttpFileDownloadBuilder.ProgressInterval">
            <summary>
                进度更新（通知）的间隔时间
            </summary>
            <remarks>默认值为 1 秒。</remarks>
        </member>
        <member name="P:HttpAgent.HttpFileDownloadBuilder.OnTransferStarted">
            <summary>
                用于处理在文件开始传输时的操作
            </summary>
        </member>
        <member name="P:HttpAgent.HttpFileDownloadBuilder.OnTransferCompleted">
            <summary>
                用于处理在文件传输完成时的操作
            </summary>
        </member>
        <member name="P:HttpAgent.HttpFileDownloadBuilder.OnTransferFailed">
            <summary>
                用于处理在文件传输发生异常时的操作
            </summary>
        </member>
        <member name="P:HttpAgent.HttpFileDownloadBuilder.OnFileExistAndSkip">
            <summary>
                用于处理在文件存在且配置为跳过时的操作
            </summary>
        </member>
        <member name="P:HttpAgent.HttpFileDownloadBuilder.OnProgressChanged">
            <summary>
                用于传输进度发生变化时的操作
            </summary>
        </member>
        <member name="P:HttpAgent.HttpFileDownloadBuilder.FileTransferEventHandlerType">
            <summary>
                实现 <see cref="T:HttpAgent.IHttpFileTransferEventHandler" /> 的类型
            </summary>
        </member>
        <member name="M:HttpAgent.HttpFileDownloadBuilder.SetBufferSize(System.Int32)">
            <summary>
                设置用于传输操作的缓冲区大小
            </summary>
            <param name="bufferSize">用于传输操作的缓冲区大小</param>
            <remarks>以字节为单位，默认值为 <c>80 KB</c>。</remarks>
            <returns>
                <see cref="T:HttpAgent.HttpFileDownloadBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpFileDownloadBuilder.SetDestinationPath(System.String)">
            <summary>
                设置文件保存的目标路径
            </summary>
            <param name="destinationPath">文件保存的目标路径</param>
            <remarks>
                如果设置为 <c>null</c>，则尝试获取 HTTP 模块的 <see cref="T:HttpAgent.HttpRemoteBuilder" /> 构建器的 <c>DefaultFileDownloadDirectory</c>
                的属性配置。
            </remarks>
            <returns>
                <see cref="T:HttpAgent.HttpFileDownloadBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpFileDownloadBuilder.SetFileExistsBehavior(HttpAgent.FileExistsBehavior)">
            <summary>
                设置当目标文件已存在时的行为
            </summary>
            <param name="fileExistsBehavior">
                <see cref="P:HttpAgent.HttpFileDownloadBuilder.FileExistsBehavior" />
            </param>
            <returns>
                <see cref="T:HttpAgent.HttpFileDownloadBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpFileDownloadBuilder.SetProgressInterval(System.TimeSpan)">
            <summary>
                设置文件传输进度（通知）的间隔时间
            </summary>
            <param name="progressInterval">进度更新（通知）的间隔时间</param>
            <returns>
                <see cref="T:HttpAgent.HttpFileDownloadBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpFileDownloadBuilder.SetOnTransferStarted(System.Action)">
            <summary>
                设置在文件开始传输时的操作
            </summary>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpFileDownloadBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpFileDownloadBuilder.SetOnProgressChanged(System.Func{HttpAgent.FileTransferProgress,System.Threading.Tasks.Task})">
            <summary>
                设置用于传输进度发生变化时执行的委托
            </summary>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpFileDownloadBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpFileDownloadBuilder.SetOnTransferCompleted(System.Action{System.Int64})">
            <summary>
                设置在文件传输完成时的操作
            </summary>
            <param name="configure">自定义配置委托；委托参数为文件传输总花费时间（毫秒）</param>
            <returns>
                <see cref="T:HttpAgent.HttpFileDownloadBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpFileDownloadBuilder.SetOnTransferFailed(System.Action{System.Exception})">
            <summary>
                设置在文件传输发生异常时的操作
            </summary>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpFileDownloadBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpFileDownloadBuilder.SetOnFileExistAndSkip(System.Action)">
            <summary>
                设置在文件存在且配置为跳过时的操作
            </summary>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpFileDownloadBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpFileDownloadBuilder.SetEventHandler(System.Type)">
            <summary>
                设置 HTTP 文件传输事件处理程序
            </summary>
            <param name="fileTransferEventHandlerType">实现 <see cref="T:HttpAgent.IHttpFileTransferEventHandler" /> 接口的类型</param>
            <returns>
                <see cref="T:HttpAgent.HttpFileDownloadBuilder" />
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:HttpAgent.HttpFileDownloadBuilder.SetEventHandler``1">
            <summary>
                设置 HTTP 文件传输事件处理程序
            </summary>
            <typeparam name="TFileTransferEventHandler">
                <see cref="T:HttpAgent.IHttpFileTransferEventHandler" />
            </typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpFileDownloadBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpFileDownloadBuilder.Build(HttpAgent.HttpRemoteOptions,System.Action{HttpAgent.HttpRequestBuilder})">
            <summary>
                构建 <see cref="T:HttpAgent.HttpRequestBuilder" /> 实例
            </summary>
            <param name="httpRemoteOptions">
                <see cref="T:HttpAgent.HttpRemoteOptions" />
            </param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="T:HttpAgent.HttpFileUploadBuilder">
            <summary>
                HTTP 文件上传构建器
            </summary>
            <remarks>使用 <c>HttpRequestBuilder.UploadFile(requestUri, filePath, name)</c> 静态方法创建。</remarks>
        </member>
        <member name="M:HttpAgent.HttpFileUploadBuilder.#ctor(System.Net.Http.HttpMethod,System.Uri,System.String,System.String,System.String)">
            <summary>
                <inheritdoc cref="T:HttpAgent.HttpFileUploadBuilder" />
            </summary>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址</param>
            <param name="filePath">文件路径</param>
            <param name="name">表单名称</param>
            <param name="fileName">文件的名称</param>
        </member>
        <member name="P:HttpAgent.HttpFileUploadBuilder.RequestUri">
            <summary>
                请求地址
            </summary>
        </member>
        <member name="P:HttpAgent.HttpFileUploadBuilder.Method">
            <summary>
                请求方式
            </summary>
        </member>
        <member name="P:HttpAgent.HttpFileUploadBuilder.FilePath">
            <summary>
                文件路径
            </summary>
        </member>
        <member name="P:HttpAgent.HttpFileUploadBuilder.FileName">
            <summary>
                文件的名称
            </summary>
        </member>
        <member name="P:HttpAgent.HttpFileUploadBuilder.Name">
            <summary>
                表单名称
            </summary>
        </member>
        <member name="P:HttpAgent.HttpFileUploadBuilder.ContentType">
            <summary>
                内容类型
            </summary>
        </member>
        <member name="P:HttpAgent.HttpFileUploadBuilder.AllowedFileExtensions">
            <summary>
                允许的文件拓展名
            </summary>
        </member>
        <member name="P:HttpAgent.HttpFileUploadBuilder.MaxFileSizeInBytes">
            <summary>
                允许的文件大小。以字节为单位
            </summary>
        </member>
        <member name="P:HttpAgent.HttpFileUploadBuilder.ProgressInterval">
            <summary>
                进度更新（通知）的间隔时间
            </summary>
            <remarks>默认值为 1 秒。</remarks>
        </member>
        <member name="P:HttpAgent.HttpFileUploadBuilder.OnTransferStarted">
            <summary>
                用于处理在文件开始传输时的操作
            </summary>
        </member>
        <member name="P:HttpAgent.HttpFileUploadBuilder.OnTransferCompleted">
            <summary>
                用于处理在文件传输完成时的操作
            </summary>
        </member>
        <member name="P:HttpAgent.HttpFileUploadBuilder.OnTransferFailed">
            <summary>
                用于处理在文件传输发生异常时的操作
            </summary>
        </member>
        <member name="P:HttpAgent.HttpFileUploadBuilder.OnProgressChanged">
            <summary>
                用于传输进度发生变化时的操作
            </summary>
        </member>
        <member name="P:HttpAgent.HttpFileUploadBuilder.FileTransferEventHandlerType">
            <summary>
                实现 <see cref="T:HttpAgent.IHttpFileTransferEventHandler" /> 的类型
            </summary>
        </member>
        <member name="M:HttpAgent.HttpFileUploadBuilder.SetContentType(System.String)">
            <summary>
                设置内容类型（文件类型）
            </summary>
            <param name="contentType">内容类型</param>
            <returns>
                <see cref="T:HttpAgent.HttpFileUploadBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpFileUploadBuilder.SetAllowedFileExtensions(System.String[])">
            <summary>
                设置允许的文件拓展名
            </summary>
            <param name="allowedFileExtensions">允许的文件拓展名</param>
            <returns>
                <see cref="T:HttpAgent.HttpFileUploadBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpFileUploadBuilder.SetAllowedFileExtensions(System.String)">
            <summary>
                设置允许的文件拓展名
            </summary>
            <param name="allowedFileExtensions">允许的文件扩展名字符串，用分号分隔</param>
            <returns>
                <see cref="T:HttpAgent.HttpFileUploadBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpFileUploadBuilder.SetMaxFileSizeInBytes(System.Int64)">
            <summary>
                设置允许的文件大小
            </summary>
            <param name="maxFileSizeInBytes">允许的文件大小。以字节为单位。</param>
            <returns>
                <see cref="T:HttpAgent.HttpFileUploadBuilder" />
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:HttpAgent.HttpFileUploadBuilder.SetProgressInterval(System.TimeSpan)">
            <summary>
                设置文件传输进度（通知）的间隔时间
            </summary>
            <param name="progressInterval">进度更新（通知）的间隔时间</param>
            <returns>
                <see cref="T:HttpAgent.HttpFileUploadBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpFileUploadBuilder.SetOnTransferStarted(System.Action)">
            <summary>
                设置在文件开始传输时的操作
            </summary>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpFileUploadBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpFileUploadBuilder.SetOnProgressChanged(System.Func{HttpAgent.FileTransferProgress,System.Threading.Tasks.Task})">
            <summary>
                设置用于上传进度发生变化时执行的委托
            </summary>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpFileUploadBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpFileUploadBuilder.SetOnTransferCompleted(System.Action{System.Int64})">
            <summary>
                设置在文件传输完成时的操作
            </summary>
            <param name="configure">自定义配置委托；委托参数为文件传输总花费时间（毫秒）</param>
            <returns>
                <see cref="T:HttpAgent.HttpFileUploadBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpFileUploadBuilder.SetOnTransferFailed(System.Action{System.Exception})">
            <summary>
                设置在文件传输发生异常时的操作
            </summary>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpFileUploadBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpFileUploadBuilder.SetEventHandler(System.Type)">
            <summary>
                设置 HTTP 文件传输事件处理程序
            </summary>
            <param name="fileTransferEventHandlerType">实现 <see cref="T:HttpAgent.IHttpFileTransferEventHandler" /> 接口的类型</param>
            <returns>
                <see cref="T:HttpAgent.HttpFileUploadBuilder" />
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:HttpAgent.HttpFileUploadBuilder.SetEventHandler``1">
            <summary>
                设置 HTTP 文件传输事件处理程序
            </summary>
            <typeparam name="TFileTransferEventHandler">
                <see cref="T:HttpAgent.IHttpFileTransferEventHandler" />
            </typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpFileUploadBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpFileUploadBuilder.Build(HttpAgent.HttpRemoteOptions,System.Threading.Channels.Channel{HttpAgent.FileTransferProgress},System.Action{HttpAgent.HttpRequestBuilder})">
            <summary>
                构建 <see cref="T:HttpAgent.HttpRequestBuilder" /> 实例
            </summary>
            <param name="httpRemoteOptions">
                <see cref="T:HttpAgent.HttpRemoteOptions" />
            </param>
            <param name="progressChannel">文件传输进度信息的通道</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpFileUploadBuilder.EnsureLegalData(System.String,System.String[],System.Nullable{System.Int64})">
            <summary>
                检查文件拓展名和大小合法性
            </summary>
            <param name="filePath">文件路径</param>
            <param name="allowedFileExtensions">允许的文件拓展名</param>
            <param name="maxFileSizeInBytes">允许的文件大小。以字节为单位</param>
        </member>
        <member name="T:HttpAgent.HttpLongPollingBuilder">
            <summary>
                HTTP 长轮询构建器
            </summary>
            <remarks>使用 <c>HttpRequestBuilder.LongPolling(httpMethod, requestUri, onDataReceived)</c> 静态方法创建。</remarks>
        </member>
        <member name="M:HttpAgent.HttpLongPollingBuilder.#ctor(System.Net.Http.HttpMethod,System.Uri)">
            <summary>
                <inheritdoc cref="T:HttpAgent.HttpLongPollingBuilder" />
            </summary>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址</param>
        </member>
        <member name="P:HttpAgent.HttpLongPollingBuilder.RequestUri">
            <summary>
                请求地址
            </summary>
        </member>
        <member name="P:HttpAgent.HttpLongPollingBuilder.Method">
            <summary>
                请求方式
            </summary>
        </member>
        <member name="P:HttpAgent.HttpLongPollingBuilder.Timeout">
            <summary>
                超时时间
            </summary>
            <remarks>可为单次请求设置超时时间。</remarks>
        </member>
        <member name="P:HttpAgent.HttpLongPollingBuilder.RetryInterval">
            <summary>
                轮询重试间隔
            </summary>
            <remarks>默认值为 2 秒。</remarks>
        </member>
        <member name="P:HttpAgent.HttpLongPollingBuilder.MaxRetries">
            <summary>
                最大重试次数
            </summary>
            <remarks>默认最大重试次数为 100。</remarks>
        </member>
        <member name="P:HttpAgent.HttpLongPollingBuilder.OnDataReceived">
            <summary>
                用于接收服务器返回 <c>200~299</c> 状态码的数据的操作
            </summary>
        </member>
        <member name="P:HttpAgent.HttpLongPollingBuilder.OnError">
            <summary>
                用于接收服务器返回非 <c>200~299</c> 状态码的数据的操作
            </summary>
        </member>
        <member name="P:HttpAgent.HttpLongPollingBuilder.OnEndOfStream">
            <summary>
                用于响应标头包含 <c>X-End-Of-Stream</c> 时触发的操作
            </summary>
        </member>
        <member name="P:HttpAgent.HttpLongPollingBuilder.LongPollingEventHandlerType">
            <summary>
                实现 <see cref="T:HttpAgent.IHttpLongPollingEventHandler" /> 的类型
            </summary>
        </member>
        <member name="M:HttpAgent.HttpLongPollingBuilder.SetRetryInterval(System.TimeSpan)">
            <summary>
                设置轮询重试间隔
            </summary>
            <param name="retryInterval">轮询重试间隔</param>
            <returns>
                <see cref="T:HttpAgent.HttpLongPollingBuilder" />
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:HttpAgent.HttpLongPollingBuilder.SetMaxRetries(System.Int32)">
            <summary>
                设置最大重试次数
            </summary>
            <param name="maxRetries">最大重试次数</param>
            <returns>
                <see cref="T:HttpAgent.HttpLongPollingBuilder" />
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:HttpAgent.HttpLongPollingBuilder.SetTimeout(System.TimeSpan)">
            <summary>
                设置超时时间
            </summary>
            <param name="timeout">超时时间</param>
            <returns>
                <see cref="T:HttpAgent.HttpLongPollingBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpLongPollingBuilder.SetTimeout(System.Double)">
            <summary>
                设置超时时间
            </summary>
            <param name="timeoutMilliseconds">超时时间（毫秒）</param>
            <returns>
                <see cref="T:HttpAgent.HttpLongPollingBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpLongPollingBuilder.SetOnDataReceived(System.Func{System.Net.Http.HttpResponseMessage,System.Threading.Tasks.Task})">
            <summary>
                设置在接收服务器返回 <c>200~299</c> 状态码的数据的操作
            </summary>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpLongPollingBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpLongPollingBuilder.SetOnError(System.Func{System.Net.Http.HttpResponseMessage,System.Threading.Tasks.Task})">
            <summary>
                设置在接收服务器返回非 <c>200~299</c> 状态码的数据的操作
            </summary>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpLongPollingBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpLongPollingBuilder.SetOnEndOfStream(System.Func{System.Net.Http.HttpResponseMessage,System.Threading.Tasks.Task})">
            <summary>
                设置在响应标头包含 <c>X-End-Of-Stream</c> 时触发的操作
            </summary>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpLongPollingBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpLongPollingBuilder.SetEventHandler(System.Type)">
            <summary>
                设置长轮询事件处理程序
            </summary>
            <param name="longPollingEventHandlerType">实现 <see cref="T:HttpAgent.IHttpLongPollingEventHandler" /> 接口的类型</param>
            <returns>
                <see cref="T:HttpAgent.HttpLongPollingBuilder" />
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:HttpAgent.HttpLongPollingBuilder.SetEventHandler``1">
            <summary>
                设置长轮询事件处理程序
            </summary>
            <typeparam name="TLongPollingEventHandler">
                <see cref="T:HttpAgent.IHttpLongPollingEventHandler" />
            </typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpLongPollingBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpLongPollingBuilder.Build(HttpAgent.HttpRemoteOptions,System.Action{HttpAgent.HttpRequestBuilder})">
            <summary>
                构建 <see cref="T:HttpAgent.HttpRequestBuilder" /> 实例
            </summary>
            <param name="httpRemoteOptions">
                <see cref="T:HttpAgent.HttpRemoteOptions" />
            </param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="T:HttpAgent.HttpMultipartFormDataBuilder">
            <summary>
                <see cref="T:System.Net.Http.MultipartFormDataContent" /> 构建器
            </summary>
        </member>
        <member name="F:HttpAgent.HttpMultipartFormDataBuilder._httpRequestBuilder">
            <inheritdoc cref="T:HttpAgent.HttpRequestBuilder" />
        </member>
        <member name="F:HttpAgent.HttpMultipartFormDataBuilder._partContents">
            <summary>
                <see cref="T:HttpAgent.MultipartFormDataItem" /> 集合
            </summary>
        </member>
        <member name="M:HttpAgent.HttpMultipartFormDataBuilder.#ctor(HttpAgent.HttpRequestBuilder)">
            <summary>
                <inheritdoc cref="T:HttpAgent.HttpMultipartFormDataBuilder" />
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </param>
        </member>
        <member name="P:HttpAgent.HttpMultipartFormDataBuilder.Boundary">
            <summary>
                多部分表单内容的边界
            </summary>
        </member>
        <member name="P:HttpAgent.HttpMultipartFormDataBuilder.OmitContentType">
            <summary>
                是否移除默认的多部分内容的 <c>Content-Type</c>
            </summary>
            <remarks>默认值为：<c>true</c>。</remarks>
        </member>
        <member name="P:HttpAgent.HttpMultipartFormDataBuilder.OnPreAddContent">
            <summary>
                用于处理在添加 <see cref="T:System.Net.Http.HttpContent" /> 表单项内容时的操作
            </summary>
        </member>
        <member name="M:HttpAgent.HttpMultipartFormDataBuilder.SetBoundary(System.String)">
            <summary>
                设置多部分表单内容的边界
            </summary>
            <param name="boundary">多部分表单内容的边界</param>
            <returns>
                <see cref="T:HttpAgent.HttpMultipartFormDataBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpMultipartFormDataBuilder.SetOnPreAddContent(System.Action{System.Net.Http.HttpContent,System.String})">
            <summary>
                设置用于处理在添加 <see cref="T:System.Net.Http.HttpContent" /> 表单项内容时的操作
            </summary>
            <remarks>支持多次调用。</remarks>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpMultipartFormDataBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpMultipartFormDataBuilder.AddJson(System.Object,System.String,System.Text.Encoding)">
            <summary>
                添加 JSON 内容
            </summary>
            <param name="rawJson">JSON 字符串/原始对象</param>
            <param name="name">表单名称。该值不为空时作为表单的一项。否则将遍历对象类型的每一个公开属性作为表单的项。</param>
            <param name="contentEncoding">内容编码</param>
            <returns>
                <see cref="T:HttpAgent.HttpMultipartFormDataBuilder" />
            </returns>
            <exception cref="T:System.Text.Json.JsonException"></exception>
        </member>
        <member name="M:HttpAgent.HttpMultipartFormDataBuilder.AddFormItem(System.Object,System.String,System.Text.Encoding)">
            <summary>
                添加单个表单项内容
            </summary>
            <param name="value">表单值</param>
            <param name="name">表单名称</param>
            <param name="contentEncoding">内容编码</param>
            <returns>
                <see cref="T:HttpAgent.HttpMultipartFormDataBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpMultipartFormDataBuilder.AddHtml(System.String,System.String,System.Text.Encoding)">
            <summary>
                添加 HTML 内容
            </summary>
            <param name="htmlString">HTML 字符串</param>
            <param name="name">表单名称</param>
            <param name="contentEncoding">内容编码</param>
            <returns>
                <see cref="T:HttpAgent.HttpMultipartFormDataBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpMultipartFormDataBuilder.AddXml(System.String,System.String,System.Text.Encoding)">
            <summary>
                添加 XML 内容
            </summary>
            <param name="xmlString">XML 字符串</param>
            <param name="name">表单名称</param>
            <param name="contentEncoding">内容编码</param>
            <returns>
                <see cref="T:HttpAgent.HttpMultipartFormDataBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpMultipartFormDataBuilder.AddText(System.String,System.String,System.Text.Encoding)">
            <summary>
                添加文本内容
            </summary>
            <param name="text">文本</param>
            <param name="name">表单名称</param>
            <param name="contentEncoding">内容编码</param>
            <returns>
                <see cref="T:HttpAgent.HttpMultipartFormDataBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpMultipartFormDataBuilder.AddObject(System.Object,System.String,System.String,System.Text.Encoding)">
            <summary>
                添加对象内容
            </summary>
            <param name="rawObject">原始对象</param>
            <param name="name">表单名称。该值不为空时作为表单的一项。否则将遍历对象类型的每一个公开属性作为表单的项。</param>
            <param name="contentType">内容类型</param>
            <param name="contentEncoding">内容编码</param>
            <returns>
                <see cref="T:HttpAgent.HttpMultipartFormDataBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpMultipartFormDataBuilder.AddFileFromRemote(System.String,System.String,System.String,System.String,System.Text.Encoding)">
            <summary>
                从互联网 URL 中添加文件
            </summary>
            <remarks>文件大小限制在 <c>100MB</c> 以内。</remarks>
            <param name="url">互联网 URL 地址</param>
            <param name="name">表单名称</param>
            <param name="fileName">文件的名称</param>
            <param name="contentType">内容类型</param>
            <param name="contentEncoding">内容编码</param>
            <returns>
                <see cref="T:HttpAgent.HttpMultipartFormDataBuilder" />
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:HttpAgent.HttpMultipartFormDataBuilder.AddFileFromBase64String(System.String,System.String,System.String,System.String,System.Text.Encoding)">
            <summary>
                从 Base64 字符串中添加文件
            </summary>
            <remarks>文件大小限制在 <c>100MB</c> 以内。</remarks>
            <param name="base64String">Base64 字符串</param>
            <param name="name">表单名称</param>
            <param name="fileName">文件的名称</param>
            <param name="contentType">内容类型</param>
            <param name="contentEncoding">内容编码</param>
            <returns>
                <see cref="T:HttpAgent.HttpMultipartFormDataBuilder" />
            </returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:HttpAgent.HttpMultipartFormDataBuilder.AddFileAsStream(System.String,System.String,System.String,System.String,System.Text.Encoding)">
            <summary>
                从本地路径中添加文件
            </summary>
            <param name="filePath">文件路径</param>
            <param name="name">表单名称</param>
            <param name="fileName">文件的名称</param>
            <param name="contentType">内容类型</param>
            <param name="contentEncoding">内容编码</param>
            <returns>
                <see cref="T:HttpAgent.HttpMultipartFormDataBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpMultipartFormDataBuilder.AddFileWithProgressAsStream(System.String,System.Threading.Channels.Channel{HttpAgent.FileTransferProgress},System.String,System.String,System.String,System.Text.Encoding)">
            <summary>
                从本地路径中添加文件（带文件传输进度）
            </summary>
            <param name="filePath">文件路径</param>
            <param name="progressChannel">文件传输进度信息的通道</param>
            <param name="name">表单名称</param>
            <param name="fileName">文件的名称</param>
            <param name="contentType">内容类型</param>
            <param name="contentEncoding">内容编码</param>
            <returns>
                <see cref="T:HttpAgent.HttpMultipartFormDataBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpMultipartFormDataBuilder.AddFileAsByteArray(System.String,System.String,System.String,System.String,System.Text.Encoding)">
            <summary>
                从本地路径中添加文件
            </summary>
            <param name="filePath">文件路径</param>
            <param name="name">表单名称</param>
            <param name="fileName">文件的名称</param>
            <param name="contentType">内容类型</param>
            <param name="contentEncoding">内容编码</param>
            <returns>
                <see cref="T:HttpAgent.HttpMultipartFormDataBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpMultipartFormDataBuilder.AddFile(HttpAgent.MultipartFile)">
            <summary>
                添加文件
            </summary>
            <remarks>使用 <c>MultipartFile.CreateFrom[Source]</c> 静态方法创建。</remarks>
            <param name="multipartFile">
                <see cref="T:HttpAgent.MultipartFile" />
            </param>
            <returns>
                <see cref="T:HttpAgent.HttpMultipartFormDataBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpMultipartFormDataBuilder.AddStream(System.IO.Stream,System.String,System.String,System.String,System.Text.Encoding)">
            <summary>
                添加流
            </summary>
            <param name="stream">
                <see cref="T:System.IO.Stream" />
            </param>
            <param name="name">表单名称</param>
            <param name="fileName">文件的名称</param>
            <param name="contentType">内容类型</param>
            <param name="contentEncoding">内容编码</param>
            <returns>
                <see cref="T:HttpAgent.HttpMultipartFormDataBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpMultipartFormDataBuilder.AddByteArray(System.Byte[],System.String,System.String,System.String,System.Text.Encoding)">
            <summary>
                添加字节数组
            </summary>
            <param name="byteArray">字节数组</param>
            <param name="name">表单名称</param>
            <param name="fileName">文件的名称</param>
            <param name="contentType">内容类型</param>
            <param name="contentEncoding">内容编码</param>
            <returns>
                <see cref="T:HttpAgent.HttpMultipartFormDataBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpMultipartFormDataBuilder.AddFormUrlEncoded(System.Object,System.String,System.Text.Encoding,System.Boolean)">
            <summary>
                添加 URL 编码表单
            </summary>
            <param name="rawObject">原始对象</param>
            <param name="name">表单名称</param>
            <param name="contentEncoding">内容编码</param>
            <param name="useStringContent">
                是否使用 <see cref="T:System.Net.Http.StringContent" /> 构建
                <see cref="T:System.Net.Http.FormUrlEncodedContent" />。默认 <c>false</c>。
            </param>
            <returns>
                <see cref="T:HttpAgent.HttpMultipartFormDataBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpMultipartFormDataBuilder.AddMultipartFormData(System.Object,System.String,System.Text.Encoding)">
            <summary>
                添加多部分表单内容
            </summary>
            <param name="rawObject">原始对象</param>
            <param name="name">表单名称</param>
            <param name="contentEncoding">内容编码</param>
            <returns>
                <see cref="T:HttpAgent.HttpMultipartFormDataBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpMultipartFormDataBuilder.Add(System.Net.Http.HttpContent,System.String,System.String,System.Text.Encoding)">
            <summary>
                添加 <see cref="T:System.Net.Http.HttpContent" />
            </summary>
            <param name="httpContent">
                <see cref="T:System.Net.Http.HttpContent" />
            </param>
            <param name="name">表单名称</param>
            <param name="contentType">内容类型</param>
            <param name="contentEncoding">内容编码</param>
            <returns>
                <see cref="T:HttpAgent.HttpMultipartFormDataBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpMultipartFormDataBuilder.Build(HttpAgent.HttpRemoteOptions,HttpAgent.IHttpContentProcessorFactory,HttpAgent.IHttpContentProcessor[])">
            <summary>
                构建 <see cref="T:System.Net.Http.MultipartFormDataContent" /> 实例
            </summary>
            <param name="httpRemoteOptions">
                <see cref="T:HttpAgent.HttpRemoteOptions" />
            </param>
            <param name="httpContentProcessorFactory">
                <see cref="T:HttpAgent.IHttpContentProcessorFactory" />
            </param>
            <param name="processors"><see cref="T:HttpAgent.IHttpContentProcessor" /> 集合</param>
            <returns>
                <see cref="T:System.Net.Http.MultipartFormDataContent" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpMultipartFormDataBuilder.BuildHttpContent(HttpAgent.MultipartFormDataItem,HttpAgent.IHttpContentProcessorFactory,HttpAgent.IHttpContentProcessor[])">
            <summary>
                构建 <see cref="T:System.Net.Http.HttpContent" /> 实例
            </summary>
            <param name="multipartFormDataItem">
                <see cref="T:HttpAgent.MultipartFormDataItem" />
            </param>
            <param name="httpContentProcessorFactory">
                <see cref="T:HttpAgent.IHttpContentProcessorFactory" />
            </param>
            <param name="processors"><see cref="T:HttpAgent.IHttpContentProcessor" /> 集合</param>
            <returns>
                <see cref="T:System.Net.Http.HttpContent" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpMultipartFormDataBuilder.ParseContentType(System.String,System.Text.Encoding,System.Text.Encoding@)">
            <summary>
                解析内容类型字符串
            </summary>
            <param name="contentType">内容类型</param>
            <param name="contentEncoding">内容编码</param>
            <param name="encoding">内容编码</param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="T:HttpAgent.HttpRemoteBuilder">
            <summary>
                HTTP 远程请求构建器
            </summary>
        </member>
        <member name="F:HttpAgent.HttpRemoteBuilder._httpContentConverterProviders">
            <summary>
                <see cref="T:HttpAgent.IHttpContentConverter" /> 集合
            </summary>
        </member>
        <member name="F:HttpAgent.HttpRemoteBuilder._httpContentProcessorProviders">
            <summary>
                <see cref="T:HttpAgent.IHttpContentProcessor" /> 集合
            </summary>
        </member>
        <member name="F:HttpAgent.HttpRemoteBuilder._httpDeclarativeExtractors">
            <summary>
                <see cref="T:HttpAgent.IHttpDeclarativeExtractor" /> 集合
            </summary>
        </member>
        <member name="F:HttpAgent.HttpRemoteBuilder._httpDeclarativeTypes">
            <summary>
                <see cref="T:HttpAgent.IHttpDeclarative" /> 类型集合
            </summary>
        </member>
        <member name="F:HttpAgent.HttpRemoteBuilder._objectContentConverterFactoryType">
            <summary>
                <see cref="T:HttpAgent.IObjectContentConverterFactory" /> 实现类型
            </summary>
        </member>
        <member name="M:HttpAgent.HttpRemoteBuilder.AddHttpContentProcessors(System.Func{System.Collections.Generic.IEnumerable{HttpAgent.IHttpContentProcessor}})">
            <summary>
                添加 <see cref="T:HttpAgent.IHttpContentProcessor" /> 请求内容处理器
            </summary>
            <remarks>支持多次调用。</remarks>
            <param name="configure"><see cref="T:HttpAgent.IHttpContentProcessor" /> 实例提供器</param>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRemoteBuilder.AddHttpContentConverters(System.Func{System.Collections.Generic.IEnumerable{HttpAgent.IHttpContentConverter}})">
            <summary>
                添加 <see cref="T:HttpAgent.IHttpContentConverter" /> 响应内容转换器
            </summary>
            <remarks>支持多次调用。</remarks>
            <param name="configure"><see cref="T:HttpAgent.IHttpContentConverter" /> 实例提供器</param>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRemoteBuilder.UseObjectContentConverterFactory``1">
            <summary>
                设置 <see cref="T:HttpAgent.IObjectContentConverterFactory" /> 对象内容转换器工厂
            </summary>
            <typeparam name="TFactory">
                <see cref="T:HttpAgent.IObjectContentConverterFactory" />
            </typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRemoteBuilder.UseObjectContentConverterFactory(System.Type)">
            <summary>
                设置 <see cref="T:HttpAgent.IObjectContentConverterFactory" /> 对象内容转换器工厂
            </summary>
            <param name="factoryType">
                <see cref="T:HttpAgent.IObjectContentConverterFactory" />
            </param>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteBuilder" />
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:HttpAgent.HttpRemoteBuilder.AddHttpDeclarative``1">
            <summary>
                添加 HTTP 声明式服务
            </summary>
            <typeparam name="TDeclarative">
                <see cref="T:HttpAgent.IHttpDeclarative" />
            </typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRemoteBuilder.AddHttpDeclarative(System.Type)">
            <summary>
                添加 HTTP 声明式服务
            </summary>
            <param name="declarativeType">
                <see cref="T:HttpAgent.IHttpDeclarative" />
            </param>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteBuilder" />
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:HttpAgent.HttpRemoteBuilder.AddHttpDeclaratives(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
                添加 HTTP 声明式服务
            </summary>
            <param name="declarativeTypes">
                <see cref="T:HttpAgent.IHttpDeclarative" /> 集合
            </param>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteBuilder" />
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:HttpAgent.HttpRemoteBuilder.AddHttpDeclarativeFromAssemblies(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
                扫描程序集并添加 HTTP 声明式服务
            </summary>
            <param name="assemblies"><see cref="T:System.Reflection.Assembly" /> 集合</param>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRemoteBuilder.AddHttpDeclarativeExtractors(System.Func{System.Collections.Generic.IEnumerable{HttpAgent.IHttpDeclarativeExtractor}})">
            <summary>
                添加 HTTP 声明式 <see cref="T:HttpAgent.IHttpDeclarativeExtractor" /> 提取器
            </summary>
            <remarks>支持多次调用。</remarks>
            <param name="configure"><see cref="T:HttpAgent.IHttpDeclarativeExtractor" /> 实例提供器</param>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRemoteBuilder.AddHttpDeclarativeExtractorFromAssemblies(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
                扫描程序集并添加 HTTP 声明式 <see cref="T:HttpAgent.IHttpDeclarativeExtractor" /> 提取器
            </summary>
            <remarks>支持多次调用。</remarks>
            <param name="assemblies"><see cref="T:System.Reflection.Assembly" /> 集合</param>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRemoteBuilder.Build(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
                构建模块服务
            </summary>
            <param name="services">
                <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
            </param>
        </member>
        <member name="M:HttpAgent.HttpRemoteBuilder.BuildHttpDeclarativeServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
                构建 HTTP 声明式远程请求服务
            </summary>
            <param name="services">
                <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
            </param>
        </member>
        <member name="T:HttpAgent.HttpRequestBuilder">
            <summary>
                <see cref="T:System.Net.Http.HttpRequestMessage" /> 构建器
            </summary>
            <summary>
                <see cref="T:System.Net.Http.HttpRequestMessage" /> 构建器
            </summary>
            <summary>
                <see cref="T:System.Net.Http.HttpRequestMessage" /> 构建器
            </summary>
            <summary>
                <see cref="T:System.Net.Http.HttpRequestMessage" /> 构建器
            </summary>
        </member>
        <member name="F:HttpAgent.HttpRequestBuilder._stringContentForFormUrlEncodedContentProcessorInstance">
            <summary>
                <see cref="T:HttpAgent.StringContentForFormUrlEncodedContentProcessor" /> 实例
            </summary>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.#ctor(System.Net.Http.HttpMethod,System.Uri)">
            <summary>
                <inheritdoc cref="T:HttpAgent.HttpRequestBuilder" />
            </summary>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址</param>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.Build(HttpAgent.HttpRemoteOptions,HttpAgent.IHttpContentProcessorFactory,System.Uri)">
            <summary>
                构建 <see cref="T:System.Net.Http.HttpRequestMessage" /> 实例
            </summary>
            <param name="httpRemoteOptions">
                <see cref="T:HttpAgent.HttpRemoteOptions" />
            </param>
            <param name="httpContentProcessorFactory">
                <see cref="T:HttpAgent.IHttpContentProcessorFactory" />
            </param>
            <param name="clientBaseAddress">客户端基地址</param>
            <returns>
                <see cref="T:System.Net.Http.HttpRequestMessage" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.BuildFinalRequestUri(System.Uri,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
                构建最终的请求地址
            </summary>
            <param name="clientBaseAddress">客户端基地址</param>
            <param name="configuration">
                <see cref="T:Microsoft.Extensions.Configuration.IConfiguration" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.AppendFragment(System.UriBuilder)">
            <summary>
                追加片段标识符
            </summary>
            <param name="uriBuilder">
                <see cref="T:System.UriBuilder" />
            </param>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.AppendQueryParameters(System.UriBuilder)">
            <summary>
                追加查询参数
            </summary>
            <param name="uriBuilder">
                <see cref="T:System.UriBuilder" />
            </param>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.ReplacePlaceholders(System.String,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
                替换路径或配置参数
            </summary>
            <param name="originalUri">源请求地址</param>
            <param name="configuration">
                <see cref="T:Microsoft.Extensions.Configuration.IConfiguration" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.AppendHeaders(System.Net.Http.HttpRequestMessage)">
            <summary>
                追加请求标头
            </summary>
            <param name="httpRequestMessage">
                <see cref="T:System.Net.Http.HttpRequestMessage" />
            </param>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.AppendAuthentication(System.Net.Http.HttpRequestMessage)">
            <summary>
                添加身份认证
            </summary>
            <param name="httpRequestMessage">
                <see cref="T:System.Net.Http.HttpRequestMessage" />
            </param>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.RemoveHeaders(System.Net.Http.HttpRequestMessage)">
            <summary>
                移除请求标头
            </summary>
            <param name="httpRequestMessage">
                <see cref="T:System.Net.Http.HttpRequestMessage" />
            </param>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.EnablePerformanceOptimization(System.Net.Http.HttpRequestMessage)">
            <summary>
                启用性能优化
            </summary>
            <param name="httpRequestMessage">
                <see cref="T:System.Net.Http.HttpRequestMessage" />
            </param>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.AppendCookies(System.Net.Http.HttpRequestMessage)">
            <summary>
                追加 Cookies
            </summary>
            <param name="httpRequestMessage">
                <see cref="T:System.Net.Http.HttpRequestMessage" />
            </param>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.RemoveCookies(System.Net.Http.HttpRequestMessage)">
            <summary>
                移除 Cookies
            </summary>
            <param name="httpRequestMessage">
                <see cref="T:System.Net.Http.HttpRequestMessage" />
            </param>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.BuildAndSetContent(System.Net.Http.HttpRequestMessage,HttpAgent.IHttpContentProcessorFactory,HttpAgent.HttpRemoteOptions)">
            <summary>
                构建并设置指定的 <see cref="T:System.Net.Http.HttpRequestMessage" /> 请求消息的内容
            </summary>
            <param name="httpRequestMessage">
                <see cref="T:System.Net.Http.HttpRequestMessage" />
            </param>
            <param name="httpContentProcessorFactory">
                <see cref="T:HttpAgent.IHttpContentProcessorFactory" />
            </param>
            <param name="httpRemoteOptions">
                <see cref="T:HttpAgent.HttpRemoteOptions" />
            </param>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.AppendProperties(System.Net.Http.HttpRequestMessage)">
            <summary>
                追加 <see cref="T:System.Net.Http.HttpRequestMessage" /> 请求属性集合
            </summary>
            <param name="httpRequestMessage">
                <see cref="T:System.Net.Http.HttpRequestMessage" />
            </param>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.SetDefaultContentType(System.String)">
            <summary>
                设置默认的内容类型
            </summary>
            <param name="defaultContentType">默认请求内容类型</param>
        </member>
        <member name="F:HttpAgent.HttpRequestBuilder._lock">
            <summary>
                线程锁
            </summary>
            <remarks>用于保证 <see cref="M:HttpAgent.HttpRequestBuilder.AddStringContentForFormUrlEncodedContentProcessor" /> 方法调用是线程安全的。</remarks>
        </member>
        <member name="F:HttpAgent.HttpRequestBuilder._isAddedStringContentForFormUrlEncodedContentProcessor">
            <summary>
                表示是否已添加了 <see cref="T:HttpAgent.StringContentForFormUrlEncodedContentProcessor" /> 处理器
            </summary>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.SetTraceIdentifier(System.String,System.Boolean)">
            <summary>
                设置跟踪标识
            </summary>
            <param name="traceIdentifier">设置跟踪标识</param>
            <param name="escape">是否转义字符串，默认 <c>false</c></param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.SetContentType(System.String)">
            <summary>
                设置内容类型
            </summary>
            <param name="contentType">内容类型</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.SetContentEncoding(System.Text.Encoding)">
            <summary>
                设置内容编码
            </summary>
            <param name="encoding">内容编码</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.SetContentEncoding(System.String)">
            <summary>
                设置内容编码
            </summary>
            <param name="encodingName">内容编码名</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.SetJsonContent(System.Object,System.Text.Encoding)">
            <summary>
                设置 JSON 内容
            </summary>
            <param name="rawJson">JSON 字符串/原始对象</param>
            <param name="contentEncoding">内容编码</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
            <exception cref="T:System.Text.Json.JsonException"></exception>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.SetHtmlContent(System.String,System.Text.Encoding)">
            <summary>
                设置 HTML 内容
            </summary>
            <param name="htmlString">HTML 字符串</param>
            <param name="contentEncoding">内容编码</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.SetXmlContent(System.String,System.Text.Encoding)">
            <summary>
                设置 XML 内容
            </summary>
            <param name="xmlString">XML 字符串</param>
            <param name="contentEncoding">内容编码</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.SetTextContent(System.String,System.Text.Encoding)">
            <summary>
                设置文本内容
            </summary>
            <param name="text">文本</param>
            <param name="contentEncoding">内容编码</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.SetRawStringContent(System.String,System.String,System.Text.Encoding)">
            <summary>
                设置原始字符串内容
            </summary>
            <remarks>字符串内容将被双引号包围并发送，格式如下：<c>"内容"</c>。</remarks>
            <param name="text">文本</param>
            <param name="contentType">内容类型</param>
            <param name="contentEncoding">内容编码</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.SetFormUrlEncodedContent(System.Object,System.Text.Encoding,System.Boolean)">
            <summary>
                设置 URL 编码表单内容
            </summary>
            <param name="rawObject">原始对象</param>
            <param name="contentEncoding">内容编码</param>
            <param name="useStringContent">
                是否使用 <see cref="T:System.Net.Http.StringContent" /> 构建
                <see cref="T:System.Net.Http.FormUrlEncodedContent" />。默认 <c>false</c>。
            </param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.SetContent(System.Object,System.String,System.Text.Encoding)">
            <summary>
                设置请求内容
            </summary>
            <param name="rawContent">原始请求内容</param>
            <param name="contentType">内容类型</param>
            <param name="contentEncoding">内容编码</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.SetMultipartContent(System.Action{HttpAgent.HttpMultipartFormDataBuilder})">
            <summary>
                设置多部分表单内容，请求类型为 <c>multipart/form-data</c>
            </summary>
            <remarks>
                该操作将强制覆盖 <see cref="M:HttpAgent.HttpRequestBuilder.SetContent(System.Object,System.String,System.Text.Encoding)" />、<see cref="M:HttpAgent.HttpRequestBuilder.SetContentEncoding(System.Text.Encoding)" /> 和
                <see cref="M:HttpAgent.HttpRequestBuilder.SetContentType(System.String)" /> 设置的内容。
            </remarks>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.SetMultipartContent(HttpAgent.HttpMultipartFormDataBuilder)">
            <summary>
                设置多部分表单内容，请求类型为 <c>multipart/form-data</c>
            </summary>
            <remarks>
                该操作将强制覆盖 <see cref="M:HttpAgent.HttpRequestBuilder.SetContent(System.Object,System.String,System.Text.Encoding)" />、<see cref="M:HttpAgent.HttpRequestBuilder.SetContentEncoding(System.Text.Encoding)" /> 和
                <see cref="M:HttpAgent.HttpRequestBuilder.SetContentType(System.String)" /> 设置的内容。
            </remarks>
            <param name="httpMultipartFormDataBuilder">
                <see cref="T:HttpAgent.HttpMultipartFormDataBuilder" />
            </param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.WithHeader(System.String,System.Object,System.Boolean,System.Globalization.CultureInfo,System.Collections.Generic.IEqualityComparer{System.String},System.Boolean)">
            <summary>
                设置请求标头
            </summary>
            <remarks>支持多次调用。</remarks>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="escape">是否转义字符串，默认 <c>false</c></param>
            <param name="culture">
                <see cref="T:System.Globalization.CultureInfo" />
            </param>
            <param name="comparer">
                <see cref="T:System.Collections.Generic.IEqualityComparer`1" />
            </param>
            <param name="replace">是否替换已存在的请求标头。默认值为 <c>false</c>。</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.WithHeaders(System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,System.Globalization.CultureInfo,System.Collections.Generic.IEqualityComparer{System.String},System.Boolean)">
            <summary>
                设置请求标头
            </summary>
            <remarks>支持多次调用。</remarks>
            <param name="headers">请求标头集合</param>
            <param name="escape">是否转义字符串，默认 <c>false</c></param>
            <param name="culture">
                <see cref="T:System.Globalization.CultureInfo" />
            </param>
            <param name="comparer">
                <see cref="T:System.Collections.Generic.IEqualityComparer`1" />
            </param>
            <param name="replace">是否替换已存在的请求标头。默认值为 <c>false</c>。</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.WithHeaders(System.Object,System.Boolean,System.Globalization.CultureInfo,System.Collections.Generic.IEqualityComparer{System.String},System.Boolean)">
            <summary>
                设置请求标头
            </summary>
            <remarks>支持多次调用。</remarks>
            <param name="headerSource">请求标头源对象</param>
            <param name="escape">是否转义字符串，默认 <c>false</c></param>
            <param name="culture">
                <see cref="T:System.Globalization.CultureInfo" />
            </param>
            <param name="comparer">
                <see cref="T:System.Collections.Generic.IEqualityComparer`1" />
            </param>
            <param name="replace">是否替换已存在的请求标头。默认值为 <c>false</c>。</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.RemoveHeaders(System.String[])">
            <summary>
                设置需要从请求中移除的标头
            </summary>
            <remarks>支持多次调用。</remarks>
            <param name="headerNames">请求标头名集合</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.SetFragment(System.String,System.Boolean)">
            <summary>
                设置片段标识符
            </summary>
            <param name="fragment">片段标识符</param>
            <param name="escape">是否转义字符串，默认 <c>false</c></param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.SetTimeout(System.TimeSpan)">
            <summary>
                设置超时时间
            </summary>
            <param name="timeout">超时时间</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.SetTimeout(System.Double)">
            <summary>
                设置超时时间
            </summary>
            <param name="timeoutMilliseconds">超时时间（毫秒）</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.WithQueryParameter(System.String,System.Object,System.Boolean,System.Globalization.CultureInfo,System.Collections.Generic.IEqualityComparer{System.String},System.Boolean,System.Boolean)">
            <summary>
                设置查询参数
            </summary>
            <remarks>支持多次调用。</remarks>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="escape">是否转义字符串，默认 <c>false</c></param>
            <param name="culture">
                <see cref="T:System.Globalization.CultureInfo" />
            </param>
            <param name="comparer">
                <see cref="T:System.Collections.Generic.IEqualityComparer`1" />
            </param>
            <param name="replace">是否替换已存在的查询参数。默认值为 <c>false</c>。</param>
            <param name="ignoreNullValues">是否忽略空值。默认值为 <c>false</c>。</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.WithQueryParameters(System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,System.Globalization.CultureInfo,System.Collections.Generic.IEqualityComparer{System.String},System.Boolean,System.Boolean)">
            <summary>
                设置查询参数
            </summary>
            <remarks>支持多次调用。</remarks>
            <param name="parameters">查询参数集合</param>
            <param name="escape">是否转义字符串，默认 <c>false</c></param>
            <param name="culture">
                <see cref="T:System.Globalization.CultureInfo" />
            </param>
            <param name="comparer">
                <see cref="T:System.Collections.Generic.IEqualityComparer`1" />
            </param>
            <param name="replace">是否替换已存在的查询参数。默认值为 <c>false</c>。</param>
            <param name="ignoreNullValues">是否忽略空值。默认值为 <c>false</c>。</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.WithQueryParameters(System.Object,System.String,System.Boolean,System.Globalization.CultureInfo,System.Collections.Generic.IEqualityComparer{System.String},System.Boolean,System.Boolean)">
            <summary>
                设置查询参数
            </summary>
            <remarks>支持多次调用。</remarks>
            <param name="parameterSource">查询参数集合</param>
            <param name="prefix">参数前缀。对于对象类型可生成如 <c>prefix.Name=furion</c> 与 <c>prefix.Age=30</c> 参数格式。</param>
            <param name="escape">是否转义字符串，默认 <c>false</c></param>
            <param name="culture">
                <see cref="T:System.Globalization.CultureInfo" />
            </param>
            <param name="comparer">
                <see cref="T:System.Collections.Generic.IEqualityComparer`1" />
            </param>
            <param name="replace">是否替换已存在的查询参数。默认值为 <c>false</c>。</param>
            <param name="ignoreNullValues">是否忽略空值。默认值为 <c>false</c>。</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.RemoveQueryParameters(System.String[])">
            <summary>
                设置需要从 URL 中移除的查询参数集合
            </summary>
            <remarks>支持多次调用。</remarks>
            <param name="parameterNames">查询参数键集合</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.WithPathParameter(System.String,System.Object,System.Boolean,System.Globalization.CultureInfo,System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
                设置路径参数
            </summary>
            <remarks>支持多次调用。</remarks>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="escape">是否转义字符串，默认 <c>false</c></param>
            <param name="culture">
                <see cref="T:System.Globalization.CultureInfo" />
            </param>
            <param name="comparer">
                <see cref="T:System.Collections.Generic.IEqualityComparer`1" />
            </param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.WithPathParameters(System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,System.Globalization.CultureInfo,System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
                设置路径参数
            </summary>
            <remarks>支持多次调用。</remarks>
            <param name="parameters">路径参数集合</param>
            <param name="escape">是否转义字符串，默认 <c>false</c></param>
            <param name="culture">
                <see cref="T:System.Globalization.CultureInfo" />
            </param>
            <param name="comparer">
                <see cref="T:System.Collections.Generic.IEqualityComparer`1" />
            </param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.WithPathParameters(System.Object,System.String,System.Boolean,System.Globalization.CultureInfo,System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
                设置路径参数
            </summary>
            <remarks>支持多次调用。</remarks>
            <param name="parameterSource">路径参数源对象</param>
            <param name="prefix">模板字符串前缀。若该参数值不为空，则支持 <c>{prefix.Prop.SubProp}</c> 对象路径方式。</param>
            <param name="escape">是否转义字符串，默认 <c>false</c></param>
            <param name="culture">
                <see cref="T:System.Globalization.CultureInfo" />
            </param>
            <param name="comparer">
                <see cref="T:System.Collections.Generic.IEqualityComparer`1" />
            </param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.WithCookie(System.String)">
            <summary>
                设置 Cookies
            </summary>
            <remarks>支持多次调用。</remarks>
            <param name="cookieHeaderValue">Cookie 标头值格式化字符串</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.WithCookie(System.String,System.Object,System.Boolean,System.Globalization.CultureInfo,System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
                设置 Cookies
            </summary>
            <remarks>支持多次调用。</remarks>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="escape">是否转义字符串，默认 <c>false</c></param>
            <param name="culture">
                <see cref="T:System.Globalization.CultureInfo" />
            </param>
            <param name="comparer">
                <see cref="T:System.Collections.Generic.IEqualityComparer`1" />
            </param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.WithCookies(System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,System.Globalization.CultureInfo,System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
                设置 Cookies
            </summary>
            <remarks>支持多次调用。</remarks>
            <param name="cookies">Cookies 集合</param>
            <param name="escape">是否转义字符串，默认 <c>false</c></param>
            <param name="culture">
                <see cref="T:System.Globalization.CultureInfo" />
            </param>
            <param name="comparer">
                <see cref="T:System.Collections.Generic.IEqualityComparer`1" />
            </param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.WithCookies(System.Object,System.Boolean,System.Globalization.CultureInfo,System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
                设置 Cookies
            </summary>
            <remarks>支持多次调用。</remarks>
            <param name="cookieSource">Cookie 参数源对象</param>
            <param name="escape">是否转义字符串，默认 <c>false</c></param>
            <param name="culture">
                <see cref="T:System.Globalization.CultureInfo" />
            </param>
            <param name="comparer">
                <see cref="T:System.Collections.Generic.IEqualityComparer`1" />
            </param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.RemoveCookies(System.String[])">
            <summary>
                需要从请求中移除的 Cookie 集合
            </summary>
            <remarks>支持多次调用。</remarks>
            <param name="cookieNames">Cookie 键集合</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.SetHttpClientName(System.String)">
            <summary>
                设置 <see cref="T:System.Net.Http.HttpClient" /> 实例的配置名称
            </summary>
            <param name="httpClientName"><see cref="T:System.Net.Http.HttpClient" /> 实例的配置名称</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.SetMaxResponseContentBufferSize(System.Int64)">
            <summary>
                设置响应内容最大缓存字节数
            </summary>
            <param name="maxResponseContentBufferSize">响应内容最大缓存字节数</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.SetHttpClientProvider(System.Func{System.ValueTuple{System.Net.Http.HttpClient,System.Action{System.Net.Http.HttpClient}}})">
            <summary>
                设置 <see cref="T:System.Net.Http.HttpClient" /> 实例提供器
            </summary>
            <param name="configure"><inheritdoc cref="T:System.Net.Http.HttpClient" /> 实例提供器</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.AddHttpContentProcessors(System.Func{System.Collections.Generic.IEnumerable{HttpAgent.IHttpContentProcessor}})">
            <summary>
                添加 <see cref="T:HttpAgent.IHttpContentProcessor" /> 请求内容处理器
            </summary>
            <remarks>支持多次调用。</remarks>
            <param name="configure"><see cref="T:HttpAgent.IHttpContentProcessor" /> 实例提供器</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.AddHttpContentConverters(System.Func{System.Collections.Generic.IEnumerable{HttpAgent.IHttpContentConverter}})">
            <summary>
                添加 <see cref="T:HttpAgent.IHttpContentConverter" /> 响应内容转换器
            </summary>
            <remarks>支持多次调用。</remarks>
            <param name="configure"><see cref="T:HttpAgent.IHttpContentConverter" /> 实例提供器</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.SetOnPreSetContent(System.Action{System.Net.Http.HttpContent})">
            <summary>
                设置用于处理在设置 <see cref="T:System.Net.Http.HttpRequestMessage" /> 的 <c>Content</c> 时的操作
            </summary>
            <remarks>支持多次调用。</remarks>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.SetOnPreSendRequest(System.Action{System.Net.Http.HttpRequestMessage})">
            <summary>
                设置在发送 HTTP 请求之前执行的操作
            </summary>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.SetOnPostReceiveResponse(System.Action{System.Net.Http.HttpResponseMessage})">
            <summary>
                设置在收到 HTTP 响应之后执行的操作
            </summary>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.SetOnRequestFailed(System.Action{System.Exception,System.Net.Http.HttpResponseMessage})">
            <summary>
                设置在发送 HTTP 请求发生异常时的操作
            </summary>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.EnsureSuccessStatusCode">
            <summary>
                如果 HTTP 响应的 IsSuccessStatusCode 属性是 <c>false</c>，则引发异常。
            </summary>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.EnsureSuccessStatusCode(System.Boolean)">
            <summary>
                设置是否如果 HTTP 响应的 IsSuccessStatusCode 属性是 <c>false</c>，则引发异常
            </summary>
            <param name="enabled">是否启用</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.AddBasicAuthentication(System.String,System.String)">
            <summary>
                设置 Basic 身份验证凭据请求授权标头
            </summary>
            <param name="username">用户名</param>
            <param name="password">密码</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.AddJwtBearerAuthentication(System.String)">
            <summary>
                设置 JWT (JSON Web Token) 身份验证凭据请求授权标头
            </summary>
            <param name="jwtToken">JWT 字符串</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.AddDigestAuthentication(System.String,System.String)">
            <summary>
                设置 Digest 摘要身份验证凭据请求授权标头
            </summary>
            <param name="username">用户名</param>
            <param name="password">密码</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.AddAuthentication(System.Net.Http.Headers.AuthenticationHeaderValue)">
            <summary>
                设置身份验证凭据请求授权标头
            </summary>
            <param name="authenticationHeader">
                <see cref="T:System.Net.Http.Headers.AuthenticationHeaderValue" />
            </param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.DisableCache">
            <summary>
                设置禁用 HTTP 缓存
            </summary>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.DisableCache(System.Boolean)">
            <summary>
                设置禁用 HTTP 缓存
            </summary>
            <param name="disabled">是否禁用</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.SetEventHandler(System.Type)">
            <summary>
                设置 HTTP 远程请求事件处理程序
            </summary>
            <param name="requestEventHandlerType">实现 <see cref="T:HttpAgent.IHttpRequestEventHandler" /> 接口的类型</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.SetEventHandler``1">
            <summary>
                设置 HTTP 远程请求事件处理程序
            </summary>
            <typeparam name="TRequestEventHandler">
                <see cref="T:HttpAgent.IHttpRequestEventHandler" />
            </typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.UseHttpClientPool">
            <summary>
                设置是否启用 <see cref="T:System.Net.Http.HttpClient" /> 的池化管理
            </summary>
            <remarks>
                <para>用于在并发请求中复用同一个 <see cref="T:System.Net.Http.HttpClient" /> 实例。</para>
                <para>注意：启用池化管理后，在请求完成之后需手动调用 <see cref="M:HttpAgent.HttpRequestBuilder.ReleaseResources" /> 方法释放资源。</para>
            </remarks>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.AddDisposable(System.IDisposable)">
            <summary>
                添加请求结束时需要释放的对象
            </summary>
            <remarks>支持多次调用。</remarks>
            <param name="disposable">
                <see cref="T:System.IDisposable" />
            </param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.ReleaseResources">
            <summary>
                释放资源集合
            </summary>
            <remarks>包含自定义 <see cref="T:System.Net.Http.HttpClient" /> 实例和其他可释放对象集合。</remarks>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.SimulateBrowser(System.Boolean)">
            <summary>
                设置模拟浏览器环境
            </summary>
            <remarks>设置此配置后，将在单次请求标头中添加主流浏览器的 <c>User-Agent</c> 值。</remarks>
            <param name="simulateMobile">是否模拟移动端，默认值为：<c>false</c>（即模拟桌面端）。</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.WithStatusCodeHandler(System.Object,System.Func{System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
                添加状态码处理程序
            </summary>
            <remarks>支持多次调用。</remarks>
            <param name="statusCode">HTTP 状态码</param>
            <param name="handler">自定义处理程序</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.WithAnyStatusCodeHandler(System.Func{System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
                添加任何状态码处理程序
            </summary>
            <remarks>支持多次调用。</remarks>
            <param name="handler">自定义处理程序</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.WithStatusCodeHandler(System.Collections.Generic.IEnumerable{System.Object},System.Func{System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
                添加状态码处理程序
            </summary>
            <remarks>支持多次调用。</remarks>
            <param name="statusCodes">HTTP 状态码集合</param>
            <param name="handler">自定义处理程序</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.Profiler">
            <summary>
                设置是否启用请求分析工具
            </summary>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.Profiler(System.Boolean)">
            <summary>
                设置是否启用请求分析工具
            </summary>
            <param name="enabled">是否启用</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.AcceptLanguage(System.String)">
            <summary>
                设置客户端所偏好的自然语言和区域设置
            </summary>
            <remarks>设置此配置后，将在单次请求标头中添加 <c>Accept-Language</c> 值。</remarks>
            <param name="language">自然语言和区域设置</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.WithProperty(System.String,System.Object)">
            <summary>
                设置 <see cref="T:System.Net.Http.HttpRequestMessage" /> 请求属性
            </summary>
            <remarks>支持多次调用。</remarks>
            <param name="key">键</param>
            <param name="value">值</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.WithProperties(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
                设置 <see cref="T:System.Net.Http.HttpRequestMessage" /> 请求属性集合
            </summary>
            <remarks>支持多次调用。</remarks>
            <param name="properties">请求的属性集合</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.WithProperties(System.Object)">
            <summary>
                设置 <see cref="T:System.Net.Http.HttpRequestMessage" /> 请求属性集合
            </summary>
            <remarks>支持多次调用。</remarks>
            <param name="propertySource"><see cref="T:System.Net.Http.HttpRequestMessage" /> 请求的属性源对象</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.PerformanceOptimization">
            <summary>
                设置是否启用性能优化
            </summary>
            <remarks>当需要返回 <see cref="T:System.IO.Stream" /> 内容或进行 <c>HttpContext</c> 网页转发时，请勿启用此配置，因为流会因压缩而变得不可读，同时该配置也不适用于网页转发的场景。</remarks>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.PerformanceOptimization(System.Boolean)">
            <summary>
                设置是否启用性能优化
            </summary>
            <remarks>当需要返回 <see cref="T:System.IO.Stream" /> 内容或进行 <c>HttpContext</c> 网页转发时，请勿启用此配置，因为流会因压缩而变得不可读，同时该配置也不适用于网页转发的场景。</remarks>
            <param name="enabled">是否启用</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.AutoSetHostHeader">
            <summary>
                设置是否自动设置 <c>Host</c> 标头
            </summary>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.AutoSetHostHeader(System.Boolean)">
            <summary>
                设置是否自动设置 <c>Host</c> 标头
            </summary>
            <param name="enabled">是否启用</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.SetBaseAddress(System.Uri)">
            <summary>
                设置请求基地址
            </summary>
            <param name="baseAddress">基地址</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.SetBaseAddress(System.String)">
            <summary>
                设置请求基地址
            </summary>
            <param name="baseAddress">基地址</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.ReleaseDisposables">
            <summary>
                释放可释放的对象集合
            </summary>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.AddStringContentForFormUrlEncodedContentProcessor">
            <summary>
                添加 <see cref="T:HttpAgent.StringContentForFormUrlEncodedContentProcessor" /> 处理器
            </summary>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.RewriteRequestUri(System.Uri)">
            <summary>
                重写请求地址
            </summary>
            <param name="newRequestUri">新的请求地址</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="P:HttpAgent.HttpRequestBuilder.RequestUri">
            <summary>
                请求地址
            </summary>
        </member>
        <member name="P:HttpAgent.HttpRequestBuilder.Method">
            <summary>
                请求方式
            </summary>
        </member>
        <member name="P:HttpAgent.HttpRequestBuilder.TraceIdentifier">
            <summary>
                跟踪标识
            </summary>
            <remarks>
                <para>可为每个请求指定唯一标识符，用于请求的跟踪和调试。</para>
                <para>唯一标识符将在 <see cref="T:System.Net.Http.HttpRequestMessage" /> 类型实例的 <c>Headers</c> 属性中通过 <c>X-Trace-ID</c> 作为键指定。</para>
            </remarks>
        </member>
        <member name="P:HttpAgent.HttpRequestBuilder.ContentType">
            <summary>
                内容类型
            </summary>
        </member>
        <member name="P:HttpAgent.HttpRequestBuilder.ContentEncoding">
            <summary>
                内容编码
            </summary>
        </member>
        <member name="P:HttpAgent.HttpRequestBuilder.RawContent">
            <summary>
                原始请求内容
            </summary>
            <remarks>此属性值最终将转换为 <see cref="T:System.Net.Http.HttpContent" /> 类型实例。</remarks>
        </member>
        <member name="P:HttpAgent.HttpRequestBuilder.Headers">
            <summary>
                请求标头集合
            </summary>
        </member>
        <member name="P:HttpAgent.HttpRequestBuilder.HeadersToRemove">
            <summary>
                需要从请求中移除的标头集合
            </summary>
        </member>
        <member name="P:HttpAgent.HttpRequestBuilder.Fragment">
            <summary>
                片段标识符
            </summary>
            <remarks>请求地址中的 <c>#</c> 符号后面的部分。</remarks>
        </member>
        <member name="P:HttpAgent.HttpRequestBuilder.Timeout">
            <summary>
                超时时间
            </summary>
            <remarks>可为单次请求设置超时时间。</remarks>
        </member>
        <member name="P:HttpAgent.HttpRequestBuilder.QueryParameters">
            <summary>
                查询参数集合
            </summary>
            <remarks>请求地址中位于 <c>?</c> 符号之后且 <c>#</c> 符号之前的部分。</remarks>
        </member>
        <member name="P:HttpAgent.HttpRequestBuilder.QueryParametersToRemove">
            <summary>
                需要从 URL 中移除的查询参数集合
            </summary>
        </member>
        <member name="P:HttpAgent.HttpRequestBuilder.PathParameters">
            <summary>
                路径参数集合
            </summary>
            <remarks>用于替换请求地址中符合 <c>\{\s*(\w+\s*(\.\s*\w+\s*)*)\s*\}</c> 正则表达式匹配的数据。</remarks>
        </member>
        <member name="P:HttpAgent.HttpRequestBuilder.ObjectPathParameters">
            <summary>
                路径参数集合
            </summary>
            <remarks>支持自定义类类型。用于替换请求地址中符合 <c>\{\s*(\w+\s*(\.\s*\w+\s*)*)\s*\}</c> 正则表达式匹配的数据。</remarks>
        </member>
        <member name="P:HttpAgent.HttpRequestBuilder.Cookies">
            <summary>
                Cookies 集合
            </summary>
            <remarks>
                <para>可为单次请求设置 Cookies。</para>
                <para>Cookies 将在 <see cref="T:System.Net.Http.HttpRequestMessage" /> 类型实例的 <c>Headers</c> 属性中通过 <c>Cookie</c> 作为键指定。</para>
                <para>使用该方式不会自动处理服务器返回的 <c>Set-Cookie</c> 头。</para>
            </remarks>
        </member>
        <member name="P:HttpAgent.HttpRequestBuilder.CookiesToRemove">
            <summary>
                需要从请求中移除的 Cookie 集合
            </summary>
        </member>
        <member name="P:HttpAgent.HttpRequestBuilder.HttpClientName">
            <summary>
                <see cref="T:System.Net.Http.HttpClient" /> 实例的配置名称
            </summary>
            <remarks>
                <para>此属性用于指定 <see cref="T:System.Net.Http.IHttpClientFactory" /> 创建 <see cref="T:System.Net.Http.HttpClient" /> 实例时传递的名称。</para>
                <para>该名称用于标识在服务容器中与特定 <see cref="T:System.Net.Http.HttpClient" /> 实例相关的配置。</para>
            </remarks>
        </member>
        <member name="P:HttpAgent.HttpRequestBuilder.MaxResponseContentBufferSize">
            <summary>
                响应内容最大缓存字节数
            </summary>
            <remarks>可为单次请求设置最大缓存字节数。</remarks>
        </member>
        <member name="P:HttpAgent.HttpRequestBuilder.HttpClientProvider">
            <summary>
                <see cref="T:System.Net.Http.HttpClient" /> 实例提供器
            </summary>
            <value>
                <para>返回一个包含 <see cref="T:System.Net.Http.HttpClient" /> 实例及其释放方法的委托。</para>
                <para>释放方法的委托用于在不再需要 <see cref="T:System.Net.Http.HttpClient" /> 实例时释放资源。</para>
            </value>
        </member>
        <member name="P:HttpAgent.HttpRequestBuilder.HttpContentProcessorProviders">
            <summary>
                <see cref="T:HttpAgent.IHttpContentProcessor" /> 集合提供器
            </summary>
            <value>返回多个包含实现 <see cref="T:HttpAgent.IHttpContentProcessor" /> 集合的集合。</value>
        </member>
        <member name="P:HttpAgent.HttpRequestBuilder.HttpContentConverterProviders">
            <summary>
                <see cref="T:HttpAgent.IHttpContentConverter" /> 集合提供器
            </summary>
            <value>返回多个包含实现 <see cref="T:HttpAgent.IHttpContentConverter" /> 集合的集合。</value>
        </member>
        <member name="P:HttpAgent.HttpRequestBuilder.OnPreSetContent">
            <summary>
                用于处理在设置 <see cref="T:System.Net.Http.HttpRequestMessage" /> 的请求消息的内容时的操作
            </summary>
        </member>
        <member name="P:HttpAgent.HttpRequestBuilder.OnPreSendRequest">
            <summary>
                用于处理在发送 HTTP 请求之前的操作
            </summary>
        </member>
        <member name="P:HttpAgent.HttpRequestBuilder.OnPostReceiveResponse">
            <summary>
                用于处理在收到 HTTP 响应之后的操作
            </summary>
        </member>
        <member name="P:HttpAgent.HttpRequestBuilder.OnRequestFailed">
            <summary>
                用于处理在发送 HTTP 请求发生异常时的操作
            </summary>
        </member>
        <member name="P:HttpAgent.HttpRequestBuilder.AuthenticationHeader">
            <summary>
                身份验证凭据请求授权标头
            </summary>
            <remarks>可为单次请求设置身份验证凭据请求授权标头。</remarks>
        </member>
        <member name="P:HttpAgent.HttpRequestBuilder.Properties">
            <summary>
                <see cref="T:System.Net.Http.HttpRequestMessage" /> 请求属性集合
            </summary>
            <remarks>用于添加 <see cref="T:System.Net.Http.HttpRequestMessage" /> 请求属性。该值将合并到 <c>HttpRequestMessage.Options</c> 属性中。</remarks>
        </member>
        <member name="P:HttpAgent.HttpRequestBuilder.BaseAddress">
            <summary>
                请求基地址
            </summary>
        </member>
        <member name="P:HttpAgent.HttpRequestBuilder.MultipartFormDataBuilder">
            <summary>
                <inheritdoc cref="T:HttpAgent.HttpMultipartFormDataBuilder" />
            </summary>
        </member>
        <member name="P:HttpAgent.HttpRequestBuilder.EnsureSuccessStatusCodeEnabled">
            <summary>
                如果 HTTP 响应的 <c>IsSuccessStatusCode</c> 属性是 <c>false</c>，则引发异常。
            </summary>
            <remarks>默认值为 <c>false</c>。</remarks>
        </member>
        <member name="P:HttpAgent.HttpRequestBuilder.DisableCacheEnabled">
            <summary>
                是否禁用 HTTP 缓存
            </summary>
            <remarks>可为单次请求设置禁用 HTTP 缓存。默认值为：<c>false</c>。</remarks>
        </member>
        <member name="P:HttpAgent.HttpRequestBuilder.RequestEventHandlerType">
            <summary>
                实现 <see cref="T:HttpAgent.IHttpRequestEventHandler" /> 的类型
            </summary>
        </member>
        <member name="P:HttpAgent.HttpRequestBuilder.Disposables">
            <summary>
                用于请求结束时需要释放的对象集合
            </summary>
        </member>
        <member name="P:HttpAgent.HttpRequestBuilder.HttpClientPooling">
            <summary>
                <see cref="T:System.Net.Http.HttpClient" /> 实例管理器
            </summary>
        </member>
        <member name="P:HttpAgent.HttpRequestBuilder.HttpClientPoolingEnabled">
            <summary>
                是否启用 <see cref="T:System.Net.Http.HttpClient" /> 的池化管理
            </summary>
            <remarks>默认值为：<c>false</c>。</remarks>
        </member>
        <member name="P:HttpAgent.HttpRequestBuilder.ProfilerEnabled">
            <summary>
                是否启用请求分析工具
            </summary>
            <remarks>默认值为：<c>false</c>。</remarks>
        </member>
        <member name="P:HttpAgent.HttpRequestBuilder.PerformanceOptimizationEnabled">
            <summary>
                是否启用性能优化
            </summary>
            <remarks>默认值为：<c>false</c>。</remarks>
        </member>
        <member name="P:HttpAgent.HttpRequestBuilder.AutoSetHostHeaderEnabled">
            <summary>
                是否自动设置 <c>Host</c> 标头
            </summary>
            <remarks><c>Host</c> 标头是 <c>HTTP/1.1</c> 协议中的一个必需标头。默认值为：<c>false</c>，表示不默认添加 <c>Host</c> 标头。</remarks>
        </member>
        <member name="P:HttpAgent.HttpRequestBuilder.__Disabled_Profiler__">
            <summary>
                表示禁用请求分析工具标识
            </summary>
            <remarks>用于禁用全局请求分析工具。</remarks>
        </member>
        <member name="P:HttpAgent.HttpRequestBuilder.StatusCodeHandlers">
            <summary>
                状态码处理程序
            </summary>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.Get(System.String,System.Action{HttpAgent.HttpRequestBuilder})">
            <summary>
                创建 <c>GET</c> 请求的 <see cref="T:HttpAgent.HttpRequestBuilder" /> 构建器
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.Get(System.Uri,System.Action{HttpAgent.HttpRequestBuilder})">
            <summary>
                创建 <c>GET</c> 请求的 <see cref="T:HttpAgent.HttpRequestBuilder" /> 构建器
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.Put(System.String,System.Action{HttpAgent.HttpRequestBuilder})">
            <summary>
                创建 <c>PUT</c> 请求的 <see cref="T:HttpAgent.HttpRequestBuilder" /> 构建器
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.Put(System.Uri,System.Action{HttpAgent.HttpRequestBuilder})">
            <summary>
                创建 <c>PUT</c> 请求的 <see cref="T:HttpAgent.HttpRequestBuilder" /> 构建器
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.Post(System.String,System.Action{HttpAgent.HttpRequestBuilder})">
            <summary>
                创建 <c>POST</c> 请求的 <see cref="T:HttpAgent.HttpRequestBuilder" /> 构建器
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.Post(System.Uri,System.Action{HttpAgent.HttpRequestBuilder})">
            <summary>
                创建 <c>POST</c> 请求的 <see cref="T:HttpAgent.HttpRequestBuilder" /> 构建器
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.Delete(System.String,System.Action{HttpAgent.HttpRequestBuilder})">
            <summary>
                创建 <c>DELETE</c> 请求的 <see cref="T:HttpAgent.HttpRequestBuilder" /> 构建器
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.Delete(System.Uri,System.Action{HttpAgent.HttpRequestBuilder})">
            <summary>
                创建 <c>DELETE</c> 请求的 <see cref="T:HttpAgent.HttpRequestBuilder" /> 构建器
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.Head(System.String,System.Action{HttpAgent.HttpRequestBuilder})">
            <summary>
                创建 <c>HEAD</c> 请求的 <see cref="T:HttpAgent.HttpRequestBuilder" /> 构建器
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.Head(System.Uri,System.Action{HttpAgent.HttpRequestBuilder})">
            <summary>
                创建 <c>HEAD</c> 请求的 <see cref="T:HttpAgent.HttpRequestBuilder" /> 构建器
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.Options(System.String,System.Action{HttpAgent.HttpRequestBuilder})">
            <summary>
                创建 <c>OPTIONS</c> 请求的 <see cref="T:HttpAgent.HttpRequestBuilder" /> 构建器
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.Options(System.Uri,System.Action{HttpAgent.HttpRequestBuilder})">
            <summary>
                创建 <c>OPTIONS</c> 请求的 <see cref="T:HttpAgent.HttpRequestBuilder" /> 构建器
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.Trace(System.String,System.Action{HttpAgent.HttpRequestBuilder})">
            <summary>
                创建 <c>TRACE</c> 请求的 <see cref="T:HttpAgent.HttpRequestBuilder" /> 构建器
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.Trace(System.Uri,System.Action{HttpAgent.HttpRequestBuilder})">
            <summary>
                创建 <c>TRACE</c> 请求的 <see cref="T:HttpAgent.HttpRequestBuilder" /> 构建器
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.Patch(System.String,System.Action{HttpAgent.HttpRequestBuilder})">
            <summary>
                创建 <c>PATCH</c> 请求的 <see cref="T:HttpAgent.HttpRequestBuilder" /> 构建器
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.Patch(System.Uri,System.Action{HttpAgent.HttpRequestBuilder})">
            <summary>
                创建 <c>PATCH</c> 请求的 <see cref="T:HttpAgent.HttpRequestBuilder" /> 构建器
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.Create(System.Net.Http.HttpMethod,System.Uri)">
            <summary>
                创建 <see cref="T:HttpAgent.HttpRequestBuilder" /> 构建器
            </summary>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.Create(System.Net.Http.HttpMethod,System.String)">
            <summary>
                创建 <see cref="T:HttpAgent.HttpRequestBuilder" /> 构建器
            </summary>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.Create(System.String,System.String)">
            <summary>
                创建 <see cref="T:HttpAgent.HttpRequestBuilder" /> 构建器
            </summary>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.Create(System.String,System.Uri)">
            <summary>
                创建 <see cref="T:HttpAgent.HttpRequestBuilder" /> 构建器
            </summary>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.Create(System.Net.Http.HttpMethod,System.Uri,System.Action{HttpAgent.HttpRequestBuilder})">
            <summary>
                创建 <see cref="T:HttpAgent.HttpRequestBuilder" /> 构建器
            </summary>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.Create(System.Net.Http.HttpMethod,System.String,System.Action{HttpAgent.HttpRequestBuilder})">
            <summary>
                创建 <see cref="T:HttpAgent.HttpRequestBuilder" /> 构建器
            </summary>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.Create(System.String,System.String,System.Action{HttpAgent.HttpRequestBuilder})">
            <summary>
                创建 <see cref="T:HttpAgent.HttpRequestBuilder" /> 构建器
            </summary>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.DownloadFile(System.Net.Http.HttpMethod,System.Uri,System.String,System.Func{HttpAgent.FileTransferProgress,System.Threading.Tasks.Task},HttpAgent.FileExistsBehavior,System.Action{HttpAgent.HttpFileDownloadBuilder})">
            <summary>
                创建 <see cref="T:HttpAgent.HttpFileDownloadBuilder" /> 构建器
            </summary>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址</param>
            <param name="destinationPath">文件保存的目标路径</param>
            <param name="onProgressChanged">用于传输进度发生变化时执行的委托</param>
            <param name="fileExistsBehavior">
                <see cref="T:HttpAgent.FileExistsBehavior" />
            </param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpFileDownloadBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.DownloadFile(System.Uri,System.String,System.Func{HttpAgent.FileTransferProgress,System.Threading.Tasks.Task},HttpAgent.FileExistsBehavior,System.Action{HttpAgent.HttpFileDownloadBuilder})">
            <summary>
                创建 <see cref="T:HttpAgent.HttpFileDownloadBuilder" /> 构建器
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="destinationPath">文件保存的目标路径</param>
            <param name="onProgressChanged">用于传输进度发生变化时执行的委托</param>
            <param name="fileExistsBehavior">
                <see cref="T:HttpAgent.FileExistsBehavior" />
            </param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpFileDownloadBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.DownloadFile(System.String,System.String,System.Func{HttpAgent.FileTransferProgress,System.Threading.Tasks.Task},HttpAgent.FileExistsBehavior,System.Action{HttpAgent.HttpFileDownloadBuilder})">
            <summary>
                创建 <see cref="T:HttpAgent.HttpFileDownloadBuilder" /> 构建器
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="destinationPath">文件保存的目标路径</param>
            <param name="onProgressChanged">用于传输进度发生变化时执行的委托</param>
            <param name="fileExistsBehavior">
                <see cref="T:HttpAgent.FileExistsBehavior" />
            </param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpFileDownloadBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.UploadFile(System.Net.Http.HttpMethod,System.Uri,System.String,System.String,System.Func{HttpAgent.FileTransferProgress,System.Threading.Tasks.Task},System.String,System.Action{HttpAgent.HttpFileUploadBuilder})">
            <summary>
                创建 <see cref="T:HttpAgent.HttpFileUploadBuilder" /> 构建器
            </summary>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址</param>
            <param name="filePath">文件路径</param>
            <param name="name">表单名称；默认值为 <c>file</c>。</param>
            <param name="onProgressChanged">用于传输进度发生变化时执行的委托</param>
            <param name="fileName">文件的名称</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpFileUploadBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.UploadFile(System.Uri,System.String,System.String,System.Func{HttpAgent.FileTransferProgress,System.Threading.Tasks.Task},System.String,System.Action{HttpAgent.HttpFileUploadBuilder})">
            <summary>
                创建 <see cref="T:HttpAgent.HttpFileUploadBuilder" /> 构建器
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="filePath">文件路径</param>
            <param name="name">表单名称；默认值为 <c>file</c>。</param>
            <param name="onProgressChanged">用于传输进度发生变化时执行的委托</param>
            <param name="fileName">文件的名称</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpFileUploadBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.UploadFile(System.String,System.String,System.String,System.Func{HttpAgent.FileTransferProgress,System.Threading.Tasks.Task},System.String,System.Action{HttpAgent.HttpFileUploadBuilder})">
            <summary>
                创建 <see cref="T:HttpAgent.HttpFileUploadBuilder" /> 构建器
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="filePath">文件路径</param>
            <param name="name">表单名称；默认值为 <c>file</c>。</param>
            <param name="onProgressChanged">用于传输进度发生变化时执行的委托</param>
            <param name="fileName">文件的名称</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpFileUploadBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.ServerSentEvents(System.Uri,System.Func{HttpAgent.ServerSentEventsData,System.Threading.Tasks.Task},System.Action{HttpAgent.HttpServerSentEventsBuilder})">
            <summary>
                创建 <see cref="T:HttpAgent.HttpServerSentEventsBuilder" /> 构建器
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="onMessage">用于在从事件源接收到数据时的操作</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpServerSentEventsBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.ServerSentEvents(System.String,System.Func{HttpAgent.ServerSentEventsData,System.Threading.Tasks.Task},System.Action{HttpAgent.HttpServerSentEventsBuilder})">
            <summary>
                创建 <see cref="T:HttpAgent.HttpServerSentEventsBuilder" /> 构建器
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="onMessage">用于在从事件源接收到数据时的操作</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpServerSentEventsBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.StressTestHarness(System.Net.Http.HttpMethod,System.Uri,System.Int32,System.Action{HttpAgent.HttpStressTestHarnessBuilder})">
            <summary>
                创建 <see cref="T:HttpAgent.HttpStressTestHarnessBuilder" /> 构建器
            </summary>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址</param>
            <param name="numberOfRequests">并发请求数量，默认值为：100。</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpStressTestHarnessBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.StressTestHarness(System.Uri,System.Int32,System.Action{HttpAgent.HttpStressTestHarnessBuilder})">
            <summary>
                创建 <see cref="T:HttpAgent.HttpStressTestHarnessBuilder" /> 构建器
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="numberOfRequests">并发请求数量，默认值为：100。</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpStressTestHarnessBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.StressTestHarness(System.String,System.Int32,System.Action{HttpAgent.HttpStressTestHarnessBuilder})">
            <summary>
                创建 <see cref="T:HttpAgent.HttpStressTestHarnessBuilder" /> 构建器
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="numberOfRequests">并发请求数量，默认值为：100。</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpStressTestHarnessBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.LongPolling(System.Net.Http.HttpMethod,System.Uri,System.Func{System.Net.Http.HttpResponseMessage,System.Threading.Tasks.Task},System.Action{HttpAgent.HttpLongPollingBuilder})">
            <summary>
                创建 <see cref="T:HttpAgent.HttpLongPollingBuilder" /> 构建器
            </summary>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址</param>
            <param name="onDataReceived">用于接收服务器返回 <c>200~299</c> 状态码的数据的操作</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpLongPollingBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.LongPolling(System.Uri,System.Func{System.Net.Http.HttpResponseMessage,System.Threading.Tasks.Task},System.Action{HttpAgent.HttpLongPollingBuilder})">
            <summary>
                创建 <see cref="T:HttpAgent.HttpLongPollingBuilder" /> 构建器
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="onDataReceived">用于接收服务器返回 <c>200~299</c> 状态码的数据的操作</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpLongPollingBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.LongPolling(System.String,System.Func{System.Net.Http.HttpResponseMessage,System.Threading.Tasks.Task},System.Action{HttpAgent.HttpLongPollingBuilder})">
            <summary>
                创建 <see cref="T:HttpAgent.HttpLongPollingBuilder" /> 构建器
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="onDataReceived">用于接收服务器返回 <c>200~299</c> 状态码的数据的操作</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpLongPollingBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.Declarative(System.Reflection.MethodInfo,System.Object[])">
            <summary>
                创建 <see cref="T:HttpAgent.HttpDeclarativeBuilder" /> 构建器
            </summary>
            <param name="method">被调用方法</param>
            <param name="args">被调用方法的参数值数组</param>
            <returns>
                <see cref="T:HttpAgent.HttpDeclarativeBuilder" />
            </returns>
        </member>
        <member name="T:HttpAgent.HttpServerSentEventsBuilder">
            <summary>
                HTTP Server-Sent Events 构建器
            </summary>
            <remarks>
                <para>使用 <c>HttpRequestBuilder.ServerSentEvents(requestUri, onMessage)</c> 静态方法创建。</para>
                <para>参考文献：https://developer.mozilla.org/zh-CN/docs/Web/API/Server-sent_events/Using_server-sent_events。</para>
            </remarks>
        </member>
        <member name="M:HttpAgent.HttpServerSentEventsBuilder.#ctor(System.Uri)">
            <summary>
                <inheritdoc cref="T:HttpAgent.HttpServerSentEventsBuilder" />
            </summary>
            <param name="requestUri">请求地址</param>
        </member>
        <member name="P:HttpAgent.HttpServerSentEventsBuilder.RequestUri">
            <summary>
                请求地址
            </summary>
        </member>
        <member name="P:HttpAgent.HttpServerSentEventsBuilder.DefaultRetryInterval">
            <summary>
                默认重新连接的间隔时间（毫秒）
            </summary>
            <remarks>默认值为 2000 毫秒。</remarks>
        </member>
        <member name="P:HttpAgent.HttpServerSentEventsBuilder.MaxRetries">
            <summary>
                最大重试次数
            </summary>
            <remarks>默认最大重试次数为 100。</remarks>
        </member>
        <member name="P:HttpAgent.HttpServerSentEventsBuilder.OnOpen">
            <summary>
                用于在与事件源的连接打开时的操作
            </summary>
        </member>
        <member name="P:HttpAgent.HttpServerSentEventsBuilder.OnMessage">
            <summary>
                用于在从事件源接收到数据时的操作
            </summary>
        </member>
        <member name="P:HttpAgent.HttpServerSentEventsBuilder.OnError">
            <summary>
                用于在事件源连接未能打开时的操作
            </summary>
        </member>
        <member name="P:HttpAgent.HttpServerSentEventsBuilder.ServerSentEventsEventHandlerType">
            <summary>
                实现 <see cref="T:HttpAgent.IHttpServerSentEventsEventHandler" /> 的类型
            </summary>
        </member>
        <member name="M:HttpAgent.HttpServerSentEventsBuilder.SetDefaultRetryInterval(System.Int32)">
            <summary>
                设置默认重新连接的间隔时间
            </summary>
            <param name="retryInterval">默认重新连接的间隔时间</param>
            <returns>
                <see cref="T:HttpAgent.HttpServerSentEventsBuilder" />
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:HttpAgent.HttpServerSentEventsBuilder.SetMaxRetries(System.Int32)">
            <summary>
                设置最大重试次数
            </summary>
            <param name="maxRetries">最大重试次数</param>
            <returns>
                <see cref="T:HttpAgent.HttpServerSentEventsBuilder" />
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:HttpAgent.HttpServerSentEventsBuilder.SetOnOpen(System.Action)">
            <summary>
                设置用于在与事件源的连接打开时的操作
            </summary>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpServerSentEventsBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpServerSentEventsBuilder.SetOnMessage(System.Func{HttpAgent.ServerSentEventsData,System.Threading.Tasks.Task})">
            <summary>
                设置用于在从事件源接收到数据时的操作
            </summary>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpServerSentEventsBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpServerSentEventsBuilder.SetOnError(System.Action{System.Exception})">
            <summary>
                设置用于在事件源连接未能打开时的操作
            </summary>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpServerSentEventsBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpServerSentEventsBuilder.SetEventHandler(System.Type)">
            <summary>
                设置 Server-Sent Events 事件处理程序
            </summary>
            <param name="serverSentEventsEventHandlerType">实现 <see cref="T:HttpAgent.IHttpServerSentEventsEventHandler" /> 接口的类型</param>
            <returns>
                <see cref="T:HttpAgent.HttpServerSentEventsBuilder" />
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:HttpAgent.HttpServerSentEventsBuilder.SetEventHandler``1">
            <summary>
                设置 Server-Sent Events 事件处理程序
            </summary>
            <typeparam name="TServerSentEventsEventHandler">
                <see cref="T:HttpAgent.IHttpServerSentEventsEventHandler" />
            </typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpServerSentEventsBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpServerSentEventsBuilder.Build(HttpAgent.HttpRemoteOptions,System.Action{HttpAgent.HttpRequestBuilder})">
            <summary>
                构建 <see cref="T:HttpAgent.HttpRequestBuilder" /> 实例
            </summary>
            <param name="httpRemoteOptions">
                <see cref="T:HttpAgent.HttpRemoteOptions" />
            </param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="T:HttpAgent.HttpStressTestHarnessBuilder">
            <summary>
                压力测试构建器
            </summary>
            <remarks>使用 <c>HttpRequestBuilder.StressTestHarness(requestUri, numberOfRequests)</c> 静态方法创建。</remarks>
        </member>
        <member name="M:HttpAgent.HttpStressTestHarnessBuilder.#ctor(System.Net.Http.HttpMethod,System.Uri)">
            <summary>
                <inheritdoc cref="T:HttpAgent.HttpStressTestHarnessBuilder" />
            </summary>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址</param>
        </member>
        <member name="P:HttpAgent.HttpStressTestHarnessBuilder.RequestUri">
            <summary>
                请求地址
            </summary>
        </member>
        <member name="P:HttpAgent.HttpStressTestHarnessBuilder.Method">
            <summary>
                请求方式
            </summary>
        </member>
        <member name="P:HttpAgent.HttpStressTestHarnessBuilder.NumberOfRequests">
            <summary>
                并发请求数量
            </summary>
            <remarks>默认值为：100。</remarks>
        </member>
        <member name="P:HttpAgent.HttpStressTestHarnessBuilder.MaxDegreeOfParallelism">
            <summary>
                最大并发度
            </summary>
            <remarks>用于控制系统在同一时间内处理的请求数量。默认值为：100。</remarks>
        </member>
        <member name="P:HttpAgent.HttpStressTestHarnessBuilder.NumberOfRounds">
            <summary>
                压测轮次
            </summary>
            <remarks>默认值为：1。</remarks>
        </member>
        <member name="M:HttpAgent.HttpStressTestHarnessBuilder.SetNumberOfRequests(System.Int32)">
            <summary>
                设置并发请求数量
            </summary>
            <param name="numberOfRequests">并发请求数量</param>
            <returns>
                <see cref="T:HttpAgent.HttpStressTestHarnessBuilder" />
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:HttpAgent.HttpStressTestHarnessBuilder.SetMaxDegreeOfParallelism(System.Int32)">
            <summary>
                设置最大并发度
            </summary>
            <param name="maxDegreeOfParallelism">最大并发度</param>
            <returns>
                <see cref="T:HttpAgent.HttpStressTestHarnessBuilder" />
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:HttpAgent.HttpStressTestHarnessBuilder.SetNumberOfRounds(System.Int32)">
            <summary>
                设置压测轮次
            </summary>
            <param name="numberOfRounds">压测轮次</param>
            <returns>
                <see cref="T:HttpAgent.HttpStressTestHarnessBuilder" />
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:HttpAgent.HttpStressTestHarnessBuilder.Build(HttpAgent.HttpRemoteOptions,System.Action{HttpAgent.HttpRequestBuilder})">
            <summary>
                构建 <see cref="T:HttpAgent.HttpRequestBuilder" /> 实例
            </summary>
            <param name="httpRemoteOptions">
                <see cref="T:HttpAgent.HttpRemoteOptions" />
            </param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="T:HttpAgent.IHttpRemoteBuilder">
            <summary>
                HTTP 远程请求服务构建器
            </summary>
        </member>
        <member name="P:HttpAgent.IHttpRemoteBuilder.Services">
            <summary>
                <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
            </summary>
        </member>
        <member name="M:HttpAgent.IHttpRemoteBuilder.ConfigureOptions(System.Action{HttpAgent.HttpRemoteOptions})">
            <summary>
                配置 <see cref="T:HttpAgent.HttpRemoteOptions" /> 实例
            </summary>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.IHttpRemoteBuilder" />
            </returns>
        </member>
        <member name="T:HttpAgent.DefaultHttpRemoteBuilder">
            <summary>
                <see cref="T:HttpAgent.IHttpRemoteBuilder" /> 默认实现
            </summary>
        </member>
        <member name="M:HttpAgent.DefaultHttpRemoteBuilder.#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
                <inheritdoc cref="T:HttpAgent.DefaultHttpRemoteBuilder" />
            </summary>
            <param name="services">
                <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
            </param>
        </member>
        <member name="P:HttpAgent.DefaultHttpRemoteBuilder.Services">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.DefaultHttpRemoteBuilder.ConfigureOptions(System.Action{HttpAgent.HttpRemoteOptions})">
            <inheritdoc />
        </member>
        <member name="T:HttpAgent.Constants">
            <summary>
                HTTP 远程请求模块常量配置
            </summary>
        </member>
        <member name="F:HttpAgent.Constants.X_TRACE_ID_HEADER">
            <summary>
                请求跟踪标识标头
            </summary>
        </member>
        <member name="F:HttpAgent.Constants.UNKNOWN_USER_AGENT_VERSION">
            <summary>
                未知 <c>User Agent</c> 版本
            </summary>
        </member>
        <member name="F:HttpAgent.Constants.FORM_DATA_DISPOSITION_TYPE">
            <summary>
                内容正文部分的处置类型
            </summary>
        </member>
        <member name="F:HttpAgent.Constants.BASIC_AUTHENTICATION_SCHEME">
            <summary>
                Basic 授权标识
            </summary>
        </member>
        <member name="F:HttpAgent.Constants.JWT_BEARER_AUTHENTICATION_SCHEME">
            <summary>
                JWT (JSON Web Token) 授权标识
            </summary>
        </member>
        <member name="F:HttpAgent.Constants.DIGEST_AUTHENTICATION_SCHEME">
            <summary>
                Digest 授权标识
            </summary>
        </member>
        <member name="F:HttpAgent.Constants.TEXT_PLAIN_MIME_TYPE">
            <summary>
                <c>text/plain</c> 内容类型
            </summary>
        </member>
        <member name="F:HttpAgent.Constants.X_END_OF_STREAM_HEADER">
            <summary>
                响应结束符标头
            </summary>
        </member>
        <member name="F:HttpAgent.Constants.X_ORIGINAL_URL_HEADER">
            <summary>
                请求原始地址标头
            </summary>
        </member>
        <member name="F:HttpAgent.Constants.X_FORWARD_TO_HEADER">
            <summary>
                请求转发目标地址标头
            </summary>
        </member>
        <member name="F:HttpAgent.Constants.X_STRESS_TEST_HEADER">
            <summary>
                压力测试标头
            </summary>
        </member>
        <member name="F:HttpAgent.Constants.X_STRESS_TEST_VALUE">
            <summary>
                压力测试标头值
            </summary>
        </member>
        <member name="F:HttpAgent.Constants.DISABLED_PROFILER_KEY">
            <summary>
                禁用请求分析工具键
            </summary>
            <remarks>被用于从 <see cref="T:System.Net.Http.HttpRequestMessage" /> 的 <c>Options</c> 属性中读取。</remarks>
        </member>
        <member name="F:HttpAgent.Constants.DECLARATIVE_METHOD_KEY">
            <summary>
                HTTP 声明式请求方法签名键
            </summary>
            <remarks>被用于从 <see cref="T:System.Net.Http.HttpRequestMessage" /> 的 <c>Options</c> 属性中读取。</remarks>
        </member>
        <member name="F:HttpAgent.Constants.USER_AGENT_OF_BROWSER">
            <summary>
                浏览器的 <c>User-Agent</c> 标头值
            </summary>
        </member>
        <member name="F:HttpAgent.Constants.USER_AGENT_OF_MOBILE_BROWSER">
            <summary>
                移动端浏览器的 <c>User-Agent</c> 标头值
            </summary>
        </member>
        <member name="T:HttpAgent.FileExistsBehavior">
            <summary>
                指定当目标文件已存在时的行为
            </summary>
        </member>
        <member name="F:HttpAgent.FileExistsBehavior.CreateNew">
            <summary>
                创建新文件
            </summary>
            <remarks>如果文件已存在则抛出异常。</remarks>
        </member>
        <member name="F:HttpAgent.FileExistsBehavior.Overwrite">
            <summary>
                覆盖现有文件
            </summary>
        </member>
        <member name="F:HttpAgent.FileExistsBehavior.Skip">
            <summary>
                保留现有文件
            </summary>
            <remarks>不进行任何操作。</remarks>
        </member>
        <member name="T:HttpAgent.FileSourceType">
            <summary>
                指定多部分表单内容文件的来源类型
            </summary>
        </member>
        <member name="F:HttpAgent.FileSourceType.None">
            <summary>
                缺省值
            </summary>
            <remarks>不用作为文件的来源。</remarks>
        </member>
        <member name="F:HttpAgent.FileSourceType.Path">
            <summary>
                本地文件路径
            </summary>
        </member>
        <member name="F:HttpAgent.FileSourceType.Base64String">
            <summary>
                Base64 字符串文件
            </summary>
        </member>
        <member name="F:HttpAgent.FileSourceType.Remote">
            <summary>
                互联网文件地址
            </summary>
        </member>
        <member name="F:HttpAgent.FileSourceType.Stream">
            <summary>
                <see cref="F:HttpAgent.FileSourceType.Stream" />
            </summary>
        </member>
        <member name="F:HttpAgent.FileSourceType.ByteArray">
            <summary>
                字节数组
            </summary>
        </member>
        <member name="T:HttpAgent.ByteArrayContentConverter">
            <summary>
                字节数组内容转换器
            </summary>
        </member>
        <member name="M:HttpAgent.ByteArrayContentConverter.Read(System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.ByteArrayContentConverter.ReadAsync(System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:HttpAgent.HttpContentConverterBase`1">
            <summary>
                <see cref="T:HttpAgent.IHttpContentConverter`1" /> 内容处理器基类
            </summary>
            <typeparam name="TResult">转换的目标类型</typeparam>
        </member>
        <member name="P:HttpAgent.HttpContentConverterBase`1.ServiceProvider">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpContentConverterBase`1.Read(System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpContentConverterBase`1.ReadAsync(System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpContentConverterBase`1.Read(System.Type,System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpContentConverterBase`1.ReadAsync(System.Type,System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:HttpAgent.HttpResponseMessageConverter">
            <summary>
                <see cref="T:System.Net.Http.HttpResponseMessage" /> 内容转换器
            </summary>
        </member>
        <member name="M:HttpAgent.HttpResponseMessageConverter.Read(System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpResponseMessageConverter.ReadAsync(System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:HttpAgent.IHttpContentConverter">
            <summary>
                <see cref="T:System.Net.Http.HttpResponseMessage" /> 响应内容转换器默认实现接口
            </summary>
        </member>
        <member name="P:HttpAgent.IHttpContentConverter.ServiceProvider">
            <summary>
                <inheritdoc cref="T:System.IServiceProvider" />
            </summary>
        </member>
        <member name="M:HttpAgent.IHttpContentConverter.Read(System.Type,System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)">
            <summary>
                从 <see cref="T:System.Net.Http.HttpResponseMessage" /> 中同步读取数据并转换为 <see cref="T:System.Object" /> 实例
            </summary>
            <param name="resultType">转换的目标类型</param>
            <param name="httpResponseMessage">
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Object" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpContentConverter.ReadAsync(System.Type,System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)">
            <summary>
                从 <see cref="T:System.Net.Http.HttpResponseMessage" /> 中异步读取数据并转换为 <see cref="T:System.Object" /> 实例
            </summary>
            <param name="resultType">转换的目标类型</param>
            <param name="httpResponseMessage">
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Object" />
            </returns>
        </member>
        <member name="T:HttpAgent.IHttpContentConverter`1">
            <summary>
                <see cref="T:System.Net.Http.HttpResponseMessage" /> 响应内容转换器
            </summary>
            <typeparam name="TResult">转换的目标类型</typeparam>
        </member>
        <member name="M:HttpAgent.IHttpContentConverter`1.Read(System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)">
            <summary>
                从 <see cref="T:System.Net.Http.HttpResponseMessage" /> 中同步读取数据并转换为目标类型
            </summary>
            <param name="httpResponseMessage">
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <typeparamref name="TResult" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpContentConverter`1.ReadAsync(System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)">
            <summary>
                从 <see cref="T:System.Net.Http.HttpResponseMessage" /> 中异步读取数据并转换为目标类型
            </summary>
            <param name="httpResponseMessage">
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <typeparamref name="TResult" />
            </returns>
        </member>
        <member name="T:HttpAgent.ObjectContentConverter">
            <summary>
                <see cref="T:HttpAgent.ObjectContentConverter`1" /> 默认基类
            </summary>
        </member>
        <member name="P:HttpAgent.ObjectContentConverter.ServiceProvider">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.ObjectContentConverter.Read(System.Type,System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.ObjectContentConverter.ReadAsync(System.Type,System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:HttpAgent.ObjectContentConverter`1">
            <summary>
                对象转换器
            </summary>
            <typeparam name="TResult">转换的目标类型</typeparam>
        </member>
        <member name="M:HttpAgent.ObjectContentConverter`1.Read(System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.ObjectContentConverter`1.ReadAsync(System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:HttpAgent.StreamContentConverter">
            <summary>
                流内容转换器
            </summary>
        </member>
        <member name="M:HttpAgent.StreamContentConverter.Read(System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.StreamContentConverter.ReadAsync(System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:HttpAgent.StringContentConverter">
            <summary>
                字符串内容转换器
            </summary>
        </member>
        <member name="M:HttpAgent.StringContentConverter.Read(System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.StringContentConverter.ReadAsync(System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:HttpAgent.VoidContentConverter">
            <summary>
                <see cref="T:HttpAgent.VoidContent" /> 内容转换器
            </summary>
        </member>
        <member name="M:HttpAgent.VoidContentConverter.Read(System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.VoidContentConverter.ReadAsync(System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:HttpAgent.Core.Extensions.AssemblyExtensions">
            <summary>
                <see cref="T:System.Reflection.Assembly" /> 拓展类
            </summary>
        </member>
        <member name="M:HttpAgent.Core.Extensions.AssemblyExtensions.GetVersion(System.Reflection.Assembly)">
            <summary>
                获取程序集版本
            </summary>
            <param name="assembly">
                <see cref="T:System.Reflection.Assembly" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:HttpAgent.Core.Extensions.AssemblyExtensions.ConvertTo``1(System.Reflection.Assembly,System.Func{System.Reflection.Assembly,``0})">
            <summary>
                将程序集转换成指定类型返回
            </summary>
            <param name="assembly">
                <see cref="T:System.Reflection.Assembly" />
            </param>
            <param name="configure">自定义配置委托</param>
            <typeparam name="TResult">结果类型</typeparam>
            <returns>
                <typeparamref name="TResult" />
            </returns>
        </member>
        <member name="T:HttpAgent.Core.Extensions.DelegateExtensions">
            <summary>
                委托拓展类
            </summary>
        </member>
        <member name="M:HttpAgent.Core.Extensions.DelegateExtensions.TryInvokeAsync``2(System.Func{``0,``1,System.Threading.Tasks.Task},``0,``1)">
            <summary>
                尝试执行异步委托
            </summary>
            <param name="func">异步委托</param>
            <param name="parameter1">参数 1</param>
            <param name="parameter2">参数 2</param>
            <typeparam name="T1">参数类型</typeparam>
            <typeparam name="T2">参数类型</typeparam>
        </member>
        <member name="M:HttpAgent.Core.Extensions.DelegateExtensions.TryInvokeAsync``1(System.Func{``0,System.Threading.Tasks.Task},``0)">
            <summary>
                尝试执行异步委托
            </summary>
            <param name="func">异步委托</param>
            <param name="parameter">参数</param>
            <typeparam name="T">参数类型</typeparam>
        </member>
        <member name="M:HttpAgent.Core.Extensions.DelegateExtensions.TryInvoke``2(System.Action{``0,``1},``0,``1)">
            <summary>
                尝试执行同步委托
            </summary>
            <param name="action">同步委托</param>
            <param name="parameter1">参数 1</param>
            <param name="parameter2">参数 2</param>
            <typeparam name="T1">参数类型</typeparam>
            <typeparam name="T2">参数类型</typeparam>
        </member>
        <member name="M:HttpAgent.Core.Extensions.DelegateExtensions.TryInvoke``1(System.Action{``0},``0)">
            <summary>
                尝试执行同步委托
            </summary>
            <param name="action">同步委托</param>
            <param name="parameter">参数</param>
            <typeparam name="T">参数类型</typeparam>
        </member>
        <member name="M:HttpAgent.Core.Extensions.DelegateExtensions.TryInvoke(System.Action)">
            <summary>
                尝试执行同步委托
            </summary>
            <param name="action">同步委托</param>
        </member>
        <member name="T:HttpAgent.Core.Extensions.EventHandlerExtensions">
            <summary>
                <see cref="T:System.EventHandler`1" /> 拓展类
            </summary>
        </member>
        <member name="M:HttpAgent.Core.Extensions.EventHandlerExtensions.TryInvoke``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
                尝试执行事件处理程序
            </summary>
            <param name="handler">
                <see cref="T:System.EventHandler`1" />
            </param>
            <param name="sender">
                <see cref="T:System.Object" />
            </param>
            <param name="args">
                <typeparamref name="TEventArgs" />
            </param>
            <typeparam name="TEventArgs">事件参数</typeparam>
        </member>
        <member name="T:HttpAgent.Core.Extensions.ICollectionExtensions">
            <summary>
                <see cref="T:System.Collections.Generic.ICollection`1" /> 拓展类
            </summary>
        </member>
        <member name="M:HttpAgent.Core.Extensions.ICollectionExtensions.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
                判断集合是否为空
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="collection">
                <see cref="T:System.Collections.Generic.ICollection`1" />
            </param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="T:HttpAgent.Core.Extensions.IDictionaryExtensions">
            <summary>
                <see cref="T:System.Collections.Generic.IDictionary`2" /> 拓展类
            </summary>
        </member>
        <member name="M:HttpAgent.Core.Extensions.IDictionaryExtensions.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
                添加或更新
            </summary>
            <typeparam name="TKey">字典键类型</typeparam>
            <typeparam name="TValue">字典值类型</typeparam>
            <param name="dictionary">
                <see cref="T:System.Collections.Generic.IDictionary`2" />
            </param>
            <param name="key">
                <typeparamref name="TKey" />
            </param>
            <param name="value">
                <typeparamref name="TValue" />
            </param>
        </member>
        <member name="M:HttpAgent.Core.Extensions.IDictionaryExtensions.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,System.Collections.Generic.List{``1}},System.Collections.Generic.IDictionary{``0,``1},System.Boolean,System.Boolean)">
            <summary>
                添加或更新
            </summary>
            <typeparam name="TKey">字典键类型</typeparam>
            <typeparam name="TValue">字典值类型</typeparam>
            <param name="dictionary">
                <see cref="T:System.Collections.Generic.IDictionary`2" />
            </param>
            <param name="concatDictionary">
                <see cref="T:System.Collections.Generic.IDictionary`2" />
            </param>
            <param name="allowDuplicates">是否允许重复添加。默认值为：<c>true</c>。</param>
            <param name="replace">是否值已存在时则采用替换的方式，否则采用追加方式。默认值为 <c>false</c>。</param>
        </member>
        <member name="M:HttpAgent.Core.Extensions.IDictionaryExtensions.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
                添加或更新
            </summary>
            <typeparam name="TKey">字典键类型</typeparam>
            <typeparam name="TValue">字典值类型</typeparam>
            <param name="dictionary">
                <see cref="T:System.Collections.Generic.IDictionary`2" />
            </param>
            <param name="concatDictionary">
                <see cref="T:System.Collections.Generic.IDictionary`2" />
            </param>
        </member>
        <member name="M:HttpAgent.Core.Extensions.IDictionaryExtensions.TryAdd``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
                尝试添加
            </summary>
            <typeparam name="TKey">字典键类型</typeparam>
            <typeparam name="TValue">字典值类型</typeparam>
            <param name="dictionary">
                <see cref="T:System.Collections.Generic.IDictionary`2" />
            </param>
            <param name="concatDictionary">
                <see cref="T:System.Collections.Generic.IDictionary`2" />
            </param>
        </member>
        <member name="M:HttpAgent.Core.Extensions.IDictionaryExtensions.TryAdd``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IEnumerable{``1},System.Func{``1,``0})">
            <summary>
                尝试添加
            </summary>
            <remarks>其中键是由值通过给定的选择器函数生成的。</remarks>
            <param name="dictionary">
                <see cref="T:System.Collections.Generic.IDictionary`2" />
            </param>
            <param name="values">
                <see cref="T:System.Collections.Generic.IEnumerable`1" />
            </param>
            <param name="keySelector">键选择器</param>
            <typeparam name="TKey">字典键类型</typeparam>
            <typeparam name="TValue">字典值类型</typeparam>
        </member>
        <member name="T:HttpAgent.Core.Extensions.IEnumerableExtensions">
            <summary>
                <see cref="T:System.Collections.IEnumerable" /> 拓展类
            </summary>
        </member>
        <member name="M:HttpAgent.Core.Extensions.IEnumerableExtensions.OfType(System.Collections.IEnumerable,System.Type)">
            <summary>
                根据指定类型筛选 <see cref="T:System.Collections.IEnumerable" /> 的元素
            </summary>
            <param name="source">
                <see cref="T:System.Collections.IEnumerable" />
            </param>
            <param name="resultType">筛选的结果类型</param>
            <returns>
                <see cref="T:System.Collections.IEnumerable" />
            </returns>
        </member>
        <member name="M:HttpAgent.Core.Extensions.IEnumerableExtensions.ConcatIgnoreNull``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                合并两个集合
            </summary>
            <param name="first">
                <see cref="T:System.Collections.Generic.IEnumerable`1" />
            </param>
            <param name="second">
                <see cref="T:System.Collections.Generic.IEnumerable`1" />
            </param>
            <typeparam name="TSource">集合元素的类型</typeparam>
            <returns>
                <see cref="T:System.Collections.Generic.IEnumerable`1" />
            </returns>
        </member>
        <member name="T:HttpAgent.Core.Extensions.LinqExpressionExtensions">
            <summary>
                <see cref="T:System.Linq.Expressions.Expression" /> 拓展类
            </summary>
        </member>
        <member name="M:HttpAgent.Core.Extensions.LinqExpressionExtensions.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Func{``0,System.Boolean})">
            <summary>
                根据条件成立构建 <c>Where</c> 表达式
            </summary>
            <param name="source">
                <see cref="T:System.Collections.Generic.IEnumerable`1" />
            </param>
            <param name="condition">条件</param>
            <param name="predicate"><c>Where</c> 表达式</param>
            <typeparam name="TSource">集合元素类型</typeparam>
            <returns>
                <see cref="T:System.Collections.Generic.IEnumerable`1" />
            </returns>
        </member>
        <member name="T:HttpAgent.Core.Extensions.MethodInfoExtensions">
            <summary>
                <see cref="T:System.Reflection.MethodInfo" /> 拓展类
            </summary>
        </member>
        <member name="M:HttpAgent.Core.Extensions.MethodInfoExtensions.IsDefined``1(System.Reflection.MethodInfo,``0@,System.Boolean)">
            <summary>
                检查是否定义了指定特性
            </summary>
            <param name="method">
                <see cref="T:System.Reflection.MethodInfo" />
            </param>
            <param name="attribute">
                <typeparamref name="TAttribute" />
            </param>
            <param name="inherit">是否在基类中搜索</param>
            <typeparam name="TAttribute">
                <see cref="T:System.Attribute" />
            </typeparam>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:HttpAgent.Core.Extensions.MethodInfoExtensions.GetDefinedCustomAttributes``1(System.Reflection.MethodInfo,System.Boolean,System.Boolean)">
            <summary>
                获取指定特性的所有实例
            </summary>
            <param name="method">
                <see cref="T:System.Reflection.MethodInfo" />
            </param>
            <param name="inherit">是否在基类中搜索</param>
            <param name="methodScanFirst">是否优先查找 <see cref="T:System.Reflection.MethodInfo" /> 的特性。默认值为：<c>true</c>。</param>
            <typeparam name="TAttribute">
                <see cref="T:System.Attribute" />
            </typeparam>
            <returns>
                <typeparamref name="TAttribute" /><c>[]</c>
            </returns>
        </member>
        <member name="M:HttpAgent.Core.Extensions.MethodInfoExtensions.ToFriendlyString(System.Reflection.MethodInfo)">
            <summary>
                输出方法签名的友好字符串
            </summary>
            <param name="method">
                <see cref="T:System.Reflection.MethodInfo" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="T:HttpAgent.Core.Extensions.NumberExtensions">
            <summary>
                数值类型拓展类
            </summary>
        </member>
        <member name="M:HttpAgent.Core.Extensions.NumberExtensions.ToSizeUnits(System.Double,System.String)">
            <summary>
                根据指定的单位将字节数进行转换
            </summary>
            <param name="byteSize">字节数</param>
            <param name="unit">单位。可选值为：<c>B</c>, <c>KB</c>, <c>MB</c>, <c>GB</c>, <c>TB</c>, <c>PB</c>, <c>EB</c>。</param>
            <returns>
                <see cref="T:System.Double" />
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:HttpAgent.Core.Extensions.NumberExtensions.ToSizeUnits(System.Int64,System.String)">
            <summary>
                根据指定的单位将字节数进行转换
            </summary>
            <param name="byteSize">字节数</param>
            <param name="unit">单位。可选值为：<c>B</c>, <c>KB</c>, <c>MB</c>, <c>GB</c>, <c>TB</c>, <c>PB</c>, <c>EB</c>。</param>
            <returns>
                <see cref="T:System.Double" />
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="T:HttpAgent.Core.Extensions.ObjectExtensions">
            <summary>
                <see cref="T:System.Object" /> 拓展类
            </summary>
        </member>
        <member name="M:HttpAgent.Core.Extensions.ObjectExtensions.ToCultureString(System.Object,System.Globalization.CultureInfo,System.Boolean,System.String)">
            <summary>
                将对象转换为基于特定文化的字符串表示形式
            </summary>
            <param name="obj">
                <see cref="T:System.Object" />
            </param>
            <param name="culture">
                <see cref="T:System.Globalization.CultureInfo" />
            </param>
            <param name="enumAsString">指示是否将枚举类型的值作为名称输出，默认值为：<c>true</c>。若为 <c>false</c>，则输出枚举的值</param>
            <param name="separator">集合类型分隔符</param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:HttpAgent.Core.Extensions.ObjectExtensions.TryGetCount(System.Object,System.Int32@)">
            <summary>
                尝试获取对象的数量
            </summary>
            <param name="obj">
                <see cref="T:System.Object" />
            </param>
            <param name="count">数量</param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:HttpAgent.Core.Extensions.ObjectExtensions.ObjectToDictionary(System.Object)">
            <summary>
                将对象转换为 <see cref="T:System.Collections.Generic.IDictionary`2" /> 类型对象
            </summary>
            <param name="obj">
                <see cref="T:System.Object" />
            </param>
            <returns>
                <see cref="T:System.Collections.Generic.IDictionary`2" />
            </returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:HttpAgent.Core.Extensions.ObjectExtensions.GetPropertyValueFromPath(System.Object,System.String,System.Boolean@,System.String,System.Reflection.BindingFlags)">
            <summary>
                根据模板路径从对象中获取属性值
            </summary>
            <param name="obj">
                <see cref="T:System.Object" />
            </param>
            <param name="path">模板路径。支持 <c>{Key}</c> 或 <c>{Key.Property}</c> 或 {Key.Property.NestProperty} 语法格式。</param>
            <param name="prefix">模板字符串前缀；默认值为：<c>model</c>。</param>
            <param name="isMatch">用于检查是否以 <c>prefix.</c> 开头</param>
            <param name="bindingFlags">
                <see cref="T:System.Reflection.BindingFlags" />
            </param>
            <returns>
                <see cref="T:System.Object" />
            </returns>
        </member>
        <member name="T:HttpAgent.Core.Extensions.StringExtensions">
            <summary>
                <see cref="T:System.String" /> 拓展类
            </summary>
        </member>
        <member name="M:HttpAgent.Core.Extensions.StringExtensions.AddQuotes(System.String)">
            <summary>
                为字符串前后添加双引号
            </summary>
            <param name="input">
                <see cref="T:System.String" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:HttpAgent.Core.Extensions.StringExtensions.ToLowerFirstLetter(System.String)">
            <summary>
                将字符串首字母转换为小写
            </summary>
            <param name="input">
                <see cref="T:System.String" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:HttpAgent.Core.Extensions.StringExtensions.EscapeDataString(System.String,System.Boolean)">
            <summary>
                将字符串进行转义
            </summary>
            <param name="input">
                <see cref="T:System.String" />
            </param>
            <param name="escape">是否转义字符串</param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:HttpAgent.Core.Extensions.StringExtensions.IsIn(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.IEqualityComparer)">
            <summary>
                检查字符串是否存在于给定的集合中
            </summary>
            <param name="input">
                <see cref="T:System.String" />
            </param>
            <param name="collection">
                <see cref="T:System.Collections.Generic.IEnumerable`1" />
            </param>
            <param name="comparer">
                <see cref="T:System.Collections.IEqualityComparer" />
            </param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:HttpAgent.Core.Extensions.StringExtensions.ParseFormatKeyValueString(System.String,System.Char[],System.Nullable{System.Char})">
            <summary>
                解析符合键值对格式的字符串为键值对列表
            </summary>
            <param name="keyValueString">键值对格式的字符串</param>
            <param name="separators">分隔符字符数组</param>
            <param name="trimChar">要删除的前导字符</param>
            <returns>
                <see cref="T:System.Collections.Generic.List`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.Core.Extensions.StringExtensions.PadStringToByteLength(System.String,System.Int32)">
            <summary>
                基于 GBK 编码将字符串右填充至指定的字节数
            </summary>
            <remarks>调用之前需确保上下文存在 <c>Encoding.RegisterProvider(CodePagesEncodingProvider.Instance);</c> 代码。</remarks>
            <param name="output">字符串</param>
            <param name="totalByteCount">目标字节数</param>
            <returns>
                <see cref="T:System.String" />
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:HttpAgent.Core.Extensions.StringExtensions.ReplacePlaceholders(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
                替换字符串中的占位符为实际值
            </summary>
            <param name="template">包含占位符的模板字符串</param>
            <param name="replacementSource">
                <see cref="T:System.Collections.Generic.IDictionary`2" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:HttpAgent.Core.Extensions.StringExtensions.ReplacePlaceholders(System.String,System.Object,System.String,System.Reflection.BindingFlags)">
            <summary>
                替换字符串中的占位符为实际值
            </summary>
            <param name="template">包含占位符的模板字符串</param>
            <param name="replacementSource">
                <see cref="T:System.Object" />
            </param>
            <param name="prefix">模板字符串前缀；默认值为：<c>model</c>。</param>
            <param name="bindingFlags">
                <see cref="T:System.Reflection.BindingFlags" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:HttpAgent.Core.Extensions.StringExtensions.ReplacePlaceholders(System.String,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
                替换字符串中的占位符为实际值
            </summary>
            <param name="template">包含占位符的模板字符串</param>
            <param name="replacementSource">
                <see cref="T:Microsoft.Extensions.Configuration.IConfiguration" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:HttpAgent.Core.Extensions.StringExtensions.PlaceholderRegex">
            <remarks>
            Pattern:<br/>
            <code>\\{\\s*(\\w+\\s*(\\.\\s*\\w+\\s*)*)\\s*\\}</code><br/>
            Explanation:<br/>
            <code>
            ○ Match '{'.<br/>
            ○ Match a whitespace character atomically any number of times.<br/>
            ○ 1st capture group.<br/>
                ○ Match a word character greedily at least once.<br/>
                ○ Match a whitespace character greedily any number of times.<br/>
                ○ Loop greedily any number of times.<br/>
                    ○ 2nd capture group.<br/>
                        ○ Match '.'.<br/>
                        ○ Match a whitespace character atomically any number of times.<br/>
                        ○ Match a word character greedily at least once.<br/>
                        ○ Match a whitespace character greedily any number of times.<br/>
            ○ Match a whitespace character atomically any number of times.<br/>
            ○ Match '}'.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:HttpAgent.Core.Extensions.StringExtensions.ConfigurationKeyRegex">
            <remarks>
            Pattern:<br/>
            <code>\\[\\[\\s*([\\w\\-:]+)((?:\\s*\\|\\s*[\\w\\-:]+)*)\\s*(?:\\|\\|\\s*([^\\]]*))?\\s*\\]\\]</code><br/>
            Explanation:<br/>
            <code>
            ○ Match the string "[[".<br/>
            ○ Match a whitespace character greedily any number of times.<br/>
            ○ 1st capture group.<br/>
                ○ Match a character in the set [-:\w] greedily at least once.<br/>
            ○ 2nd capture group.<br/>
                ○ Loop greedily any number of times.<br/>
                    ○ Match a whitespace character atomically any number of times.<br/>
                    ○ Match '|'.<br/>
                    ○ Match a whitespace character greedily any number of times.<br/>
                    ○ Match a character in the set [-:\w] greedily at least once.<br/>
            ○ Match a whitespace character greedily any number of times.<br/>
            ○ Optional (greedy).<br/>
                ○ Match the string "||".<br/>
                ○ Match a whitespace character greedily any number of times.<br/>
                ○ 3rd capture group.<br/>
                    ○ Match a character other than ']' greedily any number of times.<br/>
            ○ Match a whitespace character atomically any number of times.<br/>
            ○ Match the string "]]".<br/>
            </code>
            </remarks>
        </member>
        <member name="T:HttpAgent.Core.Extensions.TypeExtensions">
            <summary>
                <see cref="T:System.Type" /> 拓展类
            </summary>
        </member>
        <member name="M:HttpAgent.Core.Extensions.TypeExtensions.IsArrayOrCollection(System.Type,System.Type@)">
            <summary>
                检查类型是否是数组或集合类型
            </summary>
            <param name="type">
                <see cref="T:System.Type" />
            </param>
            <param name="underlyingType">元素类型</param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:HttpAgent.Core.Extensions.TypeExtensions.IsBasicType(System.Type)">
            <summary>
                检查类型是否是基本类型
            </summary>
            <param name="type">
                <see cref="T:System.Type" />
            </param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:HttpAgent.Core.Extensions.TypeExtensions.IsBaseTypeOrEnumOrCollection(System.Type)">
            <summary>
                检查类型是否是基本类型或枚举类型或由它们组成的数组或集合类型
            </summary>
            <param name="type">
                <see cref="T:System.Type" />
            </param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:HttpAgent.Core.Extensions.TypeExtensions.IsStatic(System.Type)">
            <summary>
                检查类型是否是静态类型
            </summary>
            <param name="type">
                <see cref="T:System.Type" />
            </param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:HttpAgent.Core.Extensions.TypeExtensions.IsInstantiable(System.Type)">
            <summary>
                检查类型是否可实例化
            </summary>
            <param name="type">
                <see cref="T:System.Type" />
            </param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:HttpAgent.Core.Extensions.TypeExtensions.HasDefinePublicParameterlessConstructor(System.Type)">
            <summary>
                检查类型是否定义了公开无参构造函数
            </summary>
            <remarks>用于 <see cref="M:System.Activator.CreateInstance(System.Type)" /> 实例化</remarks>
            <param name="type">
                <see cref="T:System.Type" />
            </param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:HttpAgent.Core.Extensions.TypeExtensions.IsDefinitionEqual(System.Type,System.Type)">
            <summary>
                检查类型和指定类型定义是否相等
            </summary>
            <param name="type">
                <see cref="T:System.Type" />
            </param>
            <param name="compareType">
                <see cref="T:System.Type" />
            </param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:HttpAgent.Core.Extensions.TypeExtensions.IsDefinitionEquals(System.Type,System.Type)">
            <summary>
                检查类型和指定类型定义是否相等
            </summary>
            <remarks>将查找所有派生的基类和实现的接口。</remarks>
            <param name="type">
                <see cref="T:System.Type" />
            </param>
            <param name="compareType">
                <see cref="T:System.Type" />
            </param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:HttpAgent.Core.Extensions.TypeExtensions.IsKeyValuePair(System.Type)">
            <summary>
                检查类型是否是 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 类型
            </summary>
            <param name="type">
                <see cref="T:System.Type" />
            </param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:HttpAgent.Core.Extensions.TypeExtensions.IsKeyValueCollection(System.Type,System.Boolean@)">
            <summary>
                检查类型是否是键值对集合类型
            </summary>
            <param name="type">
                <see cref="T:System.Type" />
            </param>
            <param name="isKeyValuePairCollection">是否是 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 集合类型</param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:HttpAgent.Core.Extensions.TypeExtensions.GetKeyValuePairOrJPropertyGetters(System.Type)">
            <summary>
                获取 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 或 <c>Newtonsoft.Json.Linq.JProperty</c> 类型键值属性值访问器
            </summary>
            <param name="keyValuePairType">
                <see cref="T:System.Type" />
            </param>
            <returns>
                <see cref="T:System.Tuple`2" />
            </returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:HttpAgent.Core.Extensions.TypeExtensions.CreatePropertySetter(System.Type,System.Reflection.PropertyInfo)">
            <summary>
                创建实例属性值设置器
            </summary>
            <param name="type">
                <see cref="T:System.Type" />
            </param>
            <remarks>不支持 <c>struct</c> 类型设置属性值。</remarks>
            <param name="propertyInfo">
                <see cref="T:System.Reflection.PropertyInfo" />
            </param>
            <returns>
                <see cref="T:System.Action`2" />
            </returns>
        </member>
        <member name="M:HttpAgent.Core.Extensions.TypeExtensions.CreatePropertyGetter(System.Type,System.Reflection.PropertyInfo)">
            <summary>
                创建实例属性值访问器
            </summary>
            <param name="type">
                <see cref="T:System.Type" />
            </param>
            <param name="propertyInfo">
                <see cref="T:System.Reflection.PropertyInfo" />
            </param>
            <returns>
                <see cref="T:System.Func`2" />
            </returns>
        </member>
        <member name="M:HttpAgent.Core.Extensions.TypeExtensions.ToFriendlyString(System.Type)">
            <summary>
                输出类型的友好字符串
            </summary>
            <param name="type">
                <see cref="T:System.Type" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="T:HttpAgent.Core.Utilities.AliasAsUtility">
            <summary>
                提供别名获取实用方法
            </summary>
        </member>
        <member name="M:HttpAgent.Core.Utilities.AliasAsUtility.GetPropertyName(System.Reflection.PropertyInfo,System.Boolean@)">
            <summary>
                获取属性名
            </summary>
            <param name="property">
                <see cref="T:System.Reflection.PropertyInfo" />
            </param>
            <param name="isDefined">是否定义特性</param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:HttpAgent.Core.Utilities.AliasAsUtility.GetParameterName(System.Reflection.ParameterInfo,System.Boolean@)">
            <summary>
                获取参数名
            </summary>
            <param name="parameter">
                <see cref="T:System.Reflection.ParameterInfo" />
            </param>
            <param name="isDefined">是否定义特性</param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="T:HttpAgent.Core.Utilities.FileUtility">
            <summary>
                提供文件实用方法
            </summary>
        </member>
        <member name="M:HttpAgent.Core.Utilities.FileUtility.TryValidateExtension(System.String,System.String,System.Collections.Generic.HashSet{System.String}@)">
            <summary>
                尝试验证文件拓展名
            </summary>
            <remarks>特别说明：不支持拓展名中包含通配符，如 <c>*</c>。</remarks>
            <param name="fileName">文件的名称</param>
            <param name="allowedFileExtensions">允许的文件扩展名字符串，用分号分隔</param>
            <param name="validFileExtensions">有效的文件拓展名集合</param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:HttpAgent.Core.Utilities.FileUtility.TryValidateExtension(System.String,System.String[],System.Collections.Generic.HashSet{System.String}@)">
            <summary>
                尝试验证文件拓展名
            </summary>
            <remarks>特别说明：不支持拓展名中包含通配符，如 <c>*</c>。</remarks>
            <param name="fileName">文件的名称</param>
            <param name="allowedFileExtensions">允许的文件拓展名数组</param>
            <param name="validFileExtensions">有效的文件拓展名集合</param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:HttpAgent.Core.Utilities.FileUtility.ValidateExtension(System.String,System.String)">
            <summary>
                验证文件拓展名
            </summary>
            <remarks>特别说明：不支持拓展名中包含通配符，如 <c>*</c>。</remarks>
            <param name="fileName">文件的名称</param>
            <param name="allowedFileExtensions">允许的文件扩展名字符串，用分号分隔</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:HttpAgent.Core.Utilities.FileUtility.ValidateExtension(System.String,System.String[])">
            <summary>
                验证文件拓展名
            </summary>
            <remarks>特别说明：不支持拓展名中包含通配符，如 <c>*</c>。</remarks>
            <param name="fileName">文件的名称</param>
            <param name="allowedFileExtensions">允许的文件拓展名数组</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:HttpAgent.Core.Utilities.FileUtility.TryValidateSize(System.String,System.Int64)">
            <summary>
                尝试验证文件大小
            </summary>
            <param name="filePath">文件路径</param>
            <param name="maxFileSizeInBytes">允许的文件大小。以字节为单位。</param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:HttpAgent.Core.Utilities.FileUtility.ValidateSize(System.String,System.Int64)">
            <summary>
                验证文件大小
            </summary>
            <param name="filePath">文件路径</param>
            <param name="maxFileSizeInBytes">允许的文件大小。以字节为单位。</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:HttpAgent.Core.Utilities.FileUtility.GetValidFileExtensions(System.String[])">
            <summary>
                获取有效的文件拓展名集合
            </summary>
            <param name="allowedFileExtensions">允许的文件拓展名数组</param>
            <returns>
                <see cref="T:System.Collections.Generic.HashSet`1" />
            </returns>
        </member>
        <member name="T:HttpAgent.Core.Utilities.JsonUtility">
            <summary>
                提供 JSON 实用方法
            </summary>
        </member>
        <member name="M:HttpAgent.Core.Utilities.JsonUtility.Parse(System.String)">
            <summary>
                解析 JSON 字符串
            </summary>
            <param name="jsonString">JSON 字符串</param>
            <returns>
                <see cref="T:System.Text.Json.JsonDocument" />
            </returns>
            <exception cref="T:System.Text.Json.JsonException"></exception>
        </member>
        <member name="M:HttpAgent.Core.Utilities.JsonUtility.TryParse(System.String,System.Text.Json.JsonDocument@)">
            <summary>
                尝试解析 JSON 字符串
            </summary>
            <param name="jsonString">JSON 字符串</param>
            <param name="jsonDocument">
                <see cref="T:System.Text.Json.JsonDocument" />
            </param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:HttpAgent.Core.Utilities.JsonUtility.IsObjectOrArrayOrNull(System.Text.Json.JsonDocument)">
            <summary>
                检查 <see cref="T:System.Text.Json.JsonDocument" /> 的 <c>ValueKind</c> 属性值是否是 <c>Object</c>、<c>Array</c> 或 <c>Null</c>
            </summary>
            <param name="jsonDocument">
                <see cref="T:System.Text.Json.JsonDocument" />
            </param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="T:HttpAgent.Core.Utilities.NetworkUtility">
            <summary>
                提供网络相关的实用方法
            </summary>
        </member>
        <member name="M:HttpAgent.Core.Utilities.NetworkUtility.FindAvailableTcpPort">
            <summary>
                查找一个可用的 TCP 端口
            </summary>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:HttpAgent.Core.Utilities.NetworkUtility.IsWebUrl(System.String)">
            <summary>
                检查 URL 是否是一个互联网地址
            </summary>
            <param name="url">URL 地址</param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:HttpAgent.Core.Utilities.NetworkUtility.IsPortInUse(System.Int32)">
            <summary>
                检查指定端口是否正在使用
            </summary>
            <remarks>如果端口正在使用则返回 <c>true</c>，否则返回 <c>false</c>。</remarks>
            <param name="port">要检查的端口号。</param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="T:HttpAgent.Core.Utilities.StringUtility">
            <summary>
                提供字符串实用方法
            </summary>
        </member>
        <member name="M:HttpAgent.Core.Utilities.StringUtility.FormatKeyValuesSummary(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Collections.Generic.IEnumerable{System.String}}},System.String)">
            <summary>
                格式化键值集合摘要
            </summary>
            <param name="keyValues">键值集合</param>
            <param name="summary">摘要</param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:HttpAgent.Core.Utilities.StringUtility.AddTabToEachLine(System.String,System.Boolean)">
            <summary>
                在字符串每一行添加制表符
            </summary>
            <param name="input">文本</param>
            <param name="skipFirstLine">是否跳过第一行</param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="T:HttpAgent.AcceptLanguageAttribute">
            <summary>
                HTTP 声明式客户端所偏好的自然语言和区域特性
            </summary>
        </member>
        <member name="M:HttpAgent.AcceptLanguageAttribute.#ctor(System.String)">
            <summary>
                <inheritdoc cref="T:HttpAgent.AcceptLanguageAttribute" />
            </summary>
            <param name="language">自然语言和区域设置</param>
        </member>
        <member name="P:HttpAgent.AcceptLanguageAttribute.Language">
            <summary>
                客户端偏好的语言和区域
            </summary>
        </member>
        <member name="T:HttpAgent.AutoSetHostHeaderAttribute">
            <summary>
                HTTP 声明式设置自动 <c>Host</c> 标头特性
            </summary>
        </member>
        <member name="M:HttpAgent.AutoSetHostHeaderAttribute.#ctor">
            <summary>
                <inheritdoc cref="T:HttpAgent.AutoSetHostHeaderAttribute" />
            </summary>
        </member>
        <member name="M:HttpAgent.AutoSetHostHeaderAttribute.#ctor(System.Boolean)">
            <summary>
                <inheritdoc cref="T:HttpAgent.AutoSetHostHeaderAttribute" />
            </summary>
            <param name="enabled">是否启用</param>
        </member>
        <member name="P:HttpAgent.AutoSetHostHeaderAttribute.Enabled">
            <summary>
                是否启用
            </summary>
        </member>
        <member name="T:HttpAgent.BaseAddressAttribute">
            <summary>
                HTTP 声明式请求基地址特性
            </summary>
        </member>
        <member name="M:HttpAgent.BaseAddressAttribute.#ctor(System.String)">
            <summary>
                <inheritdoc cref="T:HttpAgent.BaseAddressAttribute" />
            </summary>
            <param name="baseAddress">请求基地址</param>
        </member>
        <member name="P:HttpAgent.BaseAddressAttribute.BaseAddress">
            <summary>
                请求基地址
            </summary>
        </member>
        <member name="T:HttpAgent.BodyAttribute">
            <summary>
                HTTP 声明式请求内容特性
            </summary>
        </member>
        <member name="M:HttpAgent.BodyAttribute.#ctor">
            <summary>
                <inheritdoc cref="T:HttpAgent.BodyAttribute" />
            </summary>
        </member>
        <member name="M:HttpAgent.BodyAttribute.#ctor(System.String)">
            <summary>
                <inheritdoc cref="T:HttpAgent.BodyAttribute" />
            </summary>
            <param name="contentType">内容类型</param>
        </member>
        <member name="M:HttpAgent.BodyAttribute.#ctor(System.String,System.String)">
            <summary>
                <inheritdoc cref="T:HttpAgent.QueryAttribute" />
            </summary>
            <param name="contentType">内容类型</param>
            <param name="contentEncoding">内容编码</param>
        </member>
        <member name="P:HttpAgent.BodyAttribute.ContentType">
            <summary>
                内容类型
            </summary>
        </member>
        <member name="P:HttpAgent.BodyAttribute.ContentEncoding">
            <summary>
                内容编码
            </summary>
        </member>
        <member name="P:HttpAgent.BodyAttribute.UseStringContent">
            <summary>
                是否使用 <see cref="T:System.Net.Http.StringContent" /> 构建 <see cref="T:System.Net.Http.FormUrlEncodedContent" />。默认 <c>false</c>
            </summary>
            <remarks>当 <see cref="P:HttpAgent.BodyAttribute.ContentType" /> 值为 <c>application/x-www-form-urlencoded</c> 时有效。</remarks>
        </member>
        <member name="P:HttpAgent.BodyAttribute.RawString">
            <summary>
                是否为原始字符串内容。默认 <c>false</c>
            </summary>
            <remarks>
                <para>作用于 <see cref="T:System.String" /> 类型参数时有效。</para>
                <para>当属性值设置为 <c>true</c> 时，将校验 <see cref="P:HttpAgent.BodyAttribute.ContentType" /> 属性值是否为空，并且字符串内容将被双引号包围并发送，格式如下：<c>"内容"</c>。</para>
            </remarks>
        </member>
        <member name="T:HttpAgent.CookieAttribute">
            <summary>
                HTTP 声明式 Cookie 特性
            </summary>
            <remarks>支持多次指定。</remarks>
        </member>
        <member name="M:HttpAgent.CookieAttribute.#ctor">
            <summary>
                <inheritdoc cref="T:HttpAgent.CookieAttribute" />
            </summary>
            <remarks>特性作用于参数时有效。</remarks>
        </member>
        <member name="M:HttpAgent.CookieAttribute.#ctor(System.String)">
            <summary>
                <inheritdoc cref="T:HttpAgent.CookieAttribute" />
            </summary>
            <remarks>
                <para>当特性作用于方法或接口时，则表示移除指定 Cookie 操作。</para>
                <para>当特性作用于参数时，则表示添加 Cookie ，同时设置 Cookie 键为 <c>name</c> 的值。</para>
            </remarks>
            <param name="name">Cookie 键</param>
        </member>
        <member name="M:HttpAgent.CookieAttribute.#ctor(System.String,System.Object)">
            <summary>
                <inheritdoc cref="T:HttpAgent.CookieAttribute" />
            </summary>
            <param name="name">Cookie 键</param>
            <param name="value">Cookie 的值</param>
        </member>
        <member name="P:HttpAgent.CookieAttribute.Name">
            <summary>
                Cookie 键
            </summary>
            <remarks>该属性优先级低于 <see cref="P:HttpAgent.CookieAttribute.AliasAs" /> 属性设置的值。</remarks>
        </member>
        <member name="P:HttpAgent.CookieAttribute.Value">
            <summary>
                Cookie 的值
            </summary>
            <remarks>当特性作用于参数时，表示默认值。</remarks>
        </member>
        <member name="P:HttpAgent.CookieAttribute.AliasAs">
            <summary>
                别名
            </summary>
            <remarks>
                <para>特性用于参数时有效。</para>
                <para>该属性优先级高于 <see cref="P:HttpAgent.CookieAttribute.Name" /> 属性设置的值。</para>
            </remarks>
        </member>
        <member name="P:HttpAgent.CookieAttribute.Escape">
            <summary>
                是否转义
            </summary>
        </member>
        <member name="P:HttpAgent.CookieAttribute.HasSetValue">
            <summary>
                是否设置了值
            </summary>
        </member>
        <member name="T:HttpAgent.DisableCacheAttribute">
            <summary>
                HTTP 声明式禁用 HTTP 缓存特性
            </summary>
        </member>
        <member name="M:HttpAgent.DisableCacheAttribute.#ctor">
            <summary>
                <inheritdoc cref="T:HttpAgent.DisableCacheAttribute" />
            </summary>
        </member>
        <member name="M:HttpAgent.DisableCacheAttribute.#ctor(System.Boolean)">
            <summary>
                <inheritdoc cref="T:HttpAgent.DisableCacheAttribute" />
            </summary>
            <param name="disabled">是否禁用</param>
        </member>
        <member name="P:HttpAgent.DisableCacheAttribute.Disabled">
            <summary>
                是否禁用
            </summary>
        </member>
        <member name="T:HttpAgent.EnsureSuccessStatusCodeAttribute">
            <summary>
                HTTP 声明式如果 HTTP 响应的 IsSuccessStatusCode 属性是 <c>false</c>，则引发异常特性
            </summary>
        </member>
        <member name="M:HttpAgent.EnsureSuccessStatusCodeAttribute.#ctor">
            <summary>
                <inheritdoc cref="T:HttpAgent.EnsureSuccessStatusCodeAttribute" />
            </summary>
        </member>
        <member name="M:HttpAgent.EnsureSuccessStatusCodeAttribute.#ctor(System.Boolean)">
            <summary>
                <inheritdoc cref="T:HttpAgent.EnsureSuccessStatusCodeAttribute" />
            </summary>
            <param name="enabled">是否启用</param>
        </member>
        <member name="P:HttpAgent.EnsureSuccessStatusCodeAttribute.Enabled">
            <summary>
                是否启用
            </summary>
        </member>
        <member name="T:HttpAgent.HeaderAttribute">
            <summary>
                HTTP 声明式请求标头特性
            </summary>
            <remarks>支持多次指定。</remarks>
        </member>
        <member name="M:HttpAgent.HeaderAttribute.#ctor">
            <summary>
                <inheritdoc cref="T:HttpAgent.HeaderAttribute" />
            </summary>
            <remarks>特性作用于参数时有效。</remarks>
        </member>
        <member name="M:HttpAgent.HeaderAttribute.#ctor(System.String)">
            <summary>
                <inheritdoc cref="T:HttpAgent.HeaderAttribute" />
            </summary>
            <remarks>
                <para>当特性作用于方法或接口时，则表示移除指定请求标头操作。</para>
                <para>当特性作用于参数时，则表示添加请求标头，同时设置请求标头键为 <c>name</c> 的值。</para>
            </remarks>
            <param name="name">请求标头键</param>
        </member>
        <member name="M:HttpAgent.HeaderAttribute.#ctor(System.String,System.Object)">
            <summary>
                <inheritdoc cref="T:HttpAgent.HeaderAttribute" />
            </summary>
            <param name="name">请求标头键</param>
            <param name="value">请求标头的值</param>
        </member>
        <member name="P:HttpAgent.HeaderAttribute.Name">
            <summary>
                请求标头键
            </summary>
            <remarks>该属性优先级低于 <see cref="P:HttpAgent.HeaderAttribute.AliasAs" /> 属性设置的值。</remarks>
        </member>
        <member name="P:HttpAgent.HeaderAttribute.Value">
            <summary>
                请求标头的值
            </summary>
            <remarks>当特性作用于参数时，表示默认值。</remarks>
        </member>
        <member name="P:HttpAgent.HeaderAttribute.AliasAs">
            <summary>
                别名
            </summary>
            <remarks>
                <para>特性用于参数时有效。</para>
                <para>该属性优先级高于 <see cref="P:HttpAgent.HeaderAttribute.Name" /> 属性设置的值。</para>
            </remarks>
        </member>
        <member name="P:HttpAgent.HeaderAttribute.Escape">
            <summary>
                是否转义
            </summary>
        </member>
        <member name="P:HttpAgent.HeaderAttribute.Replace">
            <summary>
                是否替换已存在的请求标头。默认值为 <c>false</c>
            </summary>
        </member>
        <member name="P:HttpAgent.HeaderAttribute.HasSetValue">
            <summary>
                是否设置了值
            </summary>
        </member>
        <member name="T:HttpAgent.HttpClientNameAttribute">
            <summary>
                HTTP 声明式 <see cref="T:System.Net.Http.HttpClient" /> 实例的配置名称特性
            </summary>
        </member>
        <member name="M:HttpAgent.HttpClientNameAttribute.#ctor(System.String)">
            <summary>
                <inheritdoc cref="T:HttpAgent.HttpClientNameAttribute" />
            </summary>
            <param name="name"><see cref="T:System.Net.Http.HttpClient" /> 实例的配置名称</param>
        </member>
        <member name="P:HttpAgent.HttpClientNameAttribute.Name">
            <summary>
                <see cref="T:System.Net.Http.HttpClient" /> 实例的配置名称
            </summary>
        </member>
        <member name="T:HttpAgent.DeleteAttribute">
            <summary>
                HTTP 声明式 DELETE 请求方式特性
            </summary>
        </member>
        <member name="M:HttpAgent.DeleteAttribute.#ctor(System.String)">
            <summary>
                <inheritdoc cref="T:HttpAgent.DeleteAttribute" />
            </summary>
            <param name="requestUri">请求地址</param>
        </member>
        <member name="T:HttpAgent.GetAttribute">
            <summary>
                HTTP 声明式 GET 请求方式特性
            </summary>
        </member>
        <member name="M:HttpAgent.GetAttribute.#ctor(System.String)">
            <summary>
                <inheritdoc cref="T:HttpAgent.GetAttribute" />
            </summary>
            <param name="requestUri">请求地址</param>
        </member>
        <member name="T:HttpAgent.HeadAttribute">
            <summary>
                HTTP 声明式 HEAD 请求方式特性
            </summary>
        </member>
        <member name="M:HttpAgent.HeadAttribute.#ctor(System.String)">
            <summary>
                <inheritdoc cref="T:HttpAgent.HeadAttribute" />
            </summary>
            <param name="requestUri">请求地址</param>
        </member>
        <member name="T:HttpAgent.HttpMethodAttribute">
            <summary>
                HTTP 声明式请求方式特性
            </summary>
        </member>
        <member name="M:HttpAgent.HttpMethodAttribute.#ctor(System.String,System.String)">
            <summary>
                <inheritdoc cref="T:HttpAgent.HttpMethodAttribute" />
            </summary>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址</param>
        </member>
        <member name="M:HttpAgent.HttpMethodAttribute.#ctor(System.Net.Http.HttpMethod,System.String)">
            <summary>
                <inheritdoc cref="T:HttpAgent.HttpMethodAttribute" />
            </summary>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址</param>
        </member>
        <member name="P:HttpAgent.HttpMethodAttribute.Method">
            <summary>
                请求方式
            </summary>
        </member>
        <member name="P:HttpAgent.HttpMethodAttribute.RequestUri">
            <summary>
                请求地址
            </summary>
        </member>
        <member name="T:HttpAgent.OptionsAttribute">
            <summary>
                HTTP 声明式 OPTIONS 请求方式特性
            </summary>
        </member>
        <member name="M:HttpAgent.OptionsAttribute.#ctor(System.String)">
            <summary>
                <inheritdoc cref="T:HttpAgent.OptionsAttribute" />
            </summary>
            <param name="requestUri">请求地址</param>
        </member>
        <member name="T:HttpAgent.PatchAttribute">
            <summary>
                HTTP 声明式 PATCH 请求方式特性
            </summary>
        </member>
        <member name="M:HttpAgent.PatchAttribute.#ctor(System.String)">
            <summary>
                <inheritdoc cref="T:HttpAgent.PatchAttribute" />
            </summary>
            <param name="requestUri">请求地址</param>
        </member>
        <member name="T:HttpAgent.PostAttribute">
            <summary>
                HTTP 声明式 POST 请求方式特性
            </summary>
        </member>
        <member name="M:HttpAgent.PostAttribute.#ctor(System.String)">
            <summary>
                <inheritdoc cref="T:HttpAgent.PostAttribute" />
            </summary>
            <param name="requestUri">请求地址</param>
        </member>
        <member name="T:HttpAgent.PutAttribute">
            <summary>
                HTTP 声明式 PUT 请求方式特性
            </summary>
        </member>
        <member name="M:HttpAgent.PutAttribute.#ctor(System.String)">
            <summary>
                <inheritdoc cref="T:HttpAgent.PutAttribute" />
            </summary>
            <param name="requestUri">请求地址</param>
        </member>
        <member name="T:HttpAgent.TraceAttribute">
            <summary>
                HTTP 声明式 TRACE 请求方式特性
            </summary>
        </member>
        <member name="M:HttpAgent.TraceAttribute.#ctor(System.String)">
            <summary>
                <inheritdoc cref="T:HttpAgent.TraceAttribute" />
            </summary>
            <param name="requestUri">请求地址</param>
        </member>
        <member name="T:HttpAgent.MultipartAttribute">
            <summary>
                HTTP 声明式多部分表单项内容特性
            </summary>
        </member>
        <member name="M:HttpAgent.MultipartAttribute.#ctor">
            <summary>
                <inheritdoc cref="T:HttpAgent.MultipartAttribute" />
            </summary>
        </member>
        <member name="M:HttpAgent.MultipartAttribute.#ctor(System.String)">
            <summary>
                <inheritdoc cref="T:HttpAgent.BodyAttribute" />
            </summary>
            <param name="name">表单名称</param>
        </member>
        <member name="P:HttpAgent.MultipartAttribute.Name">
            <summary>
                表单名称
            </summary>
        </member>
        <member name="P:HttpAgent.MultipartAttribute.FileName">
            <summary>
                文件的名称
            </summary>
        </member>
        <member name="P:HttpAgent.MultipartAttribute.ContentType">
            <summary>
                内容类型
            </summary>
        </member>
        <member name="P:HttpAgent.MultipartAttribute.ContentEncoding">
            <summary>
                内容编码
            </summary>
        </member>
        <member name="P:HttpAgent.MultipartAttribute.AsFileFrom">
            <summary>
                表示将字符串作为多部分表单文件的来源
            </summary>
            <remarks>用于设置多部分表单文件内容。当参数类型为 <see cref="T:System.String" /> 时有效。</remarks>
        </member>
        <member name="P:HttpAgent.MultipartAttribute.AsFormItem">
            <summary>
                表示是否作为表单的一项
            </summary>
            <remarks>
                <para>当参数类型为对象类型时有效。</para>
                <para>该属性值为 <c>true</c> 时作为表单的一项。否则将遍历对象类型的每一个公开属性作为表单的项。默认值为：<c>true</c>。</para>
            </remarks>
        </member>
        <member name="T:HttpAgent.MultipartFormAttribute">
            <summary>
                HTTP 声明式多部分表单内容特性
            </summary>
            <remarks>需配合 <see cref="T:HttpAgent.MultipartAttribute" /> 使用。</remarks>
        </member>
        <member name="M:HttpAgent.MultipartFormAttribute.#ctor">
            <summary>
                <inheritdoc cref="T:HttpAgent.MultipartFormAttribute" />
            </summary>
        </member>
        <member name="M:HttpAgent.MultipartFormAttribute.#ctor(System.String)">
            <summary>
                <inheritdoc cref="T:HttpAgent.MultipartFormAttribute" />
            </summary>
            <param name="boundary">多部分表单内容的边界</param>
        </member>
        <member name="P:HttpAgent.MultipartFormAttribute.Boundary">
            <summary>
                多部分表单内容的边界
            </summary>
        </member>
        <member name="P:HttpAgent.MultipartFormAttribute.OmitContentType">
            <summary>
                是否移除默认的多部分内容的 <c>Content-Type</c>
            </summary>
            <remarks>默认值为：<c>true</c>。</remarks>
        </member>
        <member name="T:HttpAgent.PathAttribute">
            <summary>
                HTTP 声明式路径参数特性
            </summary>
        </member>
        <member name="M:HttpAgent.PathAttribute.#ctor(System.String,System.Object)">
            <summary>
                <inheritdoc cref="T:HttpAgent.PathAttribute" />
            </summary>
            <param name="name">参数名称</param>
            <param name="value">参数值</param>
        </member>
        <member name="P:HttpAgent.PathAttribute.Name">
            <summary>
                路径参数键
            </summary>
        </member>
        <member name="P:HttpAgent.PathAttribute.Value">
            <summary>
                路径参数的值
            </summary>
        </member>
        <member name="T:HttpAgent.PerformanceOptimizationAttribute">
            <summary>
                HTTP 声明式启用性能优化特性
            </summary>
            <remarks>当需要返回 <see cref="T:System.IO.Stream" /> 内容或进行 <c>HttpContext</c> 网页转发时，请勿启用此配置，因为流会因压缩而变得不可读，同时该配置也不适用于网页转发的场景。</remarks>
        </member>
        <member name="M:HttpAgent.PerformanceOptimizationAttribute.#ctor">
            <summary>
                <inheritdoc cref="T:HttpAgent.PerformanceOptimizationAttribute" />
            </summary>
            <remarks>当需要返回 <see cref="T:System.IO.Stream" /> 内容或进行 <c>HttpContext</c> 网页转发时，请勿启用此配置，因为流会因压缩而变得不可读，同时该配置也不适用于网页转发的场景。</remarks>
        </member>
        <member name="M:HttpAgent.PerformanceOptimizationAttribute.#ctor(System.Boolean)">
            <summary>
                <inheritdoc cref="T:HttpAgent.PerformanceOptimizationAttribute" />
            </summary>
            <remarks>当需要返回 <see cref="T:System.IO.Stream" /> 内容或进行 <c>HttpContext</c> 网页转发时，请勿启用此配置，因为流会因压缩而变得不可读，同时该配置也不适用于网页转发的场景。</remarks>
            <param name="enabled">是否启用</param>
        </member>
        <member name="P:HttpAgent.PerformanceOptimizationAttribute.Enabled">
            <summary>
                是否启用
            </summary>
        </member>
        <member name="T:HttpAgent.ProfilerAttribute">
            <summary>
                HTTP 声明式启用请求分析工具特性
            </summary>
        </member>
        <member name="M:HttpAgent.ProfilerAttribute.#ctor">
            <summary>
                <inheritdoc cref="T:HttpAgent.ProfilerAttribute" />
            </summary>
        </member>
        <member name="M:HttpAgent.ProfilerAttribute.#ctor(System.Boolean)">
            <summary>
                <inheritdoc cref="T:HttpAgent.ProfilerAttribute" />
            </summary>
            <param name="enabled">是否启用</param>
        </member>
        <member name="P:HttpAgent.ProfilerAttribute.Enabled">
            <summary>
                是否启用
            </summary>
        </member>
        <member name="T:HttpAgent.PropertyAttribute">
            <summary>
                HTTP 声明式 <see cref="T:System.Net.Http.HttpRequestMessage" /> 请求属性特性
            </summary>
            <remarks>支持多次指定。</remarks>
        </member>
        <member name="M:HttpAgent.PropertyAttribute.#ctor">
            <summary>
                <inheritdoc cref="T:HttpAgent.PropertyAttribute" />
            </summary>
            <remarks>特性作用于参数时有效。</remarks>
        </member>
        <member name="M:HttpAgent.PropertyAttribute.#ctor(System.String)">
            <summary>
                <inheritdoc cref="T:HttpAgent.PropertyAttribute" />
            </summary>
            <remarks>
                当特性作用于参数时，则表示添加 <see cref="T:System.Net.Http.HttpRequestMessage" /> 请求属性，同时设置 <see cref="T:System.Net.Http.HttpRequestMessage" /> 请求属性键为
                <c>name</c> 的值。
            </remarks>
            <param name="name"><see cref="T:System.Net.Http.HttpRequestMessage" /> 请求属性键</param>
        </member>
        <member name="M:HttpAgent.PropertyAttribute.#ctor(System.String,System.Object)">
            <summary>
                <inheritdoc cref="T:HttpAgent.PropertyAttribute" />
            </summary>
            <param name="name"><see cref="T:System.Net.Http.HttpRequestMessage" /> 请求属性键</param>
            <param name="value"><see cref="T:System.Net.Http.HttpRequestMessage" /> 请求属性的值</param>
        </member>
        <member name="P:HttpAgent.PropertyAttribute.Name">
            <summary>
                <see cref="T:System.Net.Http.HttpRequestMessage" /> 请求属性键
            </summary>
            <remarks>该属性优先级低于 <see cref="P:HttpAgent.PropertyAttribute.AliasAs" /> 属性设置的值。</remarks>
        </member>
        <member name="P:HttpAgent.PropertyAttribute.Value">
            <summary>
                <see cref="T:System.Net.Http.HttpRequestMessage" /> 请求属性的值
            </summary>
            <remarks>当特性作用于参数时，表示默认值。</remarks>
        </member>
        <member name="P:HttpAgent.PropertyAttribute.AliasAs">
            <summary>
                别名
            </summary>
            <remarks>
                <para>特性用于参数时有效。</para>
                <para>该属性优先级高于 <see cref="P:HttpAgent.PropertyAttribute.Name" /> 属性设置的值。</para>
            </remarks>
        </member>
        <member name="P:HttpAgent.PropertyAttribute.AsItem">
            <summary>
                表示是否作为 <see cref="T:System.Net.Http.HttpRequestMessage" /> 请求属性的一项
            </summary>
            <remarks>
                <para>当参数类型为对象类型时有效。</para>
                <para>
                    该属性值为 <c>true</c> 时作为 <see cref="T:System.Net.Http.HttpRequestMessage" /> 请求属性的一项。否则将遍历对象类型的每一个公开属性作为
                    <see cref="T:System.Net.Http.HttpRequestMessage" /> 请求属性的项。默认值为：<c>true</c>。
                </para>
            </remarks>
        </member>
        <member name="T:HttpAgent.QueryAttribute">
            <summary>
                HTTP 声明式查询参数特性
            </summary>
            <remarks>支持多次指定。</remarks>
        </member>
        <member name="M:HttpAgent.QueryAttribute.#ctor">
            <summary>
                <inheritdoc cref="T:HttpAgent.QueryAttribute" />
            </summary>
            <remarks>特性作用于参数时有效。</remarks>
        </member>
        <member name="M:HttpAgent.QueryAttribute.#ctor(System.String)">
            <summary>
                <inheritdoc cref="T:HttpAgent.QueryAttribute" />
            </summary>
            <remarks>
                <para>当特性作用于方法或接口时，则表示移除指定查询参数操作。</para>
                <para>当特性作用于参数时，则表示添加查询参数，同时设置查询参数键为 <c>name</c> 的值。</para>
            </remarks>
            <param name="name">查询参数键</param>
        </member>
        <member name="M:HttpAgent.QueryAttribute.#ctor(System.String,System.Object)">
            <summary>
                <inheritdoc cref="T:HttpAgent.QueryAttribute" />
            </summary>
            <param name="name">查询参数键</param>
            <param name="value">查询参数的值</param>
        </member>
        <member name="P:HttpAgent.QueryAttribute.Name">
            <summary>
                查询参数键
            </summary>
            <remarks>该属性优先级低于 <see cref="P:HttpAgent.QueryAttribute.AliasAs" /> 属性设置的值。</remarks>
        </member>
        <member name="P:HttpAgent.QueryAttribute.Value">
            <summary>
                查询参数的值
            </summary>
            <remarks>当特性作用于参数时，表示默认值。</remarks>
        </member>
        <member name="P:HttpAgent.QueryAttribute.AliasAs">
            <summary>
                别名
            </summary>
            <remarks>
                <para>特性用于参数时有效。</para>
                <para>该属性优先级高于 <see cref="P:HttpAgent.QueryAttribute.Name" /> 属性设置的值。</para>
            </remarks>
        </member>
        <member name="P:HttpAgent.QueryAttribute.Escape">
            <summary>
                是否转义
            </summary>
        </member>
        <member name="P:HttpAgent.QueryAttribute.Prefix">
            <summary>
                参数前缀
            </summary>
            <remarks>作用于对象类型时有效。</remarks>
        </member>
        <member name="P:HttpAgent.QueryAttribute.Replace">
            <summary>
                是否替换已存在的查询参数。默认值为 <c>false</c>
            </summary>
        </member>
        <member name="P:HttpAgent.QueryAttribute.IgnoreNullValues">
            <summary>
                是否忽略空值
            </summary>
            <remarks>设置为 <c>true</c> 之后，当参数值为 <c>null</c> 时将被忽略。默认值为 <c>false</c>。</remarks>
        </member>
        <member name="P:HttpAgent.QueryAttribute.HasSetValue">
            <summary>
                是否设置了值
            </summary>
        </member>
        <member name="T:HttpAgent.SimulateBrowserAttribute">
            <summary>
                HTTP 声明式模拟浏览器环境特性
            </summary>
        </member>
        <member name="P:HttpAgent.SimulateBrowserAttribute.Mobile">
            <summary>
                是否模拟移动端，默认值为：<c>false</c>（即模拟桌面端）
            </summary>
        </member>
        <member name="T:HttpAgent.TimeoutAttribute">
            <summary>
                HTTP 声明式超时时间特性
            </summary>
        </member>
        <member name="M:HttpAgent.TimeoutAttribute.#ctor(System.Double)">
            <summary>
                <inheritdoc cref="T:HttpAgent.TimeoutAttribute" />
            </summary>
            <param name="timeoutMilliseconds">超时时间（毫秒）</param>
        </member>
        <member name="P:HttpAgent.TimeoutAttribute.Timeout">
            <summary>
                超时时间（毫秒）
            </summary>
        </member>
        <member name="T:HttpAgent.TraceIdentifierAttribute">
            <summary>
                HTTP 声明式跟踪标识特性
            </summary>
        </member>
        <member name="M:HttpAgent.TraceIdentifierAttribute.#ctor(System.String)">
            <summary>
                <inheritdoc cref="T:HttpAgent.TraceIdentifierAttribute" />
            </summary>
            <param name="traceIdentifier">跟踪标识</param>
        </member>
        <member name="P:HttpAgent.TraceIdentifierAttribute.Identifier">
            <summary>
                跟踪标识
            </summary>
        </member>
        <member name="T:HttpAgent.HttpDeclarativeBuilder">
            <summary>
                HTTP 声明式远程请求构建器
            </summary>
            <remarks>使用 <c>HttpRequestBuilder.Declarative(method, args)</c> 静态方法创建。</remarks>
        </member>
        <member name="F:HttpAgent.HttpDeclarativeBuilder._extractors">
            <summary>
                HTTP 声明式 <see cref="T:HttpAgent.IHttpDeclarativeExtractor" /> 提取器集合
            </summary>
        </member>
        <member name="F:HttpAgent.HttpDeclarativeBuilder._frozenExtractors">
            <summary>
                HTTP 声明式 <see cref="T:HttpAgent.IHttpDeclarativeExtractor" /> 提取器集合（冻结）
            </summary>
            <remarks>该集合用于确保某些 HTTP 声明式提取器始终位于最后。</remarks>
        </member>
        <member name="F:HttpAgent.HttpDeclarativeBuilder._hasLoadedExtractors">
            <summary>
                标识是否已加载自定义 HTTP 声明式提取器
            </summary>
        </member>
        <member name="M:HttpAgent.HttpDeclarativeBuilder.#ctor(System.Reflection.MethodInfo,System.Object[])">
            <summary>
                <inheritdoc cref="T:HttpAgent.HttpDeclarativeBuilder" />
            </summary>
            <param name="method">被调用方法</param>
            <param name="args">被调用方法的参数值数组</param>
        </member>
        <member name="P:HttpAgent.HttpDeclarativeBuilder.Method">
            <summary>
                被调用方法
            </summary>
        </member>
        <member name="P:HttpAgent.HttpDeclarativeBuilder.Args">
            <summary>
                被调用方法的参数值数组
            </summary>
        </member>
        <member name="M:HttpAgent.HttpDeclarativeBuilder.Build(HttpAgent.HttpRemoteOptions)">
            <summary>
                构建 <see cref="T:HttpAgent.HttpRequestBuilder" /> 实例
            </summary>
            <param name="httpRemoteOptions">
                <see cref="T:HttpAgent.HttpRemoteOptions" />
            </param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:HttpAgent.DeclarativeManager">
            <summary>
                HTTP 声明式管理器
            </summary>
        </member>
        <member name="F:HttpAgent.DeclarativeManager._httpDeclarativeBuilder">
            <inheritdoc cref="T:HttpAgent.HttpDeclarativeBuilder" />
        </member>
        <member name="F:HttpAgent.DeclarativeManager._httpRemoteService">
            <inheritdoc cref="T:HttpAgent.IHttpRemoteService" />
        </member>
        <member name="M:HttpAgent.DeclarativeManager.#ctor(HttpAgent.IHttpRemoteService,HttpAgent.HttpDeclarativeBuilder)">
            <summary>
                <inheritdoc cref="T:HttpAgent.DeclarativeManager" />
            </summary>
            <param name="httpRemoteService">
                <see cref="T:HttpAgent.IHttpRemoteService" />
            </param>
            <param name="httpDeclarativeBuilder">
                <see cref="T:HttpAgent.HttpDeclarativeBuilder" />
            </param>
        </member>
        <member name="P:HttpAgent.DeclarativeManager.RequestBuilder">
            <summary>
                <inheritdoc cref="T:HttpAgent.HttpRequestBuilder" />
            </summary>
        </member>
        <member name="M:HttpAgent.DeclarativeManager.Start">
            <summary>
                开始请求
            </summary>
            <returns>
                <see cref="T:System.Object" />
            </returns>
        </member>
        <member name="M:HttpAgent.DeclarativeManager.StartAsync``1">
            <summary>
                开始请求
            </summary>
            <typeparam name="T">转换的目标类型</typeparam>
            <returns>
                <typeparamref name="T" />
            </returns>
        </member>
        <member name="M:HttpAgent.DeclarativeManager.ExtractSingleSpecialArguments(System.Object[])">
            <summary>
                尝试解析单个特殊类型参数
            </summary>
            <param name="args">被调用方法的参数值数组</param>
            <returns>
                <see cref="T:System.Tuple`2" />
            </returns>
        </member>
        <member name="T:HttpAgent.AcceptLanguageDeclarativeExtractor">
            <summary>
                HTTP 声明式 <see cref="T:HttpAgent.AcceptLanguageAttribute" /> 特性提取器
            </summary>
        </member>
        <member name="M:HttpAgent.AcceptLanguageDeclarativeExtractor.Extract(HttpAgent.HttpRequestBuilder,HttpAgent.HttpDeclarativeExtractorContext)">
            <inheritdoc />
        </member>
        <member name="T:HttpAgent.AutoSetHostHeaderDeclarativeExtractor">
            <summary>
                HTTP 声明式 <see cref="T:HttpAgent.AutoSetHostHeaderAttribute" /> 特性提取器
            </summary>
        </member>
        <member name="M:HttpAgent.AutoSetHostHeaderDeclarativeExtractor.Extract(HttpAgent.HttpRequestBuilder,HttpAgent.HttpDeclarativeExtractorContext)">
            <inheritdoc />
        </member>
        <member name="T:HttpAgent.BaseAddressDeclarativeExtractor">
            <summary>
                HTTP 声明式 <see cref="T:HttpAgent.BaseAddressAttribute" /> 特性提取器
            </summary>
        </member>
        <member name="M:HttpAgent.BaseAddressDeclarativeExtractor.Extract(HttpAgent.HttpRequestBuilder,HttpAgent.HttpDeclarativeExtractorContext)">
            <inheritdoc />
        </member>
        <member name="T:HttpAgent.BodyDeclarativeExtractor">
            <summary>
                HTTP 声明式 <see cref="T:HttpAgent.BodyAttribute" /> 特性提取器
            </summary>
        </member>
        <member name="M:HttpAgent.BodyDeclarativeExtractor.Extract(HttpAgent.HttpRequestBuilder,HttpAgent.HttpDeclarativeExtractorContext)">
            <inheritdoc />
        </member>
        <member name="T:HttpAgent.CookieDeclarativeExtractor">
            <summary>
                HTTP 声明式 <see cref="T:HttpAgent.CookieAttribute" /> 特性提取器
            </summary>
        </member>
        <member name="M:HttpAgent.CookieDeclarativeExtractor.Extract(HttpAgent.HttpRequestBuilder,HttpAgent.HttpDeclarativeExtractorContext)">
            <inheritdoc />
        </member>
        <member name="T:HttpAgent.DisableCacheDeclarativeExtractor">
            <summary>
                HTTP 声明式 <see cref="T:HttpAgent.DisableCacheAttribute" /> 特性提取器
            </summary>
        </member>
        <member name="M:HttpAgent.DisableCacheDeclarativeExtractor.Extract(HttpAgent.HttpRequestBuilder,HttpAgent.HttpDeclarativeExtractorContext)">
            <inheritdoc />
        </member>
        <member name="T:HttpAgent.EnsureSuccessStatusCodeDeclarativeExtractor">
            <summary>
                HTTP 声明式 <see cref="T:HttpAgent.EnsureSuccessStatusCodeAttribute" /> 特性提取器
            </summary>
        </member>
        <member name="M:HttpAgent.EnsureSuccessStatusCodeDeclarativeExtractor.Extract(HttpAgent.HttpRequestBuilder,HttpAgent.HttpDeclarativeExtractorContext)">
            <inheritdoc />
        </member>
        <member name="T:HttpAgent.HeaderDeclarativeExtractor">
            <summary>
                HTTP 声明式 <see cref="T:HttpAgent.HeaderAttribute" /> 特性提取器
            </summary>
        </member>
        <member name="M:HttpAgent.HeaderDeclarativeExtractor.Extract(HttpAgent.HttpRequestBuilder,HttpAgent.HttpDeclarativeExtractorContext)">
            <inheritdoc />
        </member>
        <member name="T:HttpAgent.HttpClientNameDeclarativeExtractor">
            <summary>
                HTTP 声明式 <see cref="T:HttpAgent.HttpClientNameAttribute" /> 特性提取器
            </summary>
        </member>
        <member name="M:HttpAgent.HttpClientNameDeclarativeExtractor.Extract(HttpAgent.HttpRequestBuilder,HttpAgent.HttpDeclarativeExtractorContext)">
            <inheritdoc />
        </member>
        <member name="T:HttpAgent.HttpMultipartFormDataBuilderDeclarativeExtractor">
            <summary>
                HTTP 声明式 <see cref="T:HttpAgent.HttpMultipartFormDataBuilder" /> 多部分表单内容配置提取器
            </summary>
        </member>
        <member name="M:HttpAgent.HttpMultipartFormDataBuilderDeclarativeExtractor.Extract(HttpAgent.HttpRequestBuilder,HttpAgent.HttpDeclarativeExtractorContext)">
            <inheritdoc />
        </member>
        <member name="P:HttpAgent.HttpMultipartFormDataBuilderDeclarativeExtractor.Order">
            <inheritdoc />
        </member>
        <member name="T:HttpAgent.HttpRequestBuilderDeclarativeExtractor">
            <summary>
                HTTP 声明式 <see cref="T:HttpAgent.HttpRequestBuilder" /> 自定义配置提取器
            </summary>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilderDeclarativeExtractor.Extract(HttpAgent.HttpRequestBuilder,HttpAgent.HttpDeclarativeExtractorContext)">
            <inheritdoc />
        </member>
        <member name="P:HttpAgent.HttpRequestBuilderDeclarativeExtractor.Order">
            <inheritdoc />
        </member>
        <member name="T:HttpAgent.IFrozenHttpDeclarativeExtractor">
            <summary>
                HTTP 声明式提取器排序（冻结）
            </summary>
        </member>
        <member name="P:HttpAgent.IFrozenHttpDeclarativeExtractor.Order">
            <summary>
                获取提取器的顺序值。值越小，提取器越晚被调用
            </summary>
        </member>
        <member name="T:HttpAgent.IHttpDeclarativeExtractor">
            <summary>
                HTTP 声明式提取器
            </summary>
        </member>
        <member name="M:HttpAgent.IHttpDeclarativeExtractor.Extract(HttpAgent.HttpRequestBuilder,HttpAgent.HttpDeclarativeExtractorContext)">
            <summary>
                提取方法信息构建 <see cref="T:HttpAgent.HttpRequestBuilder" /> 实例
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </param>
            <param name="context">
                <see cref="T:HttpAgent.HttpDeclarativeExtractorContext" />
            </param>
        </member>
        <member name="T:HttpAgent.MultipartDeclarativeExtractor">
            <summary>
                HTTP 声明式 <see cref="T:HttpAgent.MultipartAttribute" /> 特性提取器
            </summary>
        </member>
        <member name="M:HttpAgent.MultipartDeclarativeExtractor.Extract(HttpAgent.HttpRequestBuilder,HttpAgent.HttpDeclarativeExtractorContext)">
            <inheritdoc />
        </member>
        <member name="P:HttpAgent.MultipartDeclarativeExtractor.Order">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.MultipartDeclarativeExtractor.SetMultipartFormData(System.Reflection.MethodInfo,HttpAgent.HttpMultipartFormDataBuilder)">
            <summary>
                设置多部分表单
            </summary>
            <param name="method">
                <see cref="T:System.Reflection.MethodInfo" />
            </param>
            <param name="httpMultipartFormDataBuilder">
                <see cref="T:HttpAgent.HttpMultipartFormDataBuilder" />
            </param>
        </member>
        <member name="M:HttpAgent.MultipartDeclarativeExtractor.AddMultipart(System.Reflection.ParameterInfo,System.Object,HttpAgent.HttpMultipartFormDataBuilder)">
            <summary>
                添加多部分表单内容
            </summary>
            <param name="parameter">
                <see cref="T:System.Reflection.ParameterInfo" />
            </param>
            <param name="value">参数值</param>
            <param name="httpMultipartFormDataBuilder">
                <see cref="T:HttpAgent.HttpMultipartFormDataBuilder" />
            </param>
        </member>
        <member name="M:HttpAgent.MultipartDeclarativeExtractor.AddFileFromSource(System.String,System.String,HttpAgent.MultipartAttribute,HttpAgent.HttpMultipartFormDataBuilder,System.Text.Encoding)">
            <summary>
                添加文件
            </summary>
            <param name="fileSource">文件的来源</param>
            <param name="name">表单名称</param>
            <param name="multipartAttribute">
                <see cref="T:HttpAgent.MultipartAttribute" />
            </param>
            <param name="httpMultipartFormDataBuilder">
                <see cref="T:HttpAgent.HttpMultipartFormDataBuilder" />
            </param>
            <param name="contentEncoding">内容编码</param>
        </member>
        <member name="M:HttpAgent.MultipartDeclarativeExtractor.AddFormItemOrObject(System.Object,System.String,System.Type,HttpAgent.MultipartAttribute,HttpAgent.HttpMultipartFormDataBuilder,System.Text.Encoding)">
            <summary>
                添加单个表单项或对象
            </summary>
            <param name="value">参数的值</param>
            <param name="name">表单名称</param>
            <param name="parameterType">参数类型</param>
            <param name="multipartAttribute">
                <see cref="T:HttpAgent.MultipartAttribute" />
            </param>
            <param name="httpMultipartFormDataBuilder">
                <see cref="T:HttpAgent.HttpMultipartFormDataBuilder" />
            </param>
            <param name="contentEncoding">内容编码</param>
        </member>
        <member name="T:HttpAgent.PathDeclarativeExtractor">
            <summary>
                HTTP 声明式路径参数提取器
            </summary>
        </member>
        <member name="M:HttpAgent.PathDeclarativeExtractor.Extract(HttpAgent.HttpRequestBuilder,HttpAgent.HttpDeclarativeExtractorContext)">
            <inheritdoc />
        </member>
        <member name="T:HttpAgent.PerformanceOptimizationDeclarativeExtractor">
            <summary>
                HTTP 声明式 <see cref="T:HttpAgent.PerformanceOptimizationAttribute" /> 特性提取器
            </summary>
        </member>
        <member name="M:HttpAgent.PerformanceOptimizationDeclarativeExtractor.Extract(HttpAgent.HttpRequestBuilder,HttpAgent.HttpDeclarativeExtractorContext)">
            <inheritdoc />
        </member>
        <member name="T:HttpAgent.ProfilerDeclarativeExtractor">
            <summary>
                HTTP 声明式 <see cref="T:HttpAgent.ProfilerAttribute" /> 特性提取器
            </summary>
        </member>
        <member name="M:HttpAgent.ProfilerDeclarativeExtractor.Extract(HttpAgent.HttpRequestBuilder,HttpAgent.HttpDeclarativeExtractorContext)">
            <inheritdoc />
        </member>
        <member name="T:HttpAgent.PropertyDeclarativeExtractor">
            <summary>
                HTTP 声明式 <see cref="T:HttpAgent.PropertyAttribute" /> 特性提取器
            </summary>
        </member>
        <member name="M:HttpAgent.PropertyDeclarativeExtractor.Extract(HttpAgent.HttpRequestBuilder,HttpAgent.HttpDeclarativeExtractorContext)">
            <inheritdoc />
        </member>
        <member name="T:HttpAgent.QueryDeclarativeExtractor">
            <summary>
                HTTP 声明式 <see cref="T:HttpAgent.QueryAttribute" /> 特性提取器
            </summary>
        </member>
        <member name="M:HttpAgent.QueryDeclarativeExtractor.Extract(HttpAgent.HttpRequestBuilder,HttpAgent.HttpDeclarativeExtractorContext)">
            <inheritdoc />
        </member>
        <member name="T:HttpAgent.SimulateBrowserDeclarativeExtractor">
            <summary>
                HTTP 声明式 <see cref="T:HttpAgent.SimulateBrowserAttribute" /> 特性提取器
            </summary>
        </member>
        <member name="M:HttpAgent.SimulateBrowserDeclarativeExtractor.Extract(HttpAgent.HttpRequestBuilder,HttpAgent.HttpDeclarativeExtractorContext)">
            <inheritdoc />
        </member>
        <member name="T:HttpAgent.TimeoutDeclarativeExtractor">
            <summary>
                HTTP 声明式 <see cref="T:HttpAgent.TimeoutAttribute" /> 特性提取器
            </summary>
        </member>
        <member name="M:HttpAgent.TimeoutDeclarativeExtractor.Extract(HttpAgent.HttpRequestBuilder,HttpAgent.HttpDeclarativeExtractorContext)">
            <inheritdoc />
        </member>
        <member name="T:HttpAgent.TraceIdentifierDeclarativeExtractor">
            <summary>
                HTTP 声明式 <see cref="T:HttpAgent.TraceIdentifierAttribute" /> 特性提取器
            </summary>
        </member>
        <member name="M:HttpAgent.TraceIdentifierDeclarativeExtractor.Extract(HttpAgent.HttpRequestBuilder,HttpAgent.HttpDeclarativeExtractorContext)">
            <inheritdoc />
        </member>
        <member name="T:HttpAgent.ValidationDeclarativeExtractor">
            <summary>
                HTTP 声明式 <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" /> 特性提取器
            </summary>
        </member>
        <member name="M:HttpAgent.ValidationDeclarativeExtractor.Extract(HttpAgent.HttpRequestBuilder,HttpAgent.HttpDeclarativeExtractorContext)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.ValidationDeclarativeExtractor.ValidateParameter(System.Reflection.ParameterInfo,System.Object)">
            <summary>
                验证参数
            </summary>
            <param name="parameter">
                <see cref="T:System.Reflection.ParameterInfo" />
            </param>
            <param name="value">参数的值</param>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException"></exception>
        </member>
        <member name="T:HttpAgent.HttpDeclarativeDispatchProxy">
            <summary>
                HTTP 声明式远程请求代理类
            </summary>
        </member>
        <member name="P:HttpAgent.HttpDeclarativeDispatchProxy.RemoteService">
            <inheritdoc cref="T:HttpAgent.IHttpRemoteService" />
        </member>
        <member name="M:HttpAgent.HttpDeclarativeDispatchProxy.Invoke(System.Reflection.MethodInfo,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpDeclarativeDispatchProxy.InvokeAsync(System.Reflection.MethodInfo,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpDeclarativeDispatchProxy.InvokeAsyncT``1(System.Reflection.MethodInfo,System.Object[])">
            <inheritdoc />
        </member>
        <member name="T:HttpAgent.HttpDeclarativeExtractorContext">
            <summary>
                HTTP 声明式提取器上下文
            </summary>
        </member>
        <member name="F:HttpAgent.HttpDeclarativeExtractorContext._frozenParameterTypes">
            <summary>
                冻结参数类型集合
            </summary>
            <remarks>此类参数类型不应作为外部提取对象。</remarks>
        </member>
        <member name="M:HttpAgent.HttpDeclarativeExtractorContext.#ctor(System.Reflection.MethodInfo,System.Object[])">
            <summary>
                <inheritdoc cref="T:HttpAgent.HttpDeclarativeExtractorContext" />
            </summary>
            <param name="method">被调用方法</param>
            <param name="args">被调用方法的参数值数组</param>
        </member>
        <member name="P:HttpAgent.HttpDeclarativeExtractorContext.Method">
            <summary>
                被调用方法
            </summary>
        </member>
        <member name="P:HttpAgent.HttpDeclarativeExtractorContext.Args">
            <summary>
                被调用方法的参数值数组
            </summary>
        </member>
        <member name="P:HttpAgent.HttpDeclarativeExtractorContext.Parameters">
            <summary>
                被调用方法的参数键值字典
            </summary>
        </member>
        <member name="P:HttpAgent.HttpDeclarativeExtractorContext.UnFrozenParameters">
            <summary>
                被调用方法的非冻结类型参数键值字典
            </summary>
        </member>
        <member name="M:HttpAgent.HttpDeclarativeExtractorContext.IsFrozenParameter(System.Reflection.ParameterInfo)">
            <summary>
                判断参数是否为冻结参数
            </summary>
            <remarks>此类参数不应作为外部提取对象。</remarks>
            <param name="parameter">
                <see cref="T:System.Reflection.ParameterInfo" />
            </param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpDeclarativeExtractorContext.IsMethodDefined``1(``0@,System.Boolean)">
            <summary>
                检查被调用方法是否定义了指定特性
            </summary>
            <param name="attribute">
                <typeparamref name="TAttribute" />
            </param>
            <param name="inherit">是否在基类中搜索</param>
            <typeparam name="TAttribute">
                <see cref="T:System.Attribute" />
            </typeparam>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpDeclarativeExtractorContext.GetMethodDefinedCustomAttributes``1(System.Boolean,System.Boolean)">
            <summary>
                获取被调用方法指定特性的所有实例
            </summary>
            <param name="inherit">是否在基类中搜索</param>
            <param name="methodScanFirst">是否优先查找 <see cref="T:System.Reflection.MethodInfo" /> 的特性。默认值为：<c>true</c>。</param>
            <typeparam name="TAttribute">
                <see cref="T:System.Attribute" />
            </typeparam>
            <returns>
                <typeparamref name="TAttribute" /><c>[]</c>
            </returns>
        </member>
        <member name="T:HttpAgent.IHttpDeclarative">
            <summary>
                HTTP 声明式远程请求依赖接口
            </summary>
        </member>
        <member name="T:HttpAgent.ProfilerDelegatingHandler">
            <summary>
                HTTP 远程请求分析工具处理委托
            </summary>
            <remarks>参考文献：https://learn.microsoft.com/zh-cn/aspnet/core/fundamentals/http-requests?view=aspnetcore-8.0#outgoing-request-middleware</remarks>
            <param name="logger">
                <see cref="T:Microsoft.Extensions.Logging.Logger`1" />
            </param>
            <param name="httpRemoteOptions">
                <see cref="T:Microsoft.Extensions.Options.IOptions`1" />
            </param>
        </member>
        <member name="M:HttpAgent.ProfilerDelegatingHandler.#ctor(Microsoft.Extensions.Logging.ILogger{HttpAgent.Logging},Microsoft.Extensions.Options.IOptions{HttpAgent.HttpRemoteOptions})">
            <summary>
                HTTP 远程请求分析工具处理委托
            </summary>
            <remarks>参考文献：https://learn.microsoft.com/zh-cn/aspnet/core/fundamentals/http-requests?view=aspnetcore-8.0#outgoing-request-middleware</remarks>
            <param name="logger">
                <see cref="T:Microsoft.Extensions.Logging.Logger`1" />
            </param>
            <param name="httpRemoteOptions">
                <see cref="T:Microsoft.Extensions.Options.IOptions`1" />
            </param>
        </member>
        <member name="M:HttpAgent.ProfilerDelegatingHandler.IsEnabled(System.Net.Http.HttpRequestMessage)">
            <summary>
                是否启用请求分析工具
            </summary>
            <param name="httpRequestMessage">
                <see cref="T:System.Net.Http.HttpRequestMessage" />
            </param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:HttpAgent.ProfilerDelegatingHandler.Send(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.ProfilerDelegatingHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.ProfilerDelegatingHandler.LogRequestAsync(Microsoft.Extensions.Logging.ILogger,HttpAgent.HttpRemoteOptions,System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
                记录请求信息
            </summary>
            <param name="logger">
                <see cref="T:Microsoft.Extensions.Logging.ILogger" />
            </param>
            <param name="remoteOptions">
                <see cref="T:HttpAgent.HttpRemoteOptions" />
            </param>
            <param name="request">
                <see cref="T:System.Net.Http.HttpRequestMessage" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:HttpAgent.ProfilerDelegatingHandler.LogResponseAsync(Microsoft.Extensions.Logging.ILogger,HttpAgent.HttpRemoteOptions,System.Net.Http.HttpResponseMessage,System.Int64,System.Threading.CancellationToken)">
            <summary>
                记录响应信息
            </summary>
            <param name="logger">
                <see cref="T:Microsoft.Extensions.Logging.ILogger" />
            </param>
            <param name="remoteOptions">
                <see cref="T:HttpAgent.HttpRemoteOptions" />
            </param>
            <param name="httpResponseMessage">
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </param>
            <param name="requestDuration">请求耗时（毫秒）</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:HttpAgent.ProfilerDelegatingHandler.LogCookieContainer(Microsoft.Extensions.Logging.ILogger,HttpAgent.HttpRemoteOptions,System.Net.Http.HttpRequestMessage,System.Net.CookieContainer)">
            <summary>
                打印 <see cref="T:System.Net.CookieContainer" /> 内容
            </summary>
            <param name="logger">
                <see cref="T:Microsoft.Extensions.Logging.ILogger" />
            </param>
            <param name="remoteOptions">
                <see cref="T:HttpAgent.HttpRemoteOptions" />
            </param>
            <param name="request">
                <see cref="T:System.Net.Http.HttpRequestMessage" />
            </param>
            <param name="cookieContainer">
                <see cref="T:System.Net.CookieContainer" />
            </param>
        </member>
        <member name="M:HttpAgent.ProfilerDelegatingHandler.Log(Microsoft.Extensions.Logging.ILogger,HttpAgent.HttpRemoteOptions,System.String)">
            <summary>
                打印日志
            </summary>
            <param name="logger">
                <see cref="T:Microsoft.Extensions.Logging.ILogger" />
            </param>
            <param name="remoteOptions">
                <see cref="T:HttpAgent.HttpRemoteOptions" />
            </param>
            <param name="message">日志消息</param>
        </member>
        <member name="M:HttpAgent.ProfilerDelegatingHandler.ExtractCookieContainer">
            <summary>
                提取 <see cref="T:System.Net.CookieContainer" /> 实例
            </summary>
            <returns>
                <see cref="T:System.Net.CookieContainer" />
            </returns>
        </member>
        <member name="T:HttpAgent.Extensions.HttpRemoteExtensions">
            <summary>
                HTTP 远程服务拓展类
            </summary>
        </member>
        <member name="M:HttpAgent.Extensions.HttpRemoteExtensions.AddProfilerDelegatingHandler(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder,System.Func{System.Boolean})">
            <summary>
                添加 HTTP 远程请求分析工具处理委托
            </summary>
            <param name="builder">
                <see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" />
            </param>
            <param name="disableConfigure">自定义禁用配置委托</param>
            <returns>
                <see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.Extensions.HttpRemoteExtensions.PerformanceOptimization(System.Net.Http.HttpClient)">
            <summary>
                为 <see cref="T:System.Net.Http.HttpClient" /> 启用性能优化
            </summary>
            <param name="httpClient">
                <see cref="T:System.Net.Http.HttpClient" />
            </param>
        </member>
        <member name="M:HttpAgent.Extensions.HttpRemoteExtensions.ProfilerHeaders(System.Net.Http.HttpRequestMessage,System.String)">
            <summary>
                分析 <see cref="T:System.Net.Http.HttpRequestMessage" /> 标头
            </summary>
            <param name="httpRequestMessage">
                <see cref="T:System.Net.Http.HttpRequestMessage" />
            </param>
            <param name="summary">摘要</param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:HttpAgent.Extensions.HttpRemoteExtensions.ProfilerHeaders(System.Net.Http.HttpResponseMessage,System.String)">
            <summary>
                分析 <see cref="T:System.Net.Http.HttpResponseMessage" /> 标头
            </summary>
            <param name="httpResponseMessage">
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </param>
            <param name="summary">摘要</param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:HttpAgent.Extensions.HttpRemoteExtensions.ProfilerGeneralAndHeaders(System.Net.Http.HttpResponseMessage,System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Collections.Generic.IEnumerable{System.String}}})">
            <summary>
                分析常规和 <see cref="T:System.Net.Http.HttpResponseMessage" /> 标头
            </summary>
            <param name="httpResponseMessage">
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </param>
            <param name="responseSummary">响应标头摘要</param>
            <param name="generalSummary">常规摘要</param>
            <param name="generalCustomKeyValues">自定义常规摘要键值集合</param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:HttpAgent.Extensions.HttpRemoteExtensions.ProfilerAsync(System.Net.Http.HttpContent,System.String,System.Threading.CancellationToken)">
            <summary>
                分析 <see cref="T:System.Net.Http.HttpContent" /> 内容
            </summary>
            <param name="httpContent">
                <see cref="T:System.Net.Http.HttpContent" />
            </param>
            <param name="summary">摘要</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="T:HttpAgent.HttpContentConverterFactory">
            <inheritdoc cref="T:HttpAgent.IHttpContentConverterFactory" />
        </member>
        <member name="F:HttpAgent.HttpContentConverterFactory._converters">
            <summary>
                <see cref="T:HttpAgent.IHttpContentConverter`1" /> 字典集合
            </summary>
        </member>
        <member name="M:HttpAgent.HttpContentConverterFactory.#ctor(System.IServiceProvider,HttpAgent.IHttpContentConverter[])">
            <summary>
                <inheritdoc cref="T:HttpAgent.HttpContentConverterFactory" />
            </summary>
            <param name="serviceProvider">
                <see cref="T:System.IServiceProvider" />
            </param>
            <param name="converters"><see cref="T:HttpAgent.IHttpContentConverter`1" /> 数组</param>
        </member>
        <member name="P:HttpAgent.HttpContentConverterFactory.ServiceProvider">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpContentConverterFactory.Read``1(System.Net.Http.HttpResponseMessage,HttpAgent.IHttpContentConverter[],System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpContentConverterFactory.Read(System.Type,System.Net.Http.HttpResponseMessage,HttpAgent.IHttpContentConverter[],System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpContentConverterFactory.ReadAsync``1(System.Net.Http.HttpResponseMessage,HttpAgent.IHttpContentConverter[],System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpContentConverterFactory.ReadAsync(System.Type,System.Net.Http.HttpResponseMessage,HttpAgent.IHttpContentConverter[],System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpContentConverterFactory.GetConverter``1(HttpAgent.IHttpContentConverter[])">
            <summary>
                获取 <see cref="T:HttpAgent.IHttpContentConverter`1" /> 实例
            </summary>
            <param name="converters"><see cref="T:HttpAgent.IHttpContentConverter`1" /> 数组</param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.IHttpContentConverter`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpContentConverterFactory.GetConverter(System.Type,HttpAgent.IHttpContentConverter[])">
            <summary>
                获取 <see cref="T:HttpAgent.IHttpContentConverter" /> 实例
            </summary>
            <param name="resultType">转换的目标类型</param>
            <param name="converters"><see cref="T:HttpAgent.IHttpContentConverter`1" /> 数组</param>
            <returns>
                <see cref="T:HttpAgent.IHttpContentConverter" />
            </returns>
        </member>
        <member name="T:HttpAgent.HttpContentProcessorFactory">
            <inheritdoc cref="T:HttpAgent.IHttpContentProcessorFactory" />
        </member>
        <member name="F:HttpAgent.HttpContentProcessorFactory._processors">
            <summary>
                <see cref="T:HttpAgent.IHttpContentProcessor" /> 字典集合
            </summary>
        </member>
        <member name="M:HttpAgent.HttpContentProcessorFactory.#ctor(System.IServiceProvider,HttpAgent.IHttpContentProcessor[])">
            <summary>
                <inheritdoc cref="T:HttpAgent.HttpContentProcessorFactory" />
            </summary>
            <param name="serviceProvider">
                <see cref="T:System.IServiceProvider" />
            </param>
            <param name="processors"><see cref="T:HttpAgent.IHttpContentProcessor" /> 数组</param>
        </member>
        <member name="P:HttpAgent.HttpContentProcessorFactory.ServiceProvider">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpContentProcessorFactory.Build(System.Object,System.String,System.Text.Encoding,HttpAgent.IHttpContentProcessor[])">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpContentProcessorFactory.GetProcessor(System.Object,System.String,HttpAgent.IHttpContentProcessor[])">
            <summary>
                查找可以处理指定内容类型或数据类型的 <see cref="T:HttpAgent.IHttpContentProcessor" /> 实例
            </summary>
            <param name="rawContent">原始请求内容</param>
            <param name="contentType">内容类型</param>
            <param name="processors">自定义 <see cref="T:HttpAgent.IHttpContentProcessor" /> 数组</param>
            <returns>
                <see cref="T:HttpAgent.IHttpContentProcessor" />
            </returns>
        </member>
        <member name="T:HttpAgent.IHttpContentConverterFactory">
            <summary>
                <see cref="T:HttpAgent.IHttpContentConverter`1" /> 工厂
            </summary>
        </member>
        <member name="P:HttpAgent.IHttpContentConverterFactory.ServiceProvider">
            <summary>
                <inheritdoc cref="T:System.IServiceProvider" />
            </summary>
        </member>
        <member name="M:HttpAgent.IHttpContentConverterFactory.Read``1(System.Net.Http.HttpResponseMessage,HttpAgent.IHttpContentConverter[],System.Threading.CancellationToken)">
            <summary>
                将 <see cref="T:System.Net.Http.HttpResponseMessage" /> 转换为
                <typeparamref name="TResult" />
                实例
            </summary>
            <param name="httpResponseMessage">
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </param>
            <param name="converters"><see cref="T:HttpAgent.IHttpContentConverter`1" /> 数组</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <typeparamref name="TResult" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpContentConverterFactory.Read(System.Type,System.Net.Http.HttpResponseMessage,HttpAgent.IHttpContentConverter[],System.Threading.CancellationToken)">
            <summary>
                将 <see cref="T:System.Net.Http.HttpResponseMessage" /> 转换为 <see cref="T:System.Object" /> 实例
            </summary>
            <param name="resultType">转换的目标类型</param>
            <param name="httpResponseMessage">
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </param>
            <param name="converters"><see cref="T:HttpAgent.IHttpContentConverter`1" /> 数组</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Object" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpContentConverterFactory.ReadAsync``1(System.Net.Http.HttpResponseMessage,HttpAgent.IHttpContentConverter[],System.Threading.CancellationToken)">
            <summary>
                将 <see cref="T:System.Net.Http.HttpResponseMessage" /> 转换为
                <typeparamref name="TResult" />
                实例
            </summary>
            <param name="httpResponseMessage">
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </param>
            <param name="converters"><see cref="T:HttpAgent.IHttpContentConverter`1" /> 数组</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <typeparamref name="TResult" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpContentConverterFactory.ReadAsync(System.Type,System.Net.Http.HttpResponseMessage,HttpAgent.IHttpContentConverter[],System.Threading.CancellationToken)">
            <summary>
                将 <see cref="T:System.Net.Http.HttpResponseMessage" /> 转换为 <see cref="T:System.Object" /> 实例
            </summary>
            <param name="resultType">转换的目标类型</param>
            <param name="httpResponseMessage">
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </param>
            <param name="converters"><see cref="T:HttpAgent.IHttpContentConverter`1" /> 数组</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Object" />
            </returns>
        </member>
        <member name="T:HttpAgent.IHttpContentProcessorFactory">
            <summary>
                <see cref="T:HttpAgent.IHttpContentProcessor" /> 工厂
            </summary>
        </member>
        <member name="P:HttpAgent.IHttpContentProcessorFactory.ServiceProvider">
            <summary>
                <inheritdoc cref="T:System.IServiceProvider" />
            </summary>
        </member>
        <member name="M:HttpAgent.IHttpContentProcessorFactory.Build(System.Object,System.String,System.Text.Encoding,HttpAgent.IHttpContentProcessor[])">
            <summary>
                构建 <see cref="T:System.Net.Http.HttpContent" /> 实例
            </summary>
            <param name="rawContent">原始请求内容</param>
            <param name="contentType">内容类型</param>
            <param name="encoding">内容编码</param>
            <param name="processors"><see cref="T:HttpAgent.IHttpContentProcessor" /> 数组</param>
            <returns>
                <see cref="T:System.Net.Http.HttpContent" />
            </returns>
        </member>
        <member name="T:HttpAgent.IObjectContentConverterFactory">
            <summary>
                <see cref="T:HttpAgent.ObjectContentConverter`1" /> 工厂
            </summary>
        </member>
        <member name="M:HttpAgent.IObjectContentConverterFactory.GetConverter``1">
            <summary>
                获取 <see cref="T:HttpAgent.ObjectContentConverter`1" /> 实例
            </summary>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.ObjectContentConverter`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IObjectContentConverterFactory.GetConverter(System.Type)">
            <summary>
                获取 <see cref="T:HttpAgent.ObjectContentConverter" /> 实例
            </summary>
            <param name="resultType">转换的目标类型</param>
            <returns>
                <see cref="T:HttpAgent.ObjectContentConverter" />
            </returns>
        </member>
        <member name="T:HttpAgent.ObjectContentConverterFactory">
            <inheritdoc cref="T:HttpAgent.IObjectContentConverterFactory" />
        </member>
        <member name="M:HttpAgent.ObjectContentConverterFactory.GetConverter``1">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.ObjectContentConverterFactory.GetConverter(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:HttpAgent.IHttpFileTransferEventHandler">
            <summary>
                HTTP 文件传输事件处理程序
            </summary>
        </member>
        <member name="M:HttpAgent.IHttpFileTransferEventHandler.OnTransferStarted">
            <summary>
                用于处理在文件开始传输时的操作
            </summary>
        </member>
        <member name="M:HttpAgent.IHttpFileTransferEventHandler.OnProgressChangedAsync(HttpAgent.FileTransferProgress)">
            <summary>
                用于传输进度发生变化时的操作
            </summary>
            <param name="fileTransferProgress">
                <see cref="T:HttpAgent.FileTransferProgress" />
            </param>
            <returns>
                <see cref="T:System.Threading.Tasks.Task" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpFileTransferEventHandler.OnTransferCompleted(System.Int64)">
            <summary>
                用于处理在文件传输完成时的操作
            </summary>
            <param name="duration">总耗时（毫秒）</param>
        </member>
        <member name="M:HttpAgent.IHttpFileTransferEventHandler.OnTransferFailed(System.Exception)">
            <summary>
                用于处理在文件传输发生异常时的操作
            </summary>
            <param name="exception">
                <see cref="T:System.Exception" />
            </param>
        </member>
        <member name="T:HttpAgent.IHttpLongPollingEventHandler">
            <summary>
                长轮询事件处理程序
            </summary>
        </member>
        <member name="M:HttpAgent.IHttpLongPollingEventHandler.OnDataReceivedAsync(System.Net.Http.HttpResponseMessage)">
            <summary>
                用于接收服务器返回 <c>200~299</c> 状态码的数据的操作
            </summary>
            <param name="httpResponseMessage">
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </param>
            <returns>
                <see cref="T:System.Threading.Tasks.Task" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpLongPollingEventHandler.OnErrorAsync(System.Net.Http.HttpResponseMessage)">
            <summary>
                用于接收服务器返回非 <c>200~299</c> 状态码的数据的操作
            </summary>
            <param name="httpResponseMessage">
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </param>
            <returns>
                <see cref="T:System.Threading.Tasks.Task" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpLongPollingEventHandler.OnEndOfStreamAsync(System.Net.Http.HttpResponseMessage)">
            <summary>
                用于响应标头包含 <c>X-End-Of-Stream</c> 时触发的操作
            </summary>
            <param name="httpResponseMessage">
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </param>
            <returns>
                <see cref="T:System.Threading.Tasks.Task" />
            </returns>
        </member>
        <member name="T:HttpAgent.IHttpRequestEventHandler">
            <summary>
                HTTP 远程请求事件处理程序
            </summary>
        </member>
        <member name="M:HttpAgent.IHttpRequestEventHandler.OnPreSendRequest(System.Net.Http.HttpRequestMessage)">
            <summary>
                用于处理在发送 HTTP 请求之前的操作
            </summary>
            <param name="httpRequestMessage">
                <see cref="T:System.Net.Http.HttpRequestMessage" />
            </param>
        </member>
        <member name="M:HttpAgent.IHttpRequestEventHandler.OnPostReceiveResponse(System.Net.Http.HttpResponseMessage)">
            <summary>
                用于处理在收到 HTTP 响应之后的操作
            </summary>
            <param name="httpResponseMessage">
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </param>
        </member>
        <member name="M:HttpAgent.IHttpRequestEventHandler.OnRequestFailed(System.Exception,System.Net.Http.HttpResponseMessage)">
            <summary>
                用于处理在发送 HTTP 请求发生异常时的操作
            </summary>
            <param name="exception">
                <see cref="T:System.Exception" />
            </param>
            <param name="httpResponseMessage">
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </param>
        </member>
        <member name="T:HttpAgent.IHttpServerSentEventsEventHandler">
            <summary>
                Server-Sent Events 事件处理程序
            </summary>
        </member>
        <member name="M:HttpAgent.IHttpServerSentEventsEventHandler.OnOpen">
            <summary>
                用于在与事件源的连接打开时的操作
            </summary>
        </member>
        <member name="M:HttpAgent.IHttpServerSentEventsEventHandler.OnMessageAsync(HttpAgent.ServerSentEventsData)">
            <summary>
                用于在从事件源接收到数据时的操作
            </summary>
            <param name="serverSentEventsData">
                <see cref="T:HttpAgent.ServerSentEventsData" />
            </param>
            <returns>
                <see cref="T:System.Threading.Tasks.Task" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpServerSentEventsEventHandler.OnError(System.Exception)">
            <summary>
                用于在事件源连接未能打开时的操作
            </summary>
            <param name="exception">
                <see cref="T:System.Exception" />
            </param>
        </member>
        <member name="T:HttpAgent.Helpers">
            <summary>
                HTTP 远程请求模块帮助类
            </summary>
        </member>
        <member name="M:HttpAgent.Helpers.GetStreamFromRemote(System.String,System.Int64)">
            <summary>
                从互联网 URL 地址中加载流
            </summary>
            <param name="requestUri">互联网 URL 地址</param>
            <param name="maxResponseContentBufferSize">响应内容的最大缓存大小。默认值为：<c>100MB</c>。</param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:HttpAgent.Helpers.GetFileNameFromUri(System.Uri)">
            <summary>
                从 <see cref="T:System.Uri" /> 中解析文件的名称
            </summary>
            <param name="uri">
                <see cref="T:System.Uri" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:HttpAgent.Helpers.ParseHttpMethod(System.String)">
            <summary>
                解析 HTTP 谓词
            </summary>
            <param name="httpMethod">HTTP 谓词</param>
            <returns>
                <see cref="T:System.Net.Http.HttpMethod" />
            </returns>
        </member>
        <member name="M:HttpAgent.Helpers.IsFormUrlEncodedFormat(System.String)">
            <summary>
                验证字符串是否是 <c>application/x-www-form-urlencoded</c> 格式
            </summary>
            <param name="output">字符串</param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:HttpAgent.Helpers.IsRedirectStatusCode(System.Net.HttpStatusCode)">
            <summary>
                检查 HTTP 状态码是否是重定向状态码
            </summary>
            <param name="statusCode">
                <see cref="T:System.Net.HttpStatusCode" />
            </param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:HttpAgent.Helpers.ParseBaseAddress(System.Uri)">
            <summary>
                从给定的绝对 URI 中解析出基础地址
            </summary>
            <param name="requestUri">请求地址</param>
            <returns>
                <see cref="T:System.Uri" />
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:HttpAgent.Helpers.FormUrlEncodedFormatRegex">
            <remarks>
            Pattern:<br/>
            <code>^(?:(?:[a-zA-Z0-9-._~]+|%(?:[0-9A-Fa-f]{2}))+=(?:[a-zA-Z0-9-._~]*|%(?:[0-9A-Fa-f]{2}))+)(?:&amp;(?:[a-zA-Z0-9-._~]+|%(?:[0-9A-Fa-f]{2}))+=(?:[a-zA-Z0-9-._~]*|%(?:[0-9A-Fa-f]{2}))+)*$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Loop greedily at least once.<br/>
                ○ Match with 2 alternative expressions.<br/>
                    ○ Match a character in the set [-.0-9A-Z_a-z~] greedily at least once.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '%'.<br/>
                        ○ Match a character in the set [0-9A-Fa-f] exactly 2 times.<br/>
            ○ Match '='.<br/>
            ○ Loop greedily at least once.<br/>
                ○ Match with 2 alternative expressions.<br/>
                    ○ Match a character in the set [-.0-9A-Z_a-z~] greedily any number of times.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '%'.<br/>
                        ○ Match a character in the set [0-9A-Fa-f] exactly 2 times.<br/>
            ○ Loop greedily any number of times.<br/>
                ○ Match '&amp;'.<br/>
                ○ Loop greedily at least once.<br/>
                    ○ Match with 2 alternative expressions.<br/>
                        ○ Match a character in the set [-.0-9A-Z_a-z~] greedily at least once.<br/>
                        ○ Match a sequence of expressions.<br/>
                            ○ Match '%'.<br/>
                            ○ Match a character in the set [0-9A-Fa-f] exactly 2 times.<br/>
                ○ Match '='.<br/>
                ○ Loop greedily at least once.<br/>
                    ○ Match with 2 alternative expressions.<br/>
                        ○ Match a character in the set [-.0-9A-Z_a-z~] greedily any number of times.<br/>
                        ○ Match a sequence of expressions.<br/>
                            ○ Match '%'.<br/>
                            ○ Match a character in the set [0-9A-Fa-f] exactly 2 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:HttpAgent.FileDownloadManager">
            <summary>
                文件下载管理器
            </summary>
        </member>
        <member name="F:HttpAgent.FileDownloadManager._httpFileDownloadBuilder">
            <inheritdoc cref="T:HttpAgent.HttpFileDownloadBuilder" />
        </member>
        <member name="F:HttpAgent.FileDownloadManager._httpRemoteService">
            <inheritdoc cref="T:HttpAgent.IHttpRemoteService" />
        </member>
        <member name="F:HttpAgent.FileDownloadManager._progressChannel">
            <summary>
                文件传输进度信息的通道
            </summary>
        </member>
        <member name="M:HttpAgent.FileDownloadManager.#ctor(HttpAgent.IHttpRemoteService,HttpAgent.HttpFileDownloadBuilder,System.Action{HttpAgent.HttpRequestBuilder})">
            <summary>
                <inheritdoc cref="T:HttpAgent.FileDownloadManager" />
            </summary>
            <param name="httpRemoteService">
                <see cref="T:HttpAgent.IHttpRemoteService" />
            </param>
            <param name="httpFileDownloadBuilder">
                <see cref="T:HttpAgent.HttpFileDownloadBuilder" />
            </param>
            <param name="configure">自定义配置委托</param>
        </member>
        <member name="P:HttpAgent.FileDownloadManager.RequestBuilder">
            <summary>
                <inheritdoc cref="T:HttpAgent.HttpRequestBuilder" />
            </summary>
        </member>
        <member name="P:HttpAgent.FileDownloadManager.FileTransferEventHandler">
            <summary>
                <inheritdoc cref="T:HttpAgent.IHttpFileTransferEventHandler" />
            </summary>
        </member>
        <member name="M:HttpAgent.FileDownloadManager.Start(System.Threading.CancellationToken)">
            <summary>
                开始下载
            </summary>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:HttpAgent.FileDownloadManager.StartAsync(System.Threading.CancellationToken)">
            <summary>
                开始下载
            </summary>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:HttpAgent.FileDownloadManager.ReportProgressAsync(System.Threading.CancellationToken)">
            <summary>
                文件传输进度报告任务
            </summary>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:HttpAgent.FileDownloadManager.HandleTransferStarted">
            <summary>
                处理文件传输开始
            </summary>
        </member>
        <member name="M:HttpAgent.FileDownloadManager.HandleTransferCompleted(System.Int64)">
            <summary>
                处理文件传输完成
            </summary>
            <param name="duration">文件传输总花费时间</param>
        </member>
        <member name="M:HttpAgent.FileDownloadManager.HandleTransferFailed(System.Exception)">
            <summary>
                处理文件传输失败
            </summary>
            <param name="e">
                <see cref="T:System.Exception" />
            </param>
        </member>
        <member name="M:HttpAgent.FileDownloadManager.HandleFileExistAndSkip">
            <summary>
                处理文件存在且配置为跳过时的操作
            </summary>
        </member>
        <member name="M:HttpAgent.FileDownloadManager.HandleProgressChangedAsync(HttpAgent.FileTransferProgress)">
            <summary>
                处理文件传输进度变化
            </summary>
            <param name="fileTransferProgress">
                <see cref="T:HttpAgent.FileTransferProgress" />
            </param>
        </member>
        <member name="M:HttpAgent.FileDownloadManager.ShouldContinueWithDownload(System.Net.Http.HttpResponseMessage,System.String@)">
            <summary>
                根据文件是否存在及配置的行为来决定是否应继续进行文件下载
            </summary>
            <param name="httpResponseMessage">
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </param>
            <param name="destinationPath">文件保存的目标路径</param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:HttpAgent.FileDownloadManager.GetFileName(System.Net.Http.HttpResponseMessage)">
            <summary>
                获取文件下载名
            </summary>
            <param name="httpResponseMessage">
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:HttpAgent.FileDownloadManager.MoveTempFileToDestinationPath(System.IO.FileStream,System.String,System.String)">
            <summary>
                移动临时文件至文件保存的目标路径
            </summary>
            <param name="fileStream">
                <see cref="T:System.IO.FileStream" />
            </param>
            <param name="tempDestinationPath">临时文件路径</param>
            <param name="destinationPath">文件保存的目标路径</param>
        </member>
        <member name="T:HttpAgent.FileUploadManager">
            <summary>
                文件上传管理器
            </summary>
        </member>
        <member name="F:HttpAgent.FileUploadManager._httpFileUploadBuilder">
            <inheritdoc cref="T:HttpAgent.HttpFileUploadBuilder" />
        </member>
        <member name="F:HttpAgent.FileUploadManager._httpRemoteService">
            <inheritdoc cref="T:HttpAgent.IHttpRemoteService" />
        </member>
        <member name="F:HttpAgent.FileUploadManager._progressChannel">
            <summary>
                文件传输进度信息的通道
            </summary>
        </member>
        <member name="M:HttpAgent.FileUploadManager.#ctor(HttpAgent.IHttpRemoteService,HttpAgent.HttpFileUploadBuilder,System.Action{HttpAgent.HttpRequestBuilder})">
            <summary>
                <inheritdoc cref="T:HttpAgent.FileUploadManager" />
            </summary>
            <param name="httpRemoteService">
                <see cref="T:HttpAgent.IHttpRemoteService" />
            </param>
            <param name="httpFileUploadBuilder">
                <see cref="T:HttpAgent.HttpFileUploadBuilder" />
            </param>
            <param name="configure">自定义配置委托</param>
        </member>
        <member name="P:HttpAgent.FileUploadManager.RequestBuilder">
            <summary>
                <inheritdoc cref="T:HttpAgent.HttpRequestBuilder" />
            </summary>
        </member>
        <member name="P:HttpAgent.FileUploadManager.FileTransferEventHandler">
            <summary>
                <inheritdoc cref="T:HttpAgent.IHttpFileTransferEventHandler" />
            </summary>
        </member>
        <member name="M:HttpAgent.FileUploadManager.Start(System.Threading.CancellationToken)">
            <summary>
                开始上传
            </summary>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:HttpAgent.FileUploadManager.StartAsync(System.Threading.CancellationToken)">
            <summary>
                开始上传
            </summary>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Threading.Tasks.Task`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.FileUploadManager.ReportProgressAsync(System.Threading.CancellationToken)">
            <summary>
                文件传输进度报告任务
            </summary>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:HttpAgent.FileUploadManager.HandleTransferStarted">
            <summary>
                处理文件传输开始
            </summary>
        </member>
        <member name="M:HttpAgent.FileUploadManager.HandleTransferCompleted(System.Int64)">
            <summary>
                处理文件传输完成
            </summary>
            <param name="duration">文件传输总花费时间</param>
        </member>
        <member name="M:HttpAgent.FileUploadManager.HandleTransferFailed(System.Exception)">
            <summary>
                处理文件传输失败
            </summary>
            <param name="e">
                <see cref="T:System.Exception" />
            </param>
        </member>
        <member name="M:HttpAgent.FileUploadManager.HandleProgressChangedAsync(HttpAgent.FileTransferProgress)">
            <summary>
                处理文件传输进度变化
            </summary>
            <param name="fileTransferProgress">
                <see cref="T:HttpAgent.FileTransferProgress" />
            </param>
        </member>
        <member name="T:HttpAgent.LongPollingManager">
            <summary>
                长轮询管理器
            </summary>
        </member>
        <member name="F:HttpAgent.LongPollingManager._dataChannel">
            <summary>
                数据接收传输的通道
            </summary>
        </member>
        <member name="F:HttpAgent.LongPollingManager._httpLongPollingBuilder">
            <inheritdoc cref="T:HttpAgent.HttpLongPollingBuilder" />
        </member>
        <member name="F:HttpAgent.LongPollingManager._httpRemoteService">
            <inheritdoc cref="T:HttpAgent.IHttpRemoteService" />
        </member>
        <member name="M:HttpAgent.LongPollingManager.#ctor(HttpAgent.IHttpRemoteService,HttpAgent.HttpLongPollingBuilder,System.Action{HttpAgent.HttpRequestBuilder})">
            <summary>
                <inheritdoc cref="T:HttpAgent.LongPollingManager" />
            </summary>
            <param name="httpRemoteService">
                <see cref="T:HttpAgent.IHttpRemoteService" />
            </param>
            <param name="httpLongPollingBuilder">
                <see cref="T:HttpAgent.HttpLongPollingBuilder" />
            </param>
            <param name="configure">自定义配置委托</param>
        </member>
        <member name="P:HttpAgent.LongPollingManager.CurrentRetries">
            <summary>
                当前重试次数
            </summary>
        </member>
        <member name="P:HttpAgent.LongPollingManager.RequestBuilder">
            <summary>
                <inheritdoc cref="T:HttpAgent.HttpRequestBuilder" />
            </summary>
        </member>
        <member name="P:HttpAgent.LongPollingManager.LongPollingEventHandler">
            <summary>
                <inheritdoc cref="T:HttpAgent.IHttpLongPollingEventHandler" />
            </summary>
        </member>
        <member name="M:HttpAgent.LongPollingManager.Start(System.Threading.CancellationToken)">
            <summary>
                开始请求
            </summary>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:HttpAgent.LongPollingManager.StartAsync(System.Threading.CancellationToken)">
            <summary>
                开始请求
            </summary>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:HttpAgent.LongPollingManager.Retry(System.Threading.CancellationToken)">
            <summary>
                重新开始请求
            </summary>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:HttpAgent.LongPollingManager.RetryAsync(System.Threading.CancellationToken)">
            <summary>
                重新开始请求
            </summary>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:HttpAgent.LongPollingManager.ShouldTerminatePolling(System.Net.Http.HttpResponseMessage)">
            <summary>
                检查是否应该终止长轮询
            </summary>
            <param name="httpResponseMessage">
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:HttpAgent.LongPollingManager.FetchResponseAsync(System.Threading.CancellationToken)">
            <summary>
                接收服务器响应数据任务
            </summary>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:HttpAgent.LongPollingManager.HandleResponseAsync(System.Net.Http.HttpResponseMessage)">
            <summary>
                处理服务器响应数据
            </summary>
            <param name="httpResponseMessage">
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </param>
        </member>
        <member name="M:HttpAgent.LongPollingManager.HandleDataReceivedAsync(System.Net.Http.HttpResponseMessage)">
            <summary>
                处理服务器返回 <c>200~299</c> 状态码的数据
            </summary>
            <param name="httpResponseMessage">
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </param>
        </member>
        <member name="M:HttpAgent.LongPollingManager.HandleErrorAsync(System.Net.Http.HttpResponseMessage)">
            <summary>
                处理服务器返回非 <c>200~299</c> 状态码的数据
            </summary>
            <param name="httpResponseMessage">
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </param>
        </member>
        <member name="M:HttpAgent.LongPollingManager.HandleEndOfStreamAsync(System.Net.Http.HttpResponseMessage)">
            <summary>
                处理服务器响应标头包含 <c>X-End-Of-Stream</c> 时触发的操作
            </summary>
            <param name="httpResponseMessage">
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </param>
        </member>
        <member name="T:HttpAgent.ServerSentEventsManager">
            <summary>
                Server-Sent Events 管理器
            </summary>
            <remarks>参考文献：https://developer.mozilla.org/zh-CN/docs/Web/API/Server-sent_events/Using_server-sent_events。</remarks>
        </member>
        <member name="F:HttpAgent.ServerSentEventsManager._httpRemoteService">
            <inheritdoc cref="T:HttpAgent.IHttpRemoteService" />
        </member>
        <member name="F:HttpAgent.ServerSentEventsManager._httpServerSentEventsBuilder">
            <inheritdoc cref="T:HttpAgent.HttpServerSentEventsBuilder" />
        </member>
        <member name="F:HttpAgent.ServerSentEventsManager._messageChannel">
            <summary>
                事件消息传输的通道
            </summary>
        </member>
        <member name="M:HttpAgent.ServerSentEventsManager.#ctor(HttpAgent.IHttpRemoteService,HttpAgent.HttpServerSentEventsBuilder,System.Action{HttpAgent.HttpRequestBuilder})">
            <summary>
                <inheritdoc cref="T:HttpAgent.ServerSentEventsManager" />
            </summary>
            <param name="httpRemoteService">
                <see cref="T:HttpAgent.IHttpRemoteService" />
            </param>
            <param name="httpServerSentEventsBuilder">
                <see cref="T:HttpAgent.HttpServerSentEventsBuilder" />
            </param>
            <param name="configure">自定义配置委托</param>
        </member>
        <member name="P:HttpAgent.ServerSentEventsManager.CurrentRetryInterval">
            <summary>
                当前重新连接的时间（毫秒）
            </summary>
        </member>
        <member name="P:HttpAgent.ServerSentEventsManager.CurrentRetries">
            <summary>
                当前重试次数
            </summary>
        </member>
        <member name="P:HttpAgent.ServerSentEventsManager.RequestBuilder">
            <summary>
                <inheritdoc cref="T:HttpAgent.HttpRequestBuilder" />
            </summary>
        </member>
        <member name="P:HttpAgent.ServerSentEventsManager.ServerSentEventsEventHandler">
            <summary>
                <inheritdoc cref="T:HttpAgent.IHttpServerSentEventsEventHandler" />
            </summary>
        </member>
        <member name="M:HttpAgent.ServerSentEventsManager.Start(System.Threading.CancellationToken)">
            <summary>
                开始接收
            </summary>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:HttpAgent.ServerSentEventsManager.StartAsync(System.Threading.CancellationToken)">
            <summary>
                开始接收
            </summary>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:HttpAgent.ServerSentEventsManager.Retry(System.Threading.CancellationToken)">
            <summary>
                重新开始接收
            </summary>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:HttpAgent.ServerSentEventsManager.RetryAsync(System.Threading.CancellationToken)">
            <summary>
                重新开始接收
            </summary>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:HttpAgent.ServerSentEventsManager.IsEventComplete(HttpAgent.ServerSentEventsData)">
            <summary>
                检查是否已经收集了一个完整的事件
            </summary>
            <param name="serverSentEventsData">
                <see cref="T:HttpAgent.ServerSentEventsData" />
            </param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:HttpAgent.ServerSentEventsManager.TryParseEventLine(System.String,HttpAgent.ServerSentEventsData@)">
            <summary>
                尝试解析事件消息行文本
            </summary>
            <param name="line"></param>
            <param name="serverSentEventsData">
                <see cref="T:HttpAgent.ServerSentEventsData" />
            </param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:HttpAgent.ServerSentEventsManager.ReceiveDataAsync(System.Threading.CancellationToken)">
            <summary>
                接收事件消息任务
            </summary>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:HttpAgent.ServerSentEventsManager.HandleOpen">
            <summary>
                处理与事件源的连接打开
            </summary>
        </member>
        <member name="M:HttpAgent.ServerSentEventsManager.HandleError(System.Exception)">
            <summary>
                处理与事件源的连接错误
            </summary>
            <param name="e">
                <see cref="T:System.Exception" />
            </param>
        </member>
        <member name="M:HttpAgent.ServerSentEventsManager.HandleMessageReceivedAsync(HttpAgent.ServerSentEventsData)">
            <summary>
                处理服务器发送的事件消息
            </summary>
            <param name="serverSentEventsData">
                <see cref="T:HttpAgent.ServerSentEventsData" />
            </param>
        </member>
        <member name="T:HttpAgent.StressTestHarnessManager">
            <summary>
                压力测试管理器
            </summary>
        </member>
        <member name="F:HttpAgent.StressTestHarnessManager._httpRemoteService">
            <inheritdoc cref="T:HttpAgent.IHttpRemoteService" />
        </member>
        <member name="F:HttpAgent.StressTestHarnessManager._httpStressTestHarnessBuilder">
            <inheritdoc cref="T:HttpAgent.HttpStressTestHarnessBuilder" />
        </member>
        <member name="M:HttpAgent.StressTestHarnessManager.#ctor(HttpAgent.IHttpRemoteService,HttpAgent.HttpStressTestHarnessBuilder,System.Action{HttpAgent.HttpRequestBuilder})">
            <summary>
                <inheritdoc cref="T:HttpAgent.StressTestHarnessManager" />
            </summary>
            <param name="httpRemoteService">
                <see cref="T:HttpAgent.IHttpRemoteService" />
            </param>
            <param name="httpStressTestHarnessBuilder">
                <see cref="T:HttpAgent.HttpStressTestHarnessBuilder" />
            </param>
            <param name="configure">自定义配置委托</param>
        </member>
        <member name="P:HttpAgent.StressTestHarnessManager.RequestBuilder">
            <summary>
                <inheritdoc cref="T:HttpAgent.HttpRequestBuilder" />
            </summary>
        </member>
        <member name="M:HttpAgent.StressTestHarnessManager.Start(System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                开始测试
            </summary>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:HttpAgent.StressTestHarnessResult" />
            </returns>
        </member>
        <member name="M:HttpAgent.StressTestHarnessManager.StartAsync(System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                开始测试
            </summary>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:HttpAgent.StressTestHarnessResult" />
            </returns>
        </member>
        <member name="T:HttpAgent.DigestCredentials">
            <summary>
                摘要认证
            </summary>
        </member>
        <member name="P:HttpAgent.DigestCredentials.Username">
            <summary>
                用户名
            </summary>
        </member>
        <member name="P:HttpAgent.DigestCredentials.Password">
            <summary>
                密码
            </summary>
        </member>
        <member name="P:HttpAgent.DigestCredentials.Realm">
            <summary>
                服务器提供的认证领域
            </summary>
            <remarks>服务器通过 <c>WWW-Authenticate</c> 响应标头返回。</remarks>
        </member>
        <member name="P:HttpAgent.DigestCredentials.Nonce">
            <summary>
                服务器提供的随机数
            </summary>
            <remarks>服务器通过 <c>WWW-Authenticate</c> 响应标头返回。</remarks>
        </member>
        <member name="P:HttpAgent.DigestCredentials.Qop">
            <summary>
                保护质量
            </summary>
            <remarks>服务器通过 <c>WWW-Authenticate</c> 响应标头返回。</remarks>
        </member>
        <member name="P:HttpAgent.DigestCredentials.Nc">
            <summary>
                非一次性计数器
            </summary>
        </member>
        <member name="P:HttpAgent.DigestCredentials.CNonce">
            <summary>
                客户端提供的随机数
            </summary>
        </member>
        <member name="P:HttpAgent.DigestCredentials.Opaque">
            <summary>
                服务器提供的不透明数据
            </summary>
            <remarks>服务器通过 <c>WWW-Authenticate</c> 响应标头返回，客户端需原样回去。</remarks>
        </member>
        <member name="M:HttpAgent.DigestCredentials.GetDigestCredentials(System.String,System.String,System.String,System.Net.Http.HttpMethod)">
            <summary>
                获取 Digest 摘要认证授权凭证
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="username">用户名</param>
            <param name="password">密码</param>
            <param name="httpMethod">
                <see cref="T:System.Net.Http.HttpMethod" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:HttpAgent.DigestCredentials.Create(System.String,System.String,System.String)">
            <summary>
                创建 <see cref="T:HttpAgent.DigestCredentials" /> 实例
            </summary>
            <param name="username">用户名</param>
            <param name="password">密码</param>
            <param name="wwwAuthenticateValue">服务器响应标头 <c>WWW-Authenticate</c> 的值</param>
            <returns>
                <see cref="T:HttpAgent.DigestCredentials" />
            </returns>
        </member>
        <member name="M:HttpAgent.DigestCredentials.GenerateCredentials(System.String,System.Net.Http.HttpMethod)">
            <summary>
                生成摘要认证授权凭证
            </summary>
            <param name="digestUri">请求相对地址（不包含主机地址）</param>
            <param name="method">
                <see cref="T:System.Net.Http.HttpMethod" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:HttpAgent.DigestCredentials.ExtractParameterValueFromHeader(System.String,System.String)">
            <summary>
                从服务器响应标头 <c>WWW-Authenticate</c> 的值中提取参数值
            </summary>
            <param name="name">参数名</param>
            <param name="wwwAuthenticateValue">服务器响应标头 <c>WWW-Authenticate</c> 的值</param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:HttpAgent.DigestCredentials.GenerateMd5Hash(System.String)">
            <summary>
                生成 MD5 哈希
            </summary>
            <param name="input">值</param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="T:HttpAgent.FileTransferProgress">
            <summary>
                文件传输的进度信息
            </summary>
        </member>
        <member name="F:HttpAgent.FileTransferProgress._epsilon">
            <summary>
                使用一个小的正值来防止除零错误
            </summary>
        </member>
        <member name="M:HttpAgent.FileTransferProgress.#ctor(System.String,System.Int64,System.String)">
            <summary>
                <inheritdoc cref="T:HttpAgent.FileTransferProgress" />
            </summary>
            <param name="filePath">文件路径</param>
            <param name="totalFileSize">文件的总大小</param>
            <param name="fileName">文件的名称</param>
        </member>
        <member name="P:HttpAgent.FileTransferProgress.FilePath">
            <summary>
                文件路径
            </summary>
        </member>
        <member name="P:HttpAgent.FileTransferProgress.FileName">
            <summary>
                文件的名称
            </summary>
        </member>
        <member name="P:HttpAgent.FileTransferProgress.TotalFileSize">
            <summary>
                文件的总大小
            </summary>
            <remarks>以字节为单位。</remarks>
        </member>
        <member name="P:HttpAgent.FileTransferProgress.Transferred">
            <summary>
                已传输的数据量
            </summary>
            <remarks>以字节为单位。</remarks>
        </member>
        <member name="P:HttpAgent.FileTransferProgress.PercentageComplete">
            <summary>
                已完成的传输百分比
            </summary>
        </member>
        <member name="P:HttpAgent.FileTransferProgress.TransferRate">
            <summary>
                当前的传输速率
            </summary>
            <remarks>以字节/秒为单位。</remarks>
        </member>
        <member name="P:HttpAgent.FileTransferProgress.TimeElapsed">
            <summary>
                从开始传输到现在的持续时间
            </summary>
        </member>
        <member name="P:HttpAgent.FileTransferProgress.EstimatedTimeRemaining">
            <summary>
                预估剩余传输时间
            </summary>
        </member>
        <member name="M:HttpAgent.FileTransferProgress.ToString">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.FileTransferProgress.ToSummaryString">
            <summary>
                输出简要进度字符串
            </summary>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:HttpAgent.FileTransferProgress.UpdateProgress(System.Int64,System.TimeSpan)">
            <summary>
                更新文件传输进度
            </summary>
            <param name="transferred">已传输的数据量</param>
            <param name="timeElapsed">从开始传输到现在的持续时间</param>
        </member>
        <member name="M:HttpAgent.FileTransferProgress.CalculateEstimatedTimeRemaining">
            <summary>
                计算预估剩余传输时间
            </summary>
            <returns>
                <see cref="T:System.TimeSpan" />
            </returns>
        </member>
        <member name="T:HttpAgent.FileTypeMapper">
            <summary>
                据文件扩展名提供内容类型
            </summary>
        </member>
        <member name="M:HttpAgent.FileTypeMapper.#ctor">
            <summary>
                <inheritdoc cref="T:HttpAgent.FileTypeMapper" />
            </summary>
        </member>
        <member name="M:HttpAgent.FileTypeMapper.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
                <inheritdoc cref="T:HttpAgent.FileTypeMapper" />
            </summary>
            <param name="mapping">文件拓展名及其对应内容类型映射字典</param>
        </member>
        <member name="P:HttpAgent.FileTypeMapper.Mappings">
            <summary>
                文件拓展名及其对应内容类型映射字典
            </summary>
        </member>
        <member name="M:HttpAgent.FileTypeMapper.TryGetContentType(System.String,System.String@)">
            <summary>
                尝试根据文件路径获取拓展名
            </summary>
            <param name="subpath">文件路径</param>
            <param name="contentType">内容类型</param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:HttpAgent.FileTypeMapper.GetContentType(System.String,System.String)">
            <summary>
                根据文件路径获取拓展名
            </summary>
            <param name="subpath">文件路径</param>
            <param name="defaultContentType">默认内容类型</param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:HttpAgent.FileTypeMapper.GetExtension(System.String)">
            <summary>
                根据文件路径获取拓展名
            </summary>
            <param name="path">文件路径</param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="T:HttpAgent.HttpClientPooling">
            <summary>
                管理 <see cref="T:System.Net.Http.HttpClient" /> 实例及及其释放操作
            </summary>
        </member>
        <member name="M:HttpAgent.HttpClientPooling.#ctor(System.Net.Http.HttpClient,System.Action{System.Net.Http.HttpClient})">
            <summary>
                <inheritdoc cref="T:HttpAgent.HttpClientPooling" />
            </summary>
            <param name="httpClient">
                <see cref="T:System.Net.Http.HttpClient" />
            </param>
            <param name="release">用于释放 <see cref="T:System.Net.Http.HttpClient" /> 实例的方法委托</param>
        </member>
        <member name="P:HttpAgent.HttpClientPooling.Instance">
            <summary>
                <see cref="T:System.Net.Http.HttpClient" />
            </summary>
        </member>
        <member name="P:HttpAgent.HttpClientPooling.Release">
            <summary>
                用于释放 <see cref="T:System.Net.Http.HttpClient" /> 实例的方法委托
            </summary>
        </member>
        <member name="T:HttpAgent.HttpRemoteResult`1">
            <summary>
                HTTP 远程请求结果
            </summary>
            <remarks>用于将原始的 <see cref="T:System.Net.Http.HttpResponseMessage" /> 进行包装转换。</remarks>
            <typeparam name="TResult">转换的目标类型</typeparam>
        </member>
        <member name="M:HttpAgent.HttpRemoteResult`1.#ctor(System.Net.Http.HttpResponseMessage)">
            <summary>
                <inheritdoc cref="T:HttpAgent.HttpRemoteResult`1" />
            </summary>
            <param name="httpResponseMessage">
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </param>
        </member>
        <member name="P:HttpAgent.HttpRemoteResult`1.ResponseMessage">
            <inheritdoc cref="T:System.Net.Http.HttpResponseMessage" />
        </member>
        <member name="P:HttpAgent.HttpRemoteResult`1.ContentType">
            <summary>
                内容类型
            </summary>
        </member>
        <member name="P:HttpAgent.HttpRemoteResult`1.CharSet">
            <summary>
                字符集
            </summary>
        </member>
        <member name="P:HttpAgent.HttpRemoteResult`1.ContentEncoding">
            <summary>
                内容编码
            </summary>
        </member>
        <member name="P:HttpAgent.HttpRemoteResult`1.ContentLength">
            <summary>
                内容大小
            </summary>
        </member>
        <member name="P:HttpAgent.HttpRemoteResult`1.RawSetCookies">
            <summary>
                原始响应标头 <c>Set-Cookie</c> 集合
            </summary>
        </member>
        <member name="P:HttpAgent.HttpRemoteResult`1.SetCookies">
            <summary>
                <see cref="T:Microsoft.Net.Http.Headers.SetCookieHeaderValue" /> 集合
            </summary>
        </member>
        <member name="P:HttpAgent.HttpRemoteResult`1.StatusCode">
            <summary>
                响应状态码
            </summary>
        </member>
        <member name="P:HttpAgent.HttpRemoteResult`1.IsSuccessStatusCode">
            <summary>
                是否请求成功
            </summary>
        </member>
        <member name="P:HttpAgent.HttpRemoteResult`1.Result">
            <summary>
                <typeparamref name="TResult" />
            </summary>
            <remarks>注意 <c>HEAD</c> 请求不包含响应体。</remarks>
        </member>
        <member name="P:HttpAgent.HttpRemoteResult`1.RequestDuration">
            <summary>
                请求耗时（毫秒）
            </summary>
        </member>
        <member name="P:HttpAgent.HttpRemoteResult`1.Headers">
            <summary>
                响应标头
            </summary>
        </member>
        <member name="P:HttpAgent.HttpRemoteResult`1.ContentHeaders">
            <summary>
                响应体标头
            </summary>
        </member>
        <member name="M:HttpAgent.HttpRemoteResult`1.Initialize">
            <summary>
                初始化
            </summary>
        </member>
        <member name="M:HttpAgent.HttpRemoteResult`1.ParseStatusCode">
            <summary>
                解析响应状态码
            </summary>
        </member>
        <member name="M:HttpAgent.HttpRemoteResult`1.ParseHeaders">
            <summary>
                解析响应标头
            </summary>
        </member>
        <member name="M:HttpAgent.HttpRemoteResult`1.ParseContentMetadata(System.Net.Http.Headers.HttpContentHeaders)">
            <summary>
                解析响应体标头元数据
            </summary>
            <param name="contentHeaders">
                <see cref="T:System.Net.Http.Headers.HttpContentHeaders" />
            </param>
        </member>
        <member name="M:HttpAgent.HttpRemoteResult`1.ParseSetCookies(System.Net.Http.Headers.HttpResponseHeaders)">
            <summary>
                解析响应标头 <c>Set-Cookie</c> 集合
            </summary>
            <param name="responseHeaders">
                <see cref="T:System.Net.Http.Headers.HttpResponseHeaders" />
            </param>
        </member>
        <member name="M:HttpAgent.HttpRemoteResult`1.ToString">
            <inheritdoc />
        </member>
        <member name="T:HttpAgent.Logging">
            <summary>
                HTTP 远程服务日志类别
            </summary>
        </member>
        <member name="T:HttpAgent.MultipartFile">
            <summary>
                多部分表单文件
            </summary>
            <remarks>使用 <c>MultipartFile.CreateFrom[Source]</c> 静态方法创建。</remarks>
        </member>
        <member name="M:HttpAgent.MultipartFile.#ctor">
            <summary>
                <inheritdoc cref="T:HttpAgent.MultipartFile" />
            </summary>
        </member>
        <member name="P:HttpAgent.MultipartFile.Name">
            <summary>
                表单名称
            </summary>
        </member>
        <member name="P:HttpAgent.MultipartFile.FileName">
            <summary>
                文件的名称
            </summary>
        </member>
        <member name="P:HttpAgent.MultipartFile.ContentType">
            <summary>
                内容类型
            </summary>
        </member>
        <member name="P:HttpAgent.MultipartFile.ContentEncoding">
            <summary>
                内容编码
            </summary>
        </member>
        <member name="P:HttpAgent.MultipartFile.Source">
            <summary>
                文件来源
            </summary>
        </member>
        <member name="P:HttpAgent.MultipartFile.FileSourceType">
            <summary>
                <see cref="P:HttpAgent.MultipartFile.FileSourceType" />
            </summary>
        </member>
        <member name="M:HttpAgent.MultipartFile.CreateFromByteArray(System.Byte[],System.String,System.String,System.String,System.Text.Encoding)">
            <summary>
                从字节数组中添加文件
            </summary>
            <param name="byteArray">字节数组</param>
            <param name="name">表单名称</param>
            <param name="fileName">文件的名称</param>
            <param name="contentType">内容类型</param>
            <param name="contentEncoding">内容编码</param>
            <returns>
                <see cref="T:HttpAgent.MultipartFile" />
            </returns>
        </member>
        <member name="M:HttpAgent.MultipartFile.CreateFromStream(System.IO.Stream,System.String,System.String,System.String,System.Text.Encoding)">
            <summary>
                从 <see cref="T:System.IO.Stream" /> 中添加文件
            </summary>
            <param name="stream">
                <see cref="T:System.IO.Stream" />
            </param>
            <param name="name">表单名称</param>
            <param name="fileName">文件的名称</param>
            <param name="contentType">内容类型</param>
            <param name="contentEncoding">内容编码</param>
            <returns>
                <see cref="T:HttpAgent.MultipartFile" />
            </returns>
        </member>
        <member name="M:HttpAgent.MultipartFile.CreateFromPath(System.String,System.String,System.String,System.String,System.Text.Encoding)">
            <summary>
                从本地路径中添加文件
            </summary>
            <param name="filePath">文件路径</param>
            <param name="name">表单名称</param>
            <param name="fileName">文件的名称</param>
            <param name="contentType">内容类型</param>
            <param name="contentEncoding">内容编码</param>
            <returns>
                <see cref="T:HttpAgent.MultipartFile" />
            </returns>
        </member>
        <member name="M:HttpAgent.MultipartFile.CreateFromBase64String(System.String,System.String,System.String,System.String,System.Text.Encoding)">
            <summary>
                从 Base64 字符串中添加文件
            </summary>
            <remarks>文件大小限制在 <c>100MB</c> 以内。</remarks>
            <param name="base64String">Base64 字符串</param>
            <param name="name">表单名称</param>
            <param name="fileName">文件的名称</param>
            <param name="contentType">内容类型</param>
            <param name="contentEncoding">内容编码</param>
            <returns>
                <see cref="T:HttpAgent.MultipartFile" />
            </returns>
        </member>
        <member name="M:HttpAgent.MultipartFile.CreateFromRemote(System.String,System.String,System.String,System.String,System.Text.Encoding)">
            <summary>
                从互联网 URL 中添加文件
            </summary>
            <remarks>文件大小限制在 <c>100MB</c> 以内。</remarks>
            <param name="url">互联网 URL 地址</param>
            <param name="name">表单名称</param>
            <param name="fileName">文件的名称</param>
            <param name="contentType">内容类型</param>
            <param name="contentEncoding">内容编码</param>
            <returns>
                <see cref="T:HttpAgent.MultipartFile" />
            </returns>
        </member>
        <member name="T:HttpAgent.MultipartFormDataItem">
            <summary>
                <see cref="T:System.Net.Http.MultipartFormDataContent" /> 条目
            </summary>
        </member>
        <member name="M:HttpAgent.MultipartFormDataItem.#ctor(System.String)">
            <summary>
                <inheritdoc cref="T:HttpAgent.MultipartFormDataItem" />
            </summary>
            <param name="name">表单名称</param>
        </member>
        <member name="P:HttpAgent.MultipartFormDataItem.Name">
            <summary>
                表单名称
            </summary>
        </member>
        <member name="P:HttpAgent.MultipartFormDataItem.ContentType">
            <summary>
                内容类型
            </summary>
        </member>
        <member name="P:HttpAgent.MultipartFormDataItem.ContentEncoding">
            <summary>
                内容编码
            </summary>
        </member>
        <member name="P:HttpAgent.MultipartFormDataItem.RawContent">
            <summary>
                原始请求内容
            </summary>
            <remarks>此属性值最终将转换为 <see cref="T:System.Net.Http.HttpContent" /> 类型实例。</remarks>
        </member>
        <member name="P:HttpAgent.MultipartFormDataItem.FileName">
            <summary>
                文件的名称
            </summary>
        </member>
        <member name="T:HttpAgent.ProgressFileStream">
            <summary>
                带读写进度的文件流
            </summary>
        </member>
        <member name="F:HttpAgent.ProgressFileStream._fileLength">
            <summary>
                文件大小
            </summary>
        </member>
        <member name="F:HttpAgent.ProgressFileStream._fileStream">
            <inheritdoc cref="T:System.IO.Stream" />
        </member>
        <member name="F:HttpAgent.ProgressFileStream._fileTransferProgress">
            <inheritdoc cref="T:HttpAgent.FileTransferProgress" />
        </member>
        <member name="F:HttpAgent.ProgressFileStream._progressChannel">
            <summary>
                文件传输进度信息的通道
            </summary>
        </member>
        <member name="F:HttpAgent.ProgressFileStream._stopwatch">
            <inheritdoc cref="T:System.Diagnostics.Stopwatch" />
        </member>
        <member name="F:HttpAgent.ProgressFileStream._hasStarted">
            <summary>
                是否已经开始读取或写入
            </summary>
        </member>
        <member name="F:HttpAgent.ProgressFileStream._transferred">
            <summary>
                已传输的数据量
            </summary>
        </member>
        <member name="M:HttpAgent.ProgressFileStream.#ctor(System.IO.Stream,System.String,System.Threading.Channels.Channel{HttpAgent.FileTransferProgress},System.String)">
            <summary>
                <inheritdoc cref="T:HttpAgent.ProgressFileStream" />
            </summary>
            <param name="fileStream">
                <see cref="T:System.IO.Stream" />
            </param>
            <param name="filePath">文件路径或文件的名称</param>
            <param name="progressChannel">文件传输进度信息的通道</param>
            <param name="fileName">文件的名称</param>
        </member>
        <member name="P:HttpAgent.ProgressFileStream.CanRead">
            <inheritdoc />
        </member>
        <member name="P:HttpAgent.ProgressFileStream.CanSeek">
            <inheritdoc />
        </member>
        <member name="P:HttpAgent.ProgressFileStream.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:HttpAgent.ProgressFileStream.CanTimeout">
            <inheritdoc />
        </member>
        <member name="P:HttpAgent.ProgressFileStream.Length">
            <inheritdoc />
        </member>
        <member name="P:HttpAgent.ProgressFileStream.Position">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.ProgressFileStream.Flush">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.ProgressFileStream.Read(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.ProgressFileStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.ProgressFileStream.SetLength(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.ProgressFileStream.Write(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.ProgressFileStream.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.ProgressFileStream.ReportProgress(System.Int32)">
            <summary>
                报告进度
            </summary>
            <param name="increment">增加的数据量</param>
        </member>
        <member name="M:HttpAgent.ProgressFileStream.EnsureInitialized">
            <summary>
                确保进度信息已初始化
            </summary>
        </member>
        <member name="T:HttpAgent.RateLimitedStream">
            <summary>
                带应用速率限制的流
            </summary>
            <remarks>
                <para>基于令牌桶算法（Token Bucket Algorithm）实现流量控制和速率限制。</para>
                <para>参考文献：https://baike.baidu.com/item/令牌桶算法/6597000。</para>
            </remarks>
        </member>
        <member name="F:HttpAgent.RateLimitedStream.CHUNK_SIZE">
            <summary>
                单次读取或写入操作中处理的最大数据块大小
            </summary>
        </member>
        <member name="F:HttpAgent.RateLimitedStream._bytesPerSecond">
            <summary>
                每秒允许传输的最大字节数
            </summary>
        </member>
        <member name="F:HttpAgent.RateLimitedStream._innerStream">
            <inheritdoc cref="T:System.IO.Stream" />
        </member>
        <member name="F:HttpAgent.RateLimitedStream._lockObject">
            <summary>
                用于同步访问的锁对象
            </summary>
        </member>
        <member name="F:HttpAgent.RateLimitedStream._stopwatch">
            <summary>
                用来计算时间间隔的计时器
            </summary>
        </member>
        <member name="F:HttpAgent.RateLimitedStream._availableTokens">
            <summary>
                当前可用的令牌数量（字节数）
            </summary>
        </member>
        <member name="F:HttpAgent.RateLimitedStream._lastTokenRefillTime">
            <summary>
                上次令牌补充的时间戳
            </summary>
        </member>
        <member name="M:HttpAgent.RateLimitedStream.#ctor(System.IO.Stream,System.Double)">
            <summary>
                <inheritdoc cref="T:HttpAgent.RateLimitedStream" />
            </summary>
            <param name="innerStream">
                <see cref="T:System.IO.Stream" />
            </param>
            <param name="bytesPerSecond">每秒允许传输的最大字节数</param>
        </member>
        <member name="P:HttpAgent.RateLimitedStream.CanRead">
            <inheritdoc />
        </member>
        <member name="P:HttpAgent.RateLimitedStream.CanSeek">
            <inheritdoc />
        </member>
        <member name="P:HttpAgent.RateLimitedStream.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:HttpAgent.RateLimitedStream.CanTimeout">
            <inheritdoc />
        </member>
        <member name="P:HttpAgent.RateLimitedStream.Length">
            <inheritdoc />
        </member>
        <member name="P:HttpAgent.RateLimitedStream.Position">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.RateLimitedStream.Flush">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.RateLimitedStream.Read(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.RateLimitedStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.RateLimitedStream.SetLength(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.RateLimitedStream.Write(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.RateLimitedStream.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.RateLimitedStream.RefillTokens">
            <summary>
                补充令牌的方法
            </summary>
        </member>
        <member name="M:HttpAgent.RateLimitedStream.WaitForTokens(System.Int32)">
            <summary>
                等待直到有足够令牌可用
            </summary>
            <param name="desiredTokens">需要等待的令牌数量</param>
        </member>
        <member name="T:HttpAgent.ServerSentEventsData">
            <summary>
                Server-Sent Events 事件流格式
            </summary>
            <remarks>参考文献：https://developer.mozilla.org/zh-CN/docs/Web/API/Server-sent_events/Using_server-sent_events#%E5%AD%97%E6%AE%B5。</remarks>
        </member>
        <member name="F:HttpAgent.ServerSentEventsData._dataBuffer">
            <summary>
                消息数据构建器
            </summary>
        </member>
        <member name="F:HttpAgent.ServerSentEventsData._cachedData">
            <summary>
                消息数据缓存字段
            </summary>
        </member>
        <member name="M:HttpAgent.ServerSentEventsData.#ctor">
            <summary>
                <inheritdoc cref="T:HttpAgent.ServerSentEventsData" />
            </summary>
        </member>
        <member name="P:HttpAgent.ServerSentEventsData.Event">
            <summary>
                事件类型
            </summary>
            <remarks>
                一个用于标识事件类型的字符串。如果指定了这个字符串，浏览器会将具有指定事件名称的事件分派给相应的监听器；网站源代码应该使用 <c>addEventListener()</c>
                来监听指定的事件。如果一个消息没有指定事件名称，那么 <c>onmessage</c> 处理程序就会被调用。
            </remarks>
        </member>
        <member name="P:HttpAgent.ServerSentEventsData.Data">
            <summary>
                消息
            </summary>
            <remarks>消息的数据字段。当 <c>EventSource</c> 接收到多个以 <c>data</c>: 开头的连续行时，会将它们连接起来，在它们之间插入一个换行符。末尾的换行符会被删除。</remarks>
        </member>
        <member name="P:HttpAgent.ServerSentEventsData.Id">
            <summary>
                事件 ID
            </summary>
            <remarks>事件 ID，会成为当前 <c>EventSource</c> 对象的内部属性“最后一个事件 ID 的属性值。</remarks>
        </member>
        <member name="P:HttpAgent.ServerSentEventsData.Retry">
            <summary>
                重新连接的时间
            </summary>
            <remarks>重新连接的时间。如果与服务器的连接丢失，浏览器将等待指定的时间，然后尝试重新连接。这必须是一个整数，以毫秒为单位指定重新连接的时间。如果指定了一个非整数值，该字段将被忽略。</remarks>
        </member>
        <member name="M:HttpAgent.ServerSentEventsData.AppendData(System.String)">
            <summary>
                追加消息数据
            </summary>
            <param name="value">消息数据</param>
        </member>
        <member name="T:HttpAgent.StressTestHarnessResult">
            <summary>
                压力测试结果
            </summary>
        </member>
        <member name="F:HttpAgent.StressTestHarnessResult._ticksPerMillisecond">
            <summary>
                用于将 <see cref="T:System.Diagnostics.Stopwatch" /> 的 <c>ticks</c> 转换为毫秒
            </summary>
        </member>
        <member name="M:HttpAgent.StressTestHarnessResult.#ctor(System.Int64,System.Double,System.Int64,System.Int64,System.Int64[])">
            <summary>
                <inheritdoc cref="T:HttpAgent.StressTestHarnessResult" />
            </summary>
            <param name="totalRequests">总请求次数</param>
            <param name="totalTimeInSeconds">总用时（秒）</param>
            <param name="successfulRequests">成功请求次数</param>
            <param name="failedRequests">失败请求次数</param>
            <param name="responseTimes">请求的响应时间数组</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="P:HttpAgent.StressTestHarnessResult.TotalRequests">
            <summary>
                总请求次数
            </summary>
        </member>
        <member name="P:HttpAgent.StressTestHarnessResult.TotalTimeInSeconds">
            <summary>
                总用时（秒）
            </summary>
        </member>
        <member name="P:HttpAgent.StressTestHarnessResult.SuccessfulRequests">
            <summary>
                成功请求次数
            </summary>
        </member>
        <member name="P:HttpAgent.StressTestHarnessResult.FailedRequests">
            <summary>
                失败请求次数
            </summary>
        </member>
        <member name="P:HttpAgent.StressTestHarnessResult.QueriesPerSecond">
            <summary>
                每秒查询率 (QPS)
            </summary>
        </member>
        <member name="P:HttpAgent.StressTestHarnessResult.MinResponseTime">
            <summary>
                最小响应时间（毫秒）
            </summary>
        </member>
        <member name="P:HttpAgent.StressTestHarnessResult.MaxResponseTime">
            <summary>
                最大响应时间（毫秒）
            </summary>
        </member>
        <member name="P:HttpAgent.StressTestHarnessResult.AverageResponseTime">
            <summary>
                平均响应时间（毫秒）
            </summary>
        </member>
        <member name="P:HttpAgent.StressTestHarnessResult.Percentile10ResponseTime">
            <summary>
                P10 响应时间（毫秒）
            </summary>
        </member>
        <member name="P:HttpAgent.StressTestHarnessResult.Percentile25ResponseTime">
            <summary>
                P25 响应时间（毫秒）
            </summary>
        </member>
        <member name="P:HttpAgent.StressTestHarnessResult.Percentile50ResponseTime">
            <summary>
                P50 响应时间（毫秒）
            </summary>
        </member>
        <member name="P:HttpAgent.StressTestHarnessResult.Percentile75ResponseTime">
            <summary>
                P75 响应时间（毫秒）
            </summary>
        </member>
        <member name="P:HttpAgent.StressTestHarnessResult.Percentile90ResponseTime">
            <summary>
                P90 响应时间（毫秒）
            </summary>
        </member>
        <member name="P:HttpAgent.StressTestHarnessResult.Percentile99ResponseTime">
            <summary>
                P99 响应时间（毫秒）
            </summary>
        </member>
        <member name="P:HttpAgent.StressTestHarnessResult.Percentile9999ResponseTime">
            <summary>
                P99.99 响应时间（毫秒）
            </summary>
        </member>
        <member name="M:HttpAgent.StressTestHarnessResult.ToString">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.StressTestHarnessResult.CalculateQueriesPerSecond(System.Int64,System.Double)">
            <summary>
                计算每秒查询率 (QPS)
            </summary>
            <param name="totalRequests">总请求次数</param>
            <param name="totalTimeInSeconds">总用时（秒）</param>
        </member>
        <member name="M:HttpAgent.StressTestHarnessResult.CalculateMinMaxAvgResponseTime(System.Int64[],System.Int64)">
            <summary>
                计算最小、最大和平均响应时间（毫秒）
            </summary>
            <param name="responseTimes">每个请求的响应时间数组</param>
            <param name="totalRequests">总请求次数</param>
        </member>
        <member name="M:HttpAgent.StressTestHarnessResult.CalculatePercentiles(System.Int64[])">
            <summary>
                计算各个百分位的响应时间（毫秒）
            </summary>
            <param name="responseTimes">请求的响应时间数组</param>
        </member>
        <member name="M:HttpAgent.StressTestHarnessResult.CalculatePercentile(System.Int64[],System.Double)">
            <summary>
                计算百分位数并转换为毫秒
            </summary>
            <param name="sortedResponseTimes">排序后的请求的响应时间数组</param>
            <param name="percentile">百分位数</param>
            <returns>
                <see cref="T:System.Double" />
            </returns>
        </member>
        <member name="T:HttpAgent.VoidContent">
            <summary>
                用于标识无需接收 HTTP 远程请求返回值
            </summary>
        </member>
        <member name="T:HttpAgent.HttpRemoteOptions">
            <summary>
                HTTP 远程请求选项
            </summary>
        </member>
        <member name="F:HttpAgent.HttpRemoteOptions.JsonSerializerOptionsDefault">
            <summary>
                默认 JSON 序列化配置
            </summary>
            <remarks>参考文献：https://learn.microsoft.com/zh-cn/dotnet/standard/serialization/system-text-json/configure-options。</remarks>
        </member>
        <member name="P:HttpAgent.HttpRemoteOptions.DefaultContentType">
            <summary>
                默认请求内容类型
            </summary>
        </member>
        <member name="P:HttpAgent.HttpRemoteOptions.DefaultFileDownloadDirectory">
            <summary>
                默认文件下载保存目录
            </summary>
        </member>
        <member name="P:HttpAgent.HttpRemoteOptions.ProfilerLogLevel">
            <summary>
                请求分析工具日志级别
            </summary>
            <remarks>默认值为 <see cref="F:Microsoft.Extensions.Logging.LogLevel.Warning" /></remarks>
        </member>
        <member name="P:HttpAgent.HttpRemoteOptions.AllowAutoRedirect">
            <summary>
                指示请求是否应遵循重定向响应
            </summary>
            <remarks>默认值为：<c>true</c>。</remarks>
        </member>
        <member name="P:HttpAgent.HttpRemoteOptions.MaximumAutomaticRedirections">
            <summary>
                请求所遵循的最大重定向数
            </summary>
            <remarks>默认值为：50 次。</remarks>
        </member>
        <member name="P:HttpAgent.HttpRemoteOptions.JsonSerializerOptions">
            <summary>
                JSON 序列化配置
            </summary>
        </member>
        <member name="P:HttpAgent.HttpRemoteOptions.Configuration">
            <summary>
                <inheritdoc cref="T:Microsoft.Extensions.Configuration.IConfiguration" />
            </summary>
            <remarks>支持作为替换 URL 地址中配置模板参数的提供源。</remarks>
        </member>
        <member name="P:HttpAgent.HttpRemoteOptions.HttpDeclarativeExtractors">
            <summary>
                自定义 HTTP 声明式 <see cref="T:HttpAgent.IHttpDeclarativeExtractor" /> 集合提供器
            </summary>
            <value>返回多个包含实现 <see cref="T:HttpAgent.IHttpDeclarativeExtractor" /> 集合的集合。</value>
        </member>
        <member name="P:HttpAgent.HttpRemoteOptions.IsLoggingRegistered">
            <summary>
                指示是否配置（注册）了日志程序
            </summary>
        </member>
        <member name="T:HttpAgent.ByteArrayContentProcessor">
            <summary>
                字节数组内容处理器
            </summary>
        </member>
        <member name="M:HttpAgent.ByteArrayContentProcessor.CanProcess(System.Object,System.String)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.ByteArrayContentProcessor.Process(System.Object,System.String,System.Text.Encoding)">
            <inheritdoc />
        </member>
        <member name="T:HttpAgent.FormUrlEncodedContentProcessor">
            <summary>
                URL 编码的表单内容处理器
            </summary>
        </member>
        <member name="M:HttpAgent.FormUrlEncodedContentProcessor.CanProcess(System.Object,System.String)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.FormUrlEncodedContentProcessor.Process(System.Object,System.String,System.Text.Encoding)">
            <inheritdoc />
        </member>
        <member name="T:HttpAgent.HttpContentProcessorBase">
            <summary>
                <see cref="T:HttpAgent.IHttpContentProcessor" /> 内容处理器基类
            </summary>
        </member>
        <member name="P:HttpAgent.HttpContentProcessorBase.ServiceProvider">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpContentProcessorBase.CanProcess(System.Object,System.String)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpContentProcessorBase.Process(System.Object,System.String,System.Text.Encoding)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpContentProcessorBase.TryProcess(System.Object,System.String,System.Text.Encoding,System.Net.Http.HttpContent@)">
            <summary>
                尝试解析 <see cref="T:System.Net.Http.HttpContent" /> 类型
            </summary>
            <param name="rawContent">原始请求内容</param>
            <param name="contentType">内容类型</param>
            <param name="encoding">内容编码</param>
            <param name="httpContent">
                <see cref="T:System.Net.Http.HttpContent" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpContent" />
            </returns>
        </member>
        <member name="T:HttpAgent.IHttpContentProcessor">
            <summary>
                <see cref="T:System.Net.Http.HttpContent" /> 请求内容处理器
            </summary>
            <remarks>用于将原始请求内容转换成 <see cref="T:System.Net.Http.HttpContent" /> 实例</remarks>
        </member>
        <member name="P:HttpAgent.IHttpContentProcessor.ServiceProvider">
            <summary>
                <inheritdoc cref="T:System.IServiceProvider" />
            </summary>
        </member>
        <member name="M:HttpAgent.IHttpContentProcessor.CanProcess(System.Object,System.String)">
            <summary>
                判断当前处理器是否可以处理指定的内容类型
            </summary>
            <param name="rawContent">原始请求内容</param>
            <param name="contentType">内容类型</param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpContentProcessor.Process(System.Object,System.String,System.Text.Encoding)">
            <summary>
                将原始请求内容转换为 <see cref="T:System.Net.Http.HttpContent" /> 实例
            </summary>
            <param name="rawContent">原始请求内容</param>
            <param name="contentType">内容类型</param>
            <param name="encoding">内容编码</param>
            <returns>
                <see cref="T:System.Net.Http.HttpContent" />
            </returns>
        </member>
        <member name="T:HttpAgent.MessagePackContentProcessor">
            <summary>
                <c>application/msgpack</c> 内容处理器
            </summary>
            <remarks>要使用 <c>application/msgpack</c> 内容处理器需在项目中安装 <c>MessagePack</c> 依赖包。https://www.nuget.org/packages/MessagePack。</remarks>
        </member>
        <member name="F:HttpAgent.MessagePackContentProcessor._serializerCache">
            <summary>
                MessagePack 序列化器委托字典缓存
            </summary>
        </member>
        <member name="F:HttpAgent.MessagePackContentProcessor._messagePackSerializerLazy">
            <summary>
                初始化 MessagePack 序列化器委托
            </summary>
        </member>
        <member name="P:HttpAgent.MessagePackContentProcessor.MessagePackSerializer">
            <summary>
                MessagePack 序列化器委托
            </summary>
        </member>
        <member name="M:HttpAgent.MessagePackContentProcessor.CanProcess(System.Object,System.String)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.MessagePackContentProcessor.Process(System.Object,System.String,System.Text.Encoding)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.MessagePackContentProcessor.CreateSerializerDelegate(System.Reflection.MethodInfo)">
            <summary>
                创建 MessagePack 序列化器委托
            </summary>
            <param name="serializeMethod">
                <see cref="T:System.Reflection.MethodInfo" />
            </param>
            <returns>
                <see cref="T:System.Func`2" />
            </returns>
        </member>
        <member name="T:HttpAgent.MultipartFormDataContentProcessor">
            <summary>
                多部分表单内容数据内容处理器
            </summary>
        </member>
        <member name="M:HttpAgent.MultipartFormDataContentProcessor.CanProcess(System.Object,System.String)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.MultipartFormDataContentProcessor.Process(System.Object,System.String,System.Text.Encoding)">
            <inheritdoc />
        </member>
        <member name="T:HttpAgent.ReadOnlyMemoryContentProcessor">
            <summary>
                <see cref="T:System.ReadOnlyMemory`1" /> 内容处理器
            </summary>
        </member>
        <member name="M:HttpAgent.ReadOnlyMemoryContentProcessor.CanProcess(System.Object,System.String)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.ReadOnlyMemoryContentProcessor.Process(System.Object,System.String,System.Text.Encoding)">
            <inheritdoc />
        </member>
        <member name="T:HttpAgent.StreamContentProcessor">
            <summary>
                流内容处理器
            </summary>
        </member>
        <member name="M:HttpAgent.StreamContentProcessor.CanProcess(System.Object,System.String)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.StreamContentProcessor.Process(System.Object,System.String,System.Text.Encoding)">
            <inheritdoc />
        </member>
        <member name="T:HttpAgent.StringContentForFormUrlEncodedContentProcessor">
            <summary>
                URL 编码的表单内容处理器
            </summary>
            <remarks>
                解决 <see cref="T:System.Net.Http.FormUrlEncodedContent" /> 无法设置编码问题。<see cref="T:System.Net.Http.FormUrlEncodedContent" /> 的编码格式不是 <c>utf-8</c>，而是
                <c>Encoding.Latin1</c>。
            </remarks>
        </member>
        <member name="M:HttpAgent.StringContentForFormUrlEncodedContentProcessor.Process(System.Object,System.String,System.Text.Encoding)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.StringContentForFormUrlEncodedContentProcessor.GetContentString(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
                获取 URL 编码的表单内容格式
            </summary>
            <param name="nameValueCollection">键值对集合</param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:HttpAgent.StringContentForFormUrlEncodedContentProcessor.Encode(System.String)">
            <summary>
                对数据进行 URL 编码
            </summary>
            <param name="data">数据</param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="T:HttpAgent.StringContentProcessor">
            <summary>
                字符串内容处理器
            </summary>
        </member>
        <member name="M:HttpAgent.StringContentProcessor.CanProcess(System.Object,System.String)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.StringContentProcessor.Process(System.Object,System.String,System.Text.Encoding)">
            <inheritdoc />
        </member>
        <member name="T:HttpAgent.HttpRemoteService">
            <summary>
                <inheritdoc cref="T:HttpAgent.IHttpRemoteService" />
            </summary>
            <summary>
                <inheritdoc cref="T:HttpAgent.IHttpRemoteService" />
            </summary>
            <summary>
                <inheritdoc cref="T:HttpAgent.IHttpRemoteService" />
            </summary>
        </member>
        <member name="F:HttpAgent.HttpRemoteService._httpClientFactory">
            <inheritdoc cref="T:System.Net.Http.IHttpClientFactory" />
        </member>
        <member name="F:HttpAgent.HttpRemoteService._httpContentConverterFactory">
            <inheritdoc cref="T:HttpAgent.IHttpContentConverterFactory" />
        </member>
        <member name="F:HttpAgent.HttpRemoteService._httpContentProcessorFactory">
            <inheritdoc cref="T:HttpAgent.IHttpContentProcessorFactory" />
        </member>
        <member name="F:HttpAgent.HttpRemoteService._httpRemoteOptions">
            <inheritdoc cref="T:HttpAgent.HttpRemoteOptions" />
        </member>
        <member name="F:HttpAgent.HttpRemoteService._logger">
            <inheritdoc cref="T:Microsoft.Extensions.Logging.ILogger`1" />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.#ctor(System.IServiceProvider,Microsoft.Extensions.Logging.ILogger{HttpAgent.Logging},System.Net.Http.IHttpClientFactory,HttpAgent.IHttpContentProcessorFactory,HttpAgent.IHttpContentConverterFactory,Microsoft.Extensions.Options.IOptions{HttpAgent.HttpRemoteOptions})">
            <summary>
                <inheritdoc cref="T:HttpAgent.HttpRemoteService" />
            </summary>
            <param name="serviceProvider">
                <see cref="T:System.IServiceProvider" />
            </param>
            <param name="logger">
                <see cref="T:Microsoft.Extensions.Logging.Logger`1" />
            </param>
            <param name="httpClientFactory">
                <see cref="T:System.Net.Http.IHttpClientFactory" />
            </param>
            <param name="httpContentProcessorFactory">
                <see cref="T:HttpAgent.IHttpContentProcessorFactory" />
            </param>
            <param name="httpContentConverterFactory">
                <see cref="T:HttpAgent.IHttpContentConverterFactory" />
            </param>
            <param name="httpRemoteOptions">
                <see cref="T:Microsoft.Extensions.Options.IOptions`1" />
            </param>
        </member>
        <member name="P:HttpAgent.HttpRemoteService.ServiceProvider">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Send(HttpAgent.HttpRequestBuilder,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Send(HttpAgent.HttpRequestBuilder,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.SendAsync(HttpAgent.HttpRequestBuilder,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.SendAsync(HttpAgent.HttpRequestBuilder,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.SendAs``1(HttpAgent.HttpRequestBuilder,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.SendAs``1(HttpAgent.HttpRequestBuilder,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.SendAsString(HttpAgent.HttpRequestBuilder,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.SendAsString(HttpAgent.HttpRequestBuilder,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.SendAsByteArray(HttpAgent.HttpRequestBuilder,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.SendAsByteArray(HttpAgent.HttpRequestBuilder,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.SendAsStream(HttpAgent.HttpRequestBuilder,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.SendAsStream(HttpAgent.HttpRequestBuilder,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.SendAsAsync``1(HttpAgent.HttpRequestBuilder,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.SendAsAsync``1(HttpAgent.HttpRequestBuilder,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.SendAsStringAsync(HttpAgent.HttpRequestBuilder,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.SendAsStringAsync(HttpAgent.HttpRequestBuilder,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.SendAsByteArrayAsync(HttpAgent.HttpRequestBuilder,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.SendAsByteArrayAsync(HttpAgent.HttpRequestBuilder,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.SendAsStreamAsync(HttpAgent.HttpRequestBuilder,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.SendAsStreamAsync(HttpAgent.HttpRequestBuilder,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.SendAs(System.Type,HttpAgent.HttpRequestBuilder,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.SendAs(System.Type,HttpAgent.HttpRequestBuilder,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.SendAsAsync(System.Type,HttpAgent.HttpRequestBuilder,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.SendAsAsync(System.Type,HttpAgent.HttpRequestBuilder,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Send``1(HttpAgent.HttpRequestBuilder,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Send``1(HttpAgent.HttpRequestBuilder,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.SendAsync``1(HttpAgent.HttpRequestBuilder,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.SendAsync``1(HttpAgent.HttpRequestBuilder,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.SendCoreAsync(HttpAgent.HttpRequestBuilder,System.Net.Http.HttpCompletionOption,System.Func{System.Net.Http.HttpClient,System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}},System.Func{System.Net.Http.HttpClient,System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken,System.Net.Http.HttpResponseMessage},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP 远程请求并处理 <see cref="T:System.Net.Http.HttpResponseMessage" /> 实例
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="sendAsyncMethod">异步发送 HTTP 请求的委托</param>
            <param name="sendMethod">同步发送 HTTP 请求的委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Tuple`2" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRemoteService.HandlePreSendRequest(HttpAgent.HttpRequestBuilder,HttpAgent.IHttpRequestEventHandler,System.Net.Http.HttpRequestMessage)">
            <summary>
                处理发送 HTTP 请求之前
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </param>
            <param name="requestEventHandler">
                <see cref="T:HttpAgent.IHttpRequestEventHandler" />
            </param>
            <param name="httpRequestMessage">
                <see cref="T:System.Net.Http.HttpRequestMessage" />
            </param>
        </member>
        <member name="M:HttpAgent.HttpRemoteService.HandlePostReceiveResponse(HttpAgent.HttpRequestBuilder,HttpAgent.IHttpRequestEventHandler,System.Net.Http.HttpResponseMessage)">
            <summary>
                处理收到 HTTP 响应之后
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </param>
            <param name="requestEventHandler">
                <see cref="T:HttpAgent.IHttpRequestEventHandler" />
            </param>
            <param name="httpResponseMessage">
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </param>
        </member>
        <member name="M:HttpAgent.HttpRemoteService.HandleRequestFailed(HttpAgent.HttpRequestBuilder,HttpAgent.IHttpRequestEventHandler,System.Exception,System.Net.Http.HttpResponseMessage)">
            <summary>
                处理发送 HTTP 请求发生异常
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </param>
            <param name="requestEventHandler">
                <see cref="T:HttpAgent.IHttpRequestEventHandler" />
            </param>
            <param name="e">
                <see cref="T:System.Exception" />
            </param>
            <param name="httpResponseMessage">
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </param>
        </member>
        <member name="M:HttpAgent.HttpRemoteService.CreateHttpClientWithDefaults(HttpAgent.HttpRequestBuilder)">
            <summary>
                创建带有默认值的 <see cref="T:System.Net.Http.HttpClient" /> 实例
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </param>
            <returns>
                <see cref="T:HttpAgent.HttpClientPooling" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRemoteService.CreateHttpClientPooling(HttpAgent.HttpRequestBuilder)">
            <summary>
                创建 <see cref="T:System.Net.Http.HttpClient" /> 实例管理器
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </param>
            <returns>
                <see cref="T:HttpAgent.HttpClientPooling" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRemoteService.AddDefaultUserAgentHeader(System.Net.Http.HttpClient)">
            <summary>
                向 <see cref="T:System.Net.Http.HttpClient" /> 添加默认的 <c>User-Agent</c> 标头
            </summary>
            <remarks>解决某些服务器可能需要这个头部信息才能正确响应请求。</remarks>
            <param name="httpClient">
                <see cref="T:System.Net.Http.HttpClient" />
            </param>
        </member>
        <member name="M:HttpAgent.HttpRemoteService.CheckContentLengthWithinLimit(HttpAgent.HttpRequestBuilder,System.Net.Http.HttpResponseMessage)">
            <summary>
                检查 HTTP 响应内容长度是否在设定的最大缓冲区大小限制内
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </param>
            <param name="httpResponseMessage">
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </param>
            <exception cref="T:System.Net.Http.HttpRequestException"></exception>
        </member>
        <member name="M:HttpAgent.HttpRemoteService.InvokeStatusCodeHandlers(HttpAgent.HttpRequestBuilder,System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)">
            <summary>
                调用状态码处理程序
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </param>
            <param name="httpResponseMessage">
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:HttpAgent.HttpRemoteService.InvokeStatusCodeHandlersAsync(HttpAgent.HttpRequestBuilder,System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)">
            <summary>
                调用状态码处理程序
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </param>
            <param name="httpResponseMessage">
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:HttpAgent.HttpRemoteService.IsMatchedStatusCode(System.Object,System.Int32)">
            <summary>
                检查状态码代码是否匹配响应状态码
            </summary>
            <param name="code">状态码代码</param>
            <param name="statusCode">响应状态码</param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRemoteService.DynamicCreateHttpRemoteResult(System.Type,System.Net.Http.HttpResponseMessage,System.Object,System.Int64)">
            <summary>
                动态创建 <see cref="T:HttpAgent.HttpRemoteResult`1" /> 实例
            </summary>
            <param name="httpRemoteResultType"><see cref="T:HttpAgent.HttpRemoteResult`1" /> 类型</param>
            <param name="httpResponseMessage">
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </param>
            <param name="result"><see cref="T:HttpAgent.HttpRemoteResult`1" /> 泛型类型的实例</param>
            <param name="requestDuration">请求耗时（毫秒）</param>
            <returns>
                <see cref="T:System.Object" />
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:HttpAgent.HttpRemoteService.StatusCodeRangeRegex">
            <remarks>
            Pattern:<br/>
            <code>^\\d+-\\d+$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a Unicode digit atomically at least once.<br/>
            ○ Match '-'.<br/>
            ○ Match a Unicode digit atomically at least once.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:HttpAgent.HttpRemoteService.StatusCodeCompareRegex">
            <remarks>
            Pattern:<br/>
            <code>^([&lt;&gt;]=?|=|&gt;|&lt;)(\\d+)$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ 1st capture group.<br/>
                ○ Match with 2 alternative expressions.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match a character in the set [&lt;&gt;].<br/>
                        ○ Match '=' atomically, optionally.<br/>
                    ○ Match a character in the set [&lt;-&gt;].<br/>
            ○ 2nd capture group.<br/>
                ○ Match a Unicode digit atomically at least once.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:HttpAgent.HttpRemoteService.DownloadFile(System.String,System.String,System.Func{HttpAgent.FileTransferProgress,System.Threading.Tasks.Task},HttpAgent.FileExistsBehavior,System.Action{HttpAgent.HttpFileDownloadBuilder},System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.DownloadFileAsync(System.String,System.String,System.Func{HttpAgent.FileTransferProgress,System.Threading.Tasks.Task},HttpAgent.FileExistsBehavior,System.Action{HttpAgent.HttpFileDownloadBuilder},System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Send(HttpAgent.HttpFileDownloadBuilder,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.SendAsync(HttpAgent.HttpFileDownloadBuilder,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.UploadFile(System.String,System.String,System.String,System.Func{HttpAgent.FileTransferProgress,System.Threading.Tasks.Task},System.String,System.Action{HttpAgent.HttpFileUploadBuilder},System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.UploadFileAsync(System.String,System.String,System.String,System.Func{HttpAgent.FileTransferProgress,System.Threading.Tasks.Task},System.String,System.Action{HttpAgent.HttpFileUploadBuilder},System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Send(HttpAgent.HttpFileUploadBuilder,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.SendAsync(HttpAgent.HttpFileUploadBuilder,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.ServerSentEvents(System.String,System.Func{HttpAgent.ServerSentEventsData,System.Threading.Tasks.Task},System.Action{HttpAgent.HttpServerSentEventsBuilder},System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.ServerSentEventsAsync(System.String,System.Func{HttpAgent.ServerSentEventsData,System.Threading.Tasks.Task},System.Action{HttpAgent.HttpServerSentEventsBuilder},System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Send(HttpAgent.HttpServerSentEventsBuilder,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.SendAsync(HttpAgent.HttpServerSentEventsBuilder,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.StressTestHarness(System.String,System.Int32,System.Action{HttpAgent.HttpStressTestHarnessBuilder},System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.StressTestHarnessAsync(System.String,System.Int32,System.Action{HttpAgent.HttpStressTestHarnessBuilder},System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Send(HttpAgent.HttpStressTestHarnessBuilder,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.SendAsync(HttpAgent.HttpStressTestHarnessBuilder,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.LongPolling(System.String,System.Func{System.Net.Http.HttpResponseMessage,System.Threading.Tasks.Task},System.Action{HttpAgent.HttpLongPollingBuilder},System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.LongPollingAsync(System.String,System.Func{System.Net.Http.HttpResponseMessage,System.Threading.Tasks.Task},System.Action{HttpAgent.HttpLongPollingBuilder},System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Send(HttpAgent.HttpLongPollingBuilder,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.SendAsync(HttpAgent.HttpLongPollingBuilder,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Declarative(System.Reflection.MethodInfo,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.DeclarativeAsync``1(System.Reflection.MethodInfo,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.SendAs(HttpAgent.HttpDeclarativeBuilder)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.SendAsAsync``1(HttpAgent.HttpDeclarativeBuilder)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Get(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Get(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.GetAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.GetAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.GetAs``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.GetAs``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.GetAsAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.GetAsAsync``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Get``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Get``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.GetAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.GetAsync``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.GetAsString(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.GetAsStream(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.GetAsByteArray(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.GetAsString(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.GetAsStream(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.GetAsByteArray(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.GetAsStringAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.GetAsStreamAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.GetAsByteArrayAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.GetAsStringAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.GetAsStreamAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.GetAsByteArrayAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Put(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Put(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PutAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PutAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PutAs``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PutAs``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PutAsAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PutAsAsync``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Put``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Put``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PutAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PutAsync``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PutAsString(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PutAsStream(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PutAsByteArray(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PutAsString(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PutAsStream(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PutAsByteArray(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PutAsStringAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PutAsStreamAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PutAsByteArrayAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PutAsStringAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PutAsStreamAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PutAsByteArrayAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Post(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Post(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PostAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PostAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PostAs``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PostAs``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PostAsAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PostAsAsync``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Post``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Post``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PostAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PostAsync``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PostAsString(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PostAsStream(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PostAsByteArray(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PostAsString(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PostAsStream(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PostAsByteArray(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PostAsStringAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PostAsStreamAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PostAsByteArrayAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PostAsStringAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PostAsStreamAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PostAsByteArrayAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Delete(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Delete(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.DeleteAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.DeleteAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.DeleteAs``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.DeleteAs``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.DeleteAsAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.DeleteAsAsync``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Delete``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Delete``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.DeleteAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.DeleteAsync``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.DeleteAsString(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.DeleteAsStream(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.DeleteAsByteArray(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.DeleteAsString(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.DeleteAsStream(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.DeleteAsByteArray(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.DeleteAsStringAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.DeleteAsStreamAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.DeleteAsByteArrayAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.DeleteAsStringAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.DeleteAsStreamAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.DeleteAsByteArrayAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Head(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Head(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.HeadAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.HeadAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.HeadAs``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.HeadAs``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.HeadAsAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.HeadAsAsync``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Head``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Head``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.HeadAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.HeadAsync``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.HeadAsString(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.HeadAsStream(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.HeadAsByteArray(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.HeadAsString(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.HeadAsStream(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.HeadAsByteArray(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.HeadAsStringAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.HeadAsStreamAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.HeadAsByteArrayAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.HeadAsStringAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.HeadAsStreamAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.HeadAsByteArrayAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Options(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Options(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.OptionsAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.OptionsAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.OptionsAs``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.OptionsAs``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.OptionsAsAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.OptionsAsAsync``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Options``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Options``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.OptionsAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.OptionsAsync``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.OptionsAsString(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.OptionsAsStream(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.OptionsAsByteArray(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.OptionsAsString(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.OptionsAsStream(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.OptionsAsByteArray(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.OptionsAsStringAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.OptionsAsStreamAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.OptionsAsByteArrayAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.OptionsAsStringAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.OptionsAsStreamAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.OptionsAsByteArrayAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Trace(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Trace(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.TraceAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.TraceAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.TraceAs``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.TraceAs``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.TraceAsAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.TraceAsAsync``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Trace``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Trace``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.TraceAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.TraceAsync``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.TraceAsString(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.TraceAsStream(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.TraceAsByteArray(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.TraceAsString(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.TraceAsStream(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.TraceAsByteArray(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.TraceAsStringAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.TraceAsStreamAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.TraceAsByteArrayAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.TraceAsStringAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.TraceAsStreamAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.TraceAsByteArrayAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Patch(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Patch(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PatchAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PatchAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PatchAs``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PatchAs``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PatchAsAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PatchAsAsync``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Patch``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Patch``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PatchAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PatchAsync``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PatchAsString(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PatchAsStream(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PatchAsByteArray(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PatchAsString(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PatchAsStream(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PatchAsByteArray(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PatchAsStringAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PatchAsStreamAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PatchAsByteArrayAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PatchAsStringAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PatchAsStreamAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PatchAsByteArrayAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:HttpAgent.IHttpRemoteService">
            <summary>
                HTTP 远程请求服务
            </summary>
            <summary>
                HTTP 远程请求服务
            </summary>
            <summary>
                HTTP 远程请求服务
            </summary>
        </member>
        <member name="P:HttpAgent.IHttpRemoteService.ServiceProvider">
            <summary>
                <inheritdoc cref="T:System.IServiceProvider" />
            </summary>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Send(HttpAgent.HttpRequestBuilder,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP 远程请求
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Send(HttpAgent.HttpRequestBuilder,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP 远程请求
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.SendAsync(HttpAgent.HttpRequestBuilder,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP 远程请求
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.SendAsync(HttpAgent.HttpRequestBuilder,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP 远程请求
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.SendAs``1(HttpAgent.HttpRequestBuilder,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP 远程请求
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <typeparamref name="TResult" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.SendAs``1(HttpAgent.HttpRequestBuilder,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP 远程请求
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <typeparamref name="TResult" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.SendAsString(HttpAgent.HttpRequestBuilder,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP 远程请求
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.SendAsString(HttpAgent.HttpRequestBuilder,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP 远程请求
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.SendAsByteArray(HttpAgent.HttpRequestBuilder,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP 远程请求
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.SendAsByteArray(HttpAgent.HttpRequestBuilder,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP 远程请求
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.SendAsStream(HttpAgent.HttpRequestBuilder,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP 远程请求
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.SendAsStream(HttpAgent.HttpRequestBuilder,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP 远程请求
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.SendAsAsync``1(HttpAgent.HttpRequestBuilder,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP 远程请求
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <typeparamref name="TResult" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.SendAsAsync``1(HttpAgent.HttpRequestBuilder,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP 远程请求
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <typeparamref name="TResult" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.SendAsStringAsync(HttpAgent.HttpRequestBuilder,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP 远程请求
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.SendAsStringAsync(HttpAgent.HttpRequestBuilder,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP 远程请求
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.SendAsByteArrayAsync(HttpAgent.HttpRequestBuilder,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP 远程请求
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.SendAsByteArrayAsync(HttpAgent.HttpRequestBuilder,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP 远程请求
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.SendAsStreamAsync(HttpAgent.HttpRequestBuilder,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP 远程请求
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.SendAsStreamAsync(HttpAgent.HttpRequestBuilder,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP 远程请求
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.SendAs(System.Type,HttpAgent.HttpRequestBuilder,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP 远程请求
            </summary>
            <param name="resultType">转换的目标类型</param>
            <param name="httpRequestBuilder">
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Object" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.SendAs(System.Type,HttpAgent.HttpRequestBuilder,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP 远程请求
            </summary>
            <param name="resultType">转换的目标类型</param>
            <param name="httpRequestBuilder">
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Object" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.SendAsAsync(System.Type,HttpAgent.HttpRequestBuilder,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP 远程请求
            </summary>
            <param name="resultType">转换的目标类型</param>
            <param name="httpRequestBuilder">
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Object" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.SendAsAsync(System.Type,HttpAgent.HttpRequestBuilder,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP 远程请求
            </summary>
            <param name="resultType">转换的目标类型</param>
            <param name="httpRequestBuilder">
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Object" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Send``1(HttpAgent.HttpRequestBuilder,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP 远程请求
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Send``1(HttpAgent.HttpRequestBuilder,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP 远程请求
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.SendAsync``1(HttpAgent.HttpRequestBuilder,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP 远程请求
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.SendAsync``1(HttpAgent.HttpRequestBuilder,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP 远程请求
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.DownloadFile(System.String,System.String,System.Func{HttpAgent.FileTransferProgress,System.Threading.Tasks.Task},HttpAgent.FileExistsBehavior,System.Action{HttpAgent.HttpFileDownloadBuilder},System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                下载文件
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="destinationPath">文件保存的目标路径</param>
            <param name="onProgressChanged">用于传输进度发生变化时执行的委托</param>
            <param name="fileExistsBehavior">
                <see cref="T:HttpAgent.FileExistsBehavior" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="requestConfigure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.DownloadFileAsync(System.String,System.String,System.Func{HttpAgent.FileTransferProgress,System.Threading.Tasks.Task},HttpAgent.FileExistsBehavior,System.Action{HttpAgent.HttpFileDownloadBuilder},System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                下载文件
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="destinationPath">文件保存的目标路径</param>
            <param name="onProgressChanged">用于传输进度发生变化时执行的委托</param>
            <param name="fileExistsBehavior">
                <see cref="T:HttpAgent.FileExistsBehavior" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="requestConfigure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Threading.Tasks.Task" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Send(HttpAgent.HttpFileDownloadBuilder,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                下载文件
            </summary>
            <param name="httpFileDownloadBuilder">
                <see cref="T:HttpAgent.HttpFileDownloadBuilder" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.SendAsync(HttpAgent.HttpFileDownloadBuilder,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                下载文件
            </summary>
            <param name="httpFileDownloadBuilder">
                <see cref="T:HttpAgent.HttpFileDownloadBuilder" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Threading.Tasks.Task" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.UploadFile(System.String,System.String,System.String,System.Func{HttpAgent.FileTransferProgress,System.Threading.Tasks.Task},System.String,System.Action{HttpAgent.HttpFileUploadBuilder},System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                上传文件
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="filePath">文件路径</param>
            <param name="name">表单名称；默认值为 <c>file</c>。</param>
            <param name="onProgressChanged">用于传输进度发生变化时执行的委托</param>
            <param name="fileName">文件的名称</param>
            <param name="configure">自定义配置委托</param>
            <param name="requestConfigure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.UploadFileAsync(System.String,System.String,System.String,System.Func{HttpAgent.FileTransferProgress,System.Threading.Tasks.Task},System.String,System.Action{HttpAgent.HttpFileUploadBuilder},System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                上传文件
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="filePath">文件路径</param>
            <param name="name">表单名称；默认值为 <c>file</c>。</param>
            <param name="onProgressChanged">用于传输进度发生变化时执行的委托</param>
            <param name="fileName">文件的名称</param>
            <param name="configure">自定义配置委托</param>
            <param name="requestConfigure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Threading.Tasks.Task`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Send(HttpAgent.HttpFileUploadBuilder,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                上传文件
            </summary>
            <param name="httpFileUploadBuilder">
                <see cref="T:HttpAgent.HttpFileUploadBuilder" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.SendAsync(HttpAgent.HttpFileUploadBuilder,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                上传文件
            </summary>
            <param name="httpFileUploadBuilder">
                <see cref="T:HttpAgent.HttpFileUploadBuilder" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Threading.Tasks.Task`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.ServerSentEvents(System.String,System.Func{HttpAgent.ServerSentEventsData,System.Threading.Tasks.Task},System.Action{HttpAgent.HttpServerSentEventsBuilder},System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 Server-Sent Events 请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="onMessage">用于在从事件源接收到数据时的操作</param>
            <param name="configure">自定义配置委托</param>
            <param name="requestConfigure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.ServerSentEventsAsync(System.String,System.Func{HttpAgent.ServerSentEventsData,System.Threading.Tasks.Task},System.Action{HttpAgent.HttpServerSentEventsBuilder},System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 Server-Sent Events 请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="onMessage">用于在从事件源接收到数据时的操作</param>
            <param name="configure">自定义配置委托</param>
            <param name="requestConfigure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Threading.Tasks.Task" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Send(HttpAgent.HttpServerSentEventsBuilder,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 Server-Sent Events 请求
            </summary>
            <param name="httpServerSentEventsBuilder">
                <see cref="T:HttpAgent.HttpServerSentEventsBuilder" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.SendAsync(HttpAgent.HttpServerSentEventsBuilder,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 Server-Sent Events 请求
            </summary>
            <param name="httpServerSentEventsBuilder">
                <see cref="T:HttpAgent.HttpServerSentEventsBuilder" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Threading.Tasks.Task" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.StressTestHarness(System.String,System.Int32,System.Action{HttpAgent.HttpStressTestHarnessBuilder},System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                压力测试
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="numberOfRequests">并发请求数量，默认值为：100。</param>
            <param name="configure">自定义配置委托</param>
            <param name="requestConfigure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:HttpAgent.StressTestHarnessResult" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.StressTestHarnessAsync(System.String,System.Int32,System.Action{HttpAgent.HttpStressTestHarnessBuilder},System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                压力测试
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="numberOfRequests">并发请求数量，默认值为：100。</param>
            <param name="configure">自定义配置委托</param>
            <param name="requestConfigure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Threading.Tasks.Task`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Send(HttpAgent.HttpStressTestHarnessBuilder,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                压力测试
            </summary>
            <param name="httpStressTestHarnessBuilder">
                <see cref="T:HttpAgent.HttpStressTestHarnessBuilder" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:HttpAgent.StressTestHarnessResult" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.SendAsync(HttpAgent.HttpStressTestHarnessBuilder,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                压力测试
            </summary>
            <param name="httpStressTestHarnessBuilder">
                <see cref="T:HttpAgent.HttpStressTestHarnessBuilder" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Threading.Tasks.Task`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.LongPolling(System.String,System.Func{System.Net.Http.HttpResponseMessage,System.Threading.Tasks.Task},System.Action{HttpAgent.HttpLongPollingBuilder},System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送长轮询请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="onDataReceived">用于接收服务器返回 <c>200~299</c> 状态码的数据的操作</param>
            <param name="configure">自定义配置委托</param>
            <param name="requestConfigure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.LongPollingAsync(System.String,System.Func{System.Net.Http.HttpResponseMessage,System.Threading.Tasks.Task},System.Action{HttpAgent.HttpLongPollingBuilder},System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送长轮询请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="onDataReceived">用于接收服务器返回 <c>200~299</c> 状态码的数据的操作</param>
            <param name="configure">自定义配置委托</param>
            <param name="requestConfigure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Threading.Tasks.Task" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Send(HttpAgent.HttpLongPollingBuilder,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送长轮询请求
            </summary>
            <param name="httpLongPollingBuilder">
                <see cref="T:HttpAgent.HttpLongPollingBuilder" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.SendAsync(HttpAgent.HttpLongPollingBuilder,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送长轮询请求
            </summary>
            <param name="httpLongPollingBuilder">
                <see cref="T:HttpAgent.HttpLongPollingBuilder" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Threading.Tasks.Task" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Declarative(System.Reflection.MethodInfo,System.Object[])">
            <summary>
                发送 HTTP 声明式请求
            </summary>
            <remarks>仅支持同步方法。</remarks>
            <param name="method">被调用方法</param>
            <param name="args">被调用方法的参数值数组</param>
            <returns>
                <see cref="T:System.Object" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.DeclarativeAsync``1(System.Reflection.MethodInfo,System.Object[])">
            <summary>
                发送 HTTP 声明式请求
            </summary>
            <remarks>仅支持异步方法。若无返回值则泛型传入 <see cref="T:HttpAgent.VoidContent" /> 类型。</remarks>
            <param name="method">被调用方法</param>
            <param name="args">被调用方法的参数值数组</param>
            <typeparam name="T">转换的目标类型</typeparam>
            <returns>
                <typeparamref name="T" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.SendAs(HttpAgent.HttpDeclarativeBuilder)">
            <summary>
                发送 HTTP 声明式请求
            </summary>
            <remarks>仅支持同步方法。</remarks>
            <param name="httpDeclarativeBuilder">
                <see cref="T:HttpAgent.HttpDeclarativeBuilder" />
            </param>
            <returns>
                <see cref="T:System.Object" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.SendAsAsync``1(HttpAgent.HttpDeclarativeBuilder)">
            <summary>
                发送 HTTP 声明式请求
            </summary>
            <remarks>仅支持异步方法。若无返回值则泛型传入 <see cref="T:HttpAgent.VoidContent" /> 类型。</remarks>
            <param name="httpDeclarativeBuilder">
                <see cref="T:HttpAgent.HttpDeclarativeBuilder" />
            </param>
            <typeparam name="T">转换的目标类型</typeparam>
            <returns>
                <typeparamref name="T" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Get(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP GET 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Get(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP GET 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.GetAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP GET 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.GetAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP GET 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.GetAs``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP GET 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.GetAs``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP GET 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.GetAsAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP GET 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.GetAsAsync``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP GET 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Get``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP GET 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Get``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP GET 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.GetAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP GET 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.GetAsync``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP GET 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.GetAsString(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP GET 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.GetAsStream(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP GET 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.GetAsByteArray(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP GET 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.GetAsString(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP GET 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.GetAsStream(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP GET 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.GetAsByteArray(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP GET 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.GetAsStringAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP GET 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.GetAsStreamAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP GET 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.GetAsByteArrayAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP GET 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.GetAsStringAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP GET 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.GetAsStreamAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP GET 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.GetAsByteArrayAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP GET 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Put(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PUT 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Put(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PUT 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PutAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PUT 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PutAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PUT 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PutAs``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PUT 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PutAs``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PUT 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PutAsAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PUT 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PutAsAsync``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PUT 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Put``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PUT 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Put``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PUT 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PutAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PUT 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PutAsync``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PUT 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PutAsString(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PUT 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PutAsStream(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PUT 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PutAsByteArray(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PUT 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PutAsString(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PUT 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PutAsStream(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PUT 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PutAsByteArray(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PUT 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PutAsStringAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PUT 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PutAsStreamAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PUT 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PutAsByteArrayAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PUT 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PutAsStringAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PUT 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PutAsStreamAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PUT 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PutAsByteArrayAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PUT 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Post(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP POST 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Post(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP POST 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PostAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP POST 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PostAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP POST 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PostAs``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP POST 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PostAs``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP POST 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PostAsAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP POST 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PostAsAsync``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP POST 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Post``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP POST 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Post``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP POST 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PostAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP POST 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PostAsync``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP POST 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PostAsString(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP POST 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PostAsStream(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP POST 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PostAsByteArray(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP POST 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PostAsString(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP POST 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PostAsStream(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP POST 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PostAsByteArray(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP POST 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PostAsStringAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP POST 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PostAsStreamAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP POST 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PostAsByteArrayAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP POST 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PostAsStringAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP POST 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PostAsStreamAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP POST 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PostAsByteArrayAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP POST 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Delete(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP DELETE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Delete(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP DELETE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.DeleteAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP DELETE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.DeleteAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP DELETE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.DeleteAs``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP DELETE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.DeleteAs``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP DELETE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.DeleteAsAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP DELETE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.DeleteAsAsync``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP DELETE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Delete``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP DELETE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Delete``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP DELETE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.DeleteAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP DELETE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.DeleteAsync``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP DELETE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.DeleteAsString(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP DELETE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.DeleteAsStream(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP DELETE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.DeleteAsByteArray(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP DELETE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.DeleteAsString(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP DELETE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.DeleteAsStream(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP DELETE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.DeleteAsByteArray(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP DELETE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.DeleteAsStringAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP DELETE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.DeleteAsStreamAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP DELETE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.DeleteAsByteArrayAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP DELETE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.DeleteAsStringAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP DELETE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.DeleteAsStreamAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP DELETE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.DeleteAsByteArrayAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP DELETE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Head(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP HEAD 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Head(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP HEAD 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.HeadAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP HEAD 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.HeadAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP HEAD 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.HeadAs``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP HEAD 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.HeadAs``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP HEAD 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.HeadAsAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP HEAD 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.HeadAsAsync``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP HEAD 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Head``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP HEAD 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Head``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP HEAD 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.HeadAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP HEAD 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.HeadAsync``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP HEAD 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.HeadAsString(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP HEAD 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.HeadAsStream(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP HEAD 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.HeadAsByteArray(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP HEAD 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.HeadAsString(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP HEAD 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.HeadAsStream(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP HEAD 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.HeadAsByteArray(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP HEAD 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.HeadAsStringAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP HEAD 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.HeadAsStreamAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP HEAD 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.HeadAsByteArrayAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP HEAD 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.HeadAsStringAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP HEAD 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.HeadAsStreamAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP HEAD 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.HeadAsByteArrayAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP HEAD 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Options(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP OPTIONS 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Options(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP OPTIONS 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.OptionsAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP OPTIONS 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.OptionsAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP OPTIONS 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.OptionsAs``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP OPTIONS 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.OptionsAs``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP OPTIONS 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.OptionsAsAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP OPTIONS 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.OptionsAsAsync``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP OPTIONS 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Options``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP OPTIONS 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Options``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP OPTIONS 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.OptionsAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP OPTIONS 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.OptionsAsync``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP OPTIONS 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.OptionsAsString(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP OPTIONS 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.OptionsAsStream(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP OPTIONS 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.OptionsAsByteArray(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP OPTIONS 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.OptionsAsString(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP OPTIONS 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.OptionsAsStream(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP OPTIONS 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.OptionsAsByteArray(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP OPTIONS 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.OptionsAsStringAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP OPTIONS 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.OptionsAsStreamAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP OPTIONS 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.OptionsAsByteArrayAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP OPTIONS 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.OptionsAsStringAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP OPTIONS 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.OptionsAsStreamAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP OPTIONS 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.OptionsAsByteArrayAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP OPTIONS 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Trace(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP TRACE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Trace(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP TRACE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.TraceAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP TRACE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.TraceAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP TRACE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.TraceAs``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP TRACE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.TraceAs``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP TRACE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.TraceAsAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP TRACE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.TraceAsAsync``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP TRACE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Trace``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP TRACE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Trace``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP TRACE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.TraceAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP TRACE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.TraceAsync``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP TRACE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.TraceAsString(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP TRACE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.TraceAsStream(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP TRACE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.TraceAsByteArray(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP TRACE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.TraceAsString(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP TRACE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.TraceAsStream(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP TRACE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.TraceAsByteArray(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP TRACE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.TraceAsStringAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP TRACE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.TraceAsStreamAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP TRACE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.TraceAsByteArrayAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP TRACE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.TraceAsStringAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP TRACE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.TraceAsStreamAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP TRACE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.TraceAsByteArrayAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP TRACE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Patch(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PATCH 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Patch(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PATCH 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PatchAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PATCH 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PatchAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PATCH 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PatchAs``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PATCH 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PatchAs``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PATCH 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PatchAsAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PATCH 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PatchAsAsync``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PATCH 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Patch``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PATCH 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Patch``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PATCH 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PatchAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PATCH 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PatchAsync``1(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PATCH 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PatchAsString(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PATCH 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PatchAsStream(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PATCH 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PatchAsByteArray(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PATCH 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PatchAsString(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PATCH 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PatchAsStream(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PATCH 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PatchAsByteArray(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PATCH 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PatchAsStringAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PATCH 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PatchAsStreamAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PATCH 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PatchAsByteArrayAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PATCH 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PatchAsStringAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PATCH 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PatchAsStreamAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PATCH 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PatchAsByteArrayAsync(System.String,System.Net.Http.HttpCompletionOption,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PATCH 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <c>byte[]</c>
            </returns>
        </member>
        <member name="T:HttpAgent.HttpRemoteUtility">
            <summary>
                提供 HTTP 远程请求实用方法
            </summary>
        </member>
        <member name="P:HttpAgent.HttpRemoteUtility.AllSslProtocols">
            <summary>
                获取所有支持的 SslProtocols
            </summary>
        </member>
        <member name="P:HttpAgent.HttpRemoteUtility.IgnoreSslErrors">
            <summary>
                忽略 SSL 证书验证
            </summary>
        </member>
        <member name="M:HttpAgent.HttpRemoteUtility.IPv4ConnectCallback(System.Net.Http.SocketsHttpConnectionContext,System.Threading.CancellationToken)">
            <summary>
                获取使用 IPv4 连接到服务器的回调
            </summary>
            <param name="context">
                <see cref="T:System.Net.Http.SocketsHttpConnectionContext" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRemoteUtility.IPv6ConnectCallback(System.Net.Http.SocketsHttpConnectionContext,System.Threading.CancellationToken)">
            <summary>
                获取使用 IPv6 连接到服务器的回调
            </summary>
            <param name="context">
                <see cref="T:System.Net.Http.SocketsHttpConnectionContext" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRemoteUtility.UnspecifiedConnectCallback(System.Net.Http.SocketsHttpConnectionContext,System.Threading.CancellationToken)">
            <summary>
                获取使用 IPv4 或 IPv6 连接到服务器的回调
            </summary>
            <param name="context">
                <see cref="T:System.Net.Http.SocketsHttpConnectionContext" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRemoteUtility.IPAddressConnectCallback(System.Net.Sockets.AddressFamily,System.Net.Http.SocketsHttpConnectionContext,System.Threading.CancellationToken)">
            <summary>
                获取使用指定 IP 地址类型连接到服务器的回调
            </summary>
            <param name="addressFamily">
                <see cref="T:System.Net.Sockets.AddressFamily" />
            </param>
            <param name="context">
                <see cref="T:System.Net.Http.SocketsHttpConnectionContext" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.IO.Stream" />
            </returns>
        </member>
        <member name="T:HttpAgent.WebSocketBinaryReceiveResult">
            <summary>
                WebSocket 接收的二进制消息的结果类
            </summary>
        </member>
        <member name="M:HttpAgent.WebSocketBinaryReceiveResult.#ctor(System.Int32,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.WebSocketBinaryReceiveResult.#ctor(System.Int32,System.Boolean,System.Nullable{System.Net.WebSockets.WebSocketCloseStatus},System.String)">
            <inheritdoc />
        </member>
        <member name="P:HttpAgent.WebSocketBinaryReceiveResult.Message">
            <summary>
                二进制消息
            </summary>
        </member>
        <member name="T:HttpAgent.WebSocketClient">
            <summary>
                WebSocket 客户端
            </summary>
            <summary>
                WebSocket 客户端
            </summary>
        </member>
        <member name="F:HttpAgent.WebSocketClient._clientWebSocket">
            <inheritdoc cref="T:System.Net.WebSockets.ClientWebSocket" />
        </member>
        <member name="F:HttpAgent.WebSocketClient._messageCancellationTokenSource">
            <summary>
                取消接收服务器消息标记
            </summary>
        </member>
        <member name="F:HttpAgent.WebSocketClient._receiveMessageTask">
            <summary>
                接收服务器消息任务
            </summary>
        </member>
        <member name="M:HttpAgent.WebSocketClient.#ctor(System.String)">
            <summary>
                <inheritdoc cref="T:HttpAgent.WebSocketClient" />
            </summary>
            <param name="serverUri">服务器地址</param>
        </member>
        <member name="M:HttpAgent.WebSocketClient.#ctor(System.Uri)">
            <summary>
                <inheritdoc cref="T:HttpAgent.WebSocketClient" />
            </summary>
            <param name="serverUri">服务器地址</param>
        </member>
        <member name="M:HttpAgent.WebSocketClient.#ctor(HttpAgent.WebSocketClientOptions)">
            <summary>
                <inheritdoc cref="T:HttpAgent.WebSocketClient" />
            </summary>
            <param name="options">
                <see cref="T:HttpAgent.WebSocketClientOptions" />
            </param>
        </member>
        <member name="P:HttpAgent.WebSocketClient.State">
            <inheritdoc cref="T:System.Net.WebSockets.WebSocketState" />
        </member>
        <member name="P:HttpAgent.WebSocketClient.Options">
            <summary>
                <see cref="T:HttpAgent.WebSocketClientOptions" />
            </summary>
        </member>
        <member name="P:HttpAgent.WebSocketClient.CurrentReconnectRetries">
            <summary>
                当前重连次数
            </summary>
        </member>
        <member name="M:HttpAgent.WebSocketClient.Dispose">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.WebSocketClient.ConnectAsync(System.Threading.CancellationToken)">
            <summary>
                连接到服务器
            </summary>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:HttpAgent.WebSocketClient.ReconnectAsync(System.Threading.CancellationToken)">
            <summary>
                重新连接到服务器
            </summary>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:HttpAgent.WebSocketClient.ListenAsync(System.Threading.CancellationToken)">
            <summary>
                开始监听服务器消息（非阻塞）
            </summary>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Threading.Tasks.Task" />
            </returns>
        </member>
        <member name="M:HttpAgent.WebSocketClient.WaitAsync(System.Threading.CancellationToken)">
            <summary>
                等待接收服务器消息（阻塞）
            </summary>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:HttpAgent.WebSocketClient.ReceiveAsync(System.Threading.CancellationToken)">
            <summary>
                接收服务器消息
            </summary>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:HttpAgent.WebSocketClient.SendAsync(System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
                向服务器发送消息
            </summary>
            <param name="message">字符串消息</param>
            <param name="endOfMessage">是否作为消息的最后一部分，默认值为 <c>true</c>。</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:HttpAgent.WebSocketClient.SendAsync(System.String,System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)">
            <summary>
                向服务器发送消息
            </summary>
            <param name="message">字符串消息</param>
            <param name="webSocketMessageType">
                <see cref="T:System.Net.WebSockets.WebSocketMessageType" />
            </param>
            <param name="endOfMessage">是否作为消息的最后一部分，默认值为 <c>true</c>。</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:HttpAgent.WebSocketClient.SendAsync(System.Byte[],System.Boolean,System.Threading.CancellationToken)">
            <summary>
                向服务器发送消息
            </summary>
            <param name="byteArray">二进制消息</param>
            <param name="endOfMessage">是否作为消息的最后一部分，默认值为 <c>true</c>。</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:HttpAgent.WebSocketClient.CloseAsync(System.Threading.CancellationToken)">
            <summary>
                关闭连接
            </summary>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:HttpAgent.WebSocketClient.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)">
            <summary>
                关闭连接
            </summary>
            <param name="closeStatus">
                <see cref="T:System.Net.WebSockets.WebSocketCloseStatus" />
            </param>
            <param name="closeDescription">关闭描述。默认值为：<c>Closing</c>。</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="E:HttpAgent.WebSocketClient.Connecting">
            <summary>
                开始连接时触发事件
            </summary>
        </member>
        <member name="E:HttpAgent.WebSocketClient.Connected">
            <summary>
                连接成功时触发事件
            </summary>
        </member>
        <member name="E:HttpAgent.WebSocketClient.Reconnecting">
            <summary>
                开始重新连接时触发事件
            </summary>
        </member>
        <member name="E:HttpAgent.WebSocketClient.Reconnected">
            <summary>
                重新连接成功时触发事件
            </summary>
        </member>
        <member name="E:HttpAgent.WebSocketClient.Closing">
            <summary>
                开始关闭连接时触发事件
            </summary>
        </member>
        <member name="E:HttpAgent.WebSocketClient.Closed">
            <summary>
                关闭连接成功时触发事件
            </summary>
        </member>
        <member name="E:HttpAgent.WebSocketClient.ReceivingStarted">
            <summary>
                开始接收消息时触发事件
            </summary>
        </member>
        <member name="E:HttpAgent.WebSocketClient.ReceivingStopped">
            <summary>
                停止接收消息时触发事件
            </summary>
        </member>
        <member name="E:HttpAgent.WebSocketClient.TextReceived">
            <summary>
                接收文本消息事件
            </summary>
        </member>
        <member name="E:HttpAgent.WebSocketClient.BinaryReceived">
            <summary>
                接收二进制消息事件
            </summary>
        </member>
        <member name="M:HttpAgent.WebSocketClient.OnConnecting">
            <summary>
                触发开始连接事件
            </summary>
        </member>
        <member name="M:HttpAgent.WebSocketClient.OnConnected">
            <summary>
                触发连接成功事件
            </summary>
        </member>
        <member name="M:HttpAgent.WebSocketClient.OnReconnecting">
            <summary>
                触发开始重新连接事件
            </summary>
        </member>
        <member name="M:HttpAgent.WebSocketClient.OnReconnected">
            <summary>
                触发重新连接成功事件
            </summary>
        </member>
        <member name="M:HttpAgent.WebSocketClient.OnClosing">
            <summary>
                触发开始关闭连接事件
            </summary>
        </member>
        <member name="M:HttpAgent.WebSocketClient.OnClosed">
            <summary>
                触发关闭连接成功事件
            </summary>
        </member>
        <member name="M:HttpAgent.WebSocketClient.OnReceivingStarted">
            <summary>
                触发开始接收消息事件
            </summary>
        </member>
        <member name="M:HttpAgent.WebSocketClient.OnReceivingStopped">
            <summary>
                触发停止接收消息事件
            </summary>
        </member>
        <member name="M:HttpAgent.WebSocketClient.OnTextReceived(HttpAgent.WebSocketTextReceiveResult)">
            <summary>
                触发接收文本消息事件
            </summary>
            <param name="receiveResult">
                <see cref="T:HttpAgent.WebSocketTextReceiveResult" />
            </param>
        </member>
        <member name="M:HttpAgent.WebSocketClient.OnBinaryReceived(HttpAgent.WebSocketBinaryReceiveResult)">
            <summary>
                触发接收二进制消息事件
            </summary>
            <param name="receiveResult">
                <see cref="T:HttpAgent.WebSocketBinaryReceiveResult" />
            </param>
        </member>
        <member name="T:HttpAgent.WebSocketClientOptions">
            <summary>
                WebSocket 客户端配置选项
            </summary>
        </member>
        <member name="M:HttpAgent.WebSocketClientOptions.#ctor(System.String)">
            <summary>
                <inheritdoc cref="T:HttpAgent.WebSocketClientOptions" />
            </summary>
            <param name="serverUri">服务器地址</param>
        </member>
        <member name="M:HttpAgent.WebSocketClientOptions.#ctor(System.Uri)">
            <summary>
                <inheritdoc cref="T:HttpAgent.WebSocketClientOptions" />
            </summary>
            <param name="serverUri">服务器地址</param>
        </member>
        <member name="P:HttpAgent.WebSocketClientOptions.ServerUri">
            <summary>
                服务器地址
            </summary>
        </member>
        <member name="P:HttpAgent.WebSocketClientOptions.ReconnectInterval">
            <summary>
                重连的间隔时间（毫秒）
            </summary>
            <remarks>默认值为 2 秒。</remarks>
        </member>
        <member name="P:HttpAgent.WebSocketClientOptions.MaxReconnectRetries">
            <summary>
                最大重连次数
            </summary>
            <remarks>默认最大重连次数为 10。</remarks>
        </member>
        <member name="P:HttpAgent.WebSocketClientOptions.Timeout">
            <summary>
                超时时间
            </summary>
        </member>
        <member name="P:HttpAgent.WebSocketClientOptions.ReceiveBufferSize">
            <summary>
                接收服务器新消息缓冲区大小
            </summary>
            <remarks>以字节为单位，默认值为 <c>4 KB</c>。</remarks>
        </member>
        <member name="P:HttpAgent.WebSocketClientOptions.ConfigureClientWebSocketOptions">
            <summary>
                用于配置 <see cref="P:HttpAgent.WebSocketClientOptions.ConfigureClientWebSocketOptions" /> 的操作
            </summary>
        </member>
        <member name="T:HttpAgent.WebSocketTextReceiveResult">
            <summary>
                WebSocket 接收的文本消息的结果类
            </summary>
        </member>
        <member name="M:HttpAgent.WebSocketTextReceiveResult.#ctor(System.Int32,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.WebSocketTextReceiveResult.#ctor(System.Int32,System.Boolean,System.Nullable{System.Net.WebSockets.WebSocketCloseStatus},System.String)">
            <inheritdoc />
        </member>
        <member name="P:HttpAgent.WebSocketTextReceiveResult.Message">
            <summary>
                文本消息
            </summary>
        </member>
        <member name="T:System.AliasAsAttribute">
            <summary>
                设置别名特性
            </summary>
        </member>
        <member name="M:System.AliasAsAttribute.#ctor(System.String)">
            <summary>
                <inheritdoc cref="T:System.AliasAsAttribute" />
            </summary>
            <param name="aliasAs">别名</param>
        </member>
        <member name="P:System.AliasAsAttribute.AliasAs">
            <summary>
                别名
            </summary>
        </member>
        <member name="T:System.Debugging">
            <summary>
                向事件管理器中输出事件信息
            </summary>
        </member>
        <member name="M:System.Debugging.WriteLine(System.Int32,System.String)">
            <summary>
                输出一行事件信息
            </summary>
            <param name="level">
                <para>信息级别</para>
                <list type="number">
                    <item>
                        <description>跟踪</description>
                    </item>
                    <item>
                        <description>信息</description>
                    </item>
                    <item>
                        <description>警告</description>
                    </item>
                    <item>
                        <description>错误</description>
                    </item>
                    <item>
                        <description>文件</description>
                    </item>
                    <item>
                        <description>提示</description>
                    </item>
                    <item>
                        <description>搜索</description>
                    </item>
                    <item>
                        <description>时钟</description>
                    </item>
                </list>
            </param>
            <param name="message">事件信息</param>
        </member>
        <member name="M:System.Debugging.Error(System.String)">
            <summary>
                输出错误级别事件信息
            </summary>
            <param name="message">事件信息</param>
        </member>
        <member name="M:System.Debugging.File(System.String)">
            <summary>
                输出文件级别事件信息
            </summary>
            <param name="message">事件信息</param>
        </member>
        <member name="M:System.Debugging.GetLevelEmoji(System.Int32)">
            <summary>
                获取信息级别对应的 emoji
            </summary>
            <param name="level">
                <para>信息级别</para>
                <list type="number">
                    <item>
                        <description>跟踪</description>
                    </item>
                    <item>
                        <description>信息</description>
                    </item>
                    <item>
                        <description>警告</description>
                    </item>
                    <item>
                        <description>错误</description>
                    </item>
                    <item>
                        <description>文件</description>
                    </item>
                    <item>
                        <description>提示</description>
                    </item>
                    <item>
                        <description>搜索</description>
                    </item>
                    <item>
                        <description>时钟</description>
                    </item>
                </list>
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.PlaceholderRegex_0">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the PlaceholderRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.PlaceholderRegex_0.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.PlaceholderRegex_0.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.PlaceholderRegex_0.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.PlaceholderRegex_0.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.PlaceholderRegex_0.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.PlaceholderRegex_0.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.PlaceholderRegex_0.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.PlaceholderRegex_0.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ConfigurationKeyRegex_1">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the ConfigurationKeyRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.ConfigurationKeyRegex_1.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ConfigurationKeyRegex_1.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ConfigurationKeyRegex_1.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ConfigurationKeyRegex_1.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ConfigurationKeyRegex_1.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ConfigurationKeyRegex_1.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ConfigurationKeyRegex_1.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ConfigurationKeyRegex_1.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.FormUrlEncodedFormatRegex_2">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the FormUrlEncodedFormatRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.FormUrlEncodedFormatRegex_2.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.FormUrlEncodedFormatRegex_2.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.FormUrlEncodedFormatRegex_2.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.FormUrlEncodedFormatRegex_2.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.FormUrlEncodedFormatRegex_2.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.FormUrlEncodedFormatRegex_2.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.FormUrlEncodedFormatRegex_2.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.FormUrlEncodedFormatRegex_2.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.StatusCodeRangeRegex_3">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the StatusCodeRangeRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.StatusCodeRangeRegex_3.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.StatusCodeRangeRegex_3.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.StatusCodeRangeRegex_3.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.StatusCodeRangeRegex_3.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.StatusCodeRangeRegex_3.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.StatusCodeRangeRegex_3.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.StatusCodeRangeRegex_3.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.StatusCodeRangeRegex_3.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.StatusCodeCompareRegex_4">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the StatusCodeCompareRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.StatusCodeCompareRegex_4.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.StatusCodeCompareRegex_4.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.StatusCodeCompareRegex_4.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.StatusCodeCompareRegex_4.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.StatusCodeCompareRegex_4.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.StatusCodeCompareRegex_4.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.StatusCodeCompareRegex_4.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.StatusCodeCompareRegex_4.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Utilities">
            <summary>Helper methods used by generated <see cref="T:System.Text.RegularExpressions.Regex"/>-derived implementations.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout">
            <summary>Default timeout value set in <see cref="T:System.AppContext"/>, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout"/> if none was set.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_hasTimeout">
            <summary>Whether <see cref="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout"/> is non-infinite.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.IsWordChar(System.Char)">
            <summary>Determines whether the character is part of the [\w] set.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPop(System.Int32[],System.Int32@,System.Int32@,System.Int32@)">
            <summary>Pops 2 values from the backtracking stack.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPush(System.Int32[]@,System.Int32@,System.Int32)">
            <summary>Pushes 1 value onto the backtracking stack.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPush(System.Int32[]@,System.Int32@,System.Int32,System.Int32)">
            <summary>Pushes 2 values onto the backtracking stack.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPush(System.Int32[]@,System.Int32@,System.Int32,System.Int32,System.Int32)">
            <summary>Pushes 3 values onto the backtracking stack.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_ascii_60FF03FEFFFF87FEFFFF47">
            <summary>Supports searching for characters in or not in "-.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~".</summary>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.HttpRemoteServiceCollectionExtensions">
            <summary>
                HTTP 远程请求模块 <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> 拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.HttpRemoteServiceCollectionExtensions.AddHttpRemote(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{HttpAgent.HttpRemoteBuilder})">
            <summary>
                添加 HTTP 远程请求服务
            </summary>
            <param name="services">
                <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
            </param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.IHttpRemoteBuilder" />
            </returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.HttpRemoteServiceCollectionExtensions.AddHttpRemote(Microsoft.Extensions.DependencyInjection.IServiceCollection,HttpAgent.HttpRemoteBuilder)">
            <summary>
                添加 HTTP 远程请求服务
            </summary>
            <param name="services">
                <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
            </param>
            <param name="httpRemoteBuilder">
                <see cref="T:HttpAgent.HttpRemoteBuilder" />
            </param>
            <returns>
                <see cref="T:HttpAgent.IHttpRemoteBuilder" />
            </returns>
        </member>
    </members>
</doc>
teBuilder">
                <see cref="T:HttpAgent.HttpRemoteBuilder" />
            </param>
            <returns>
                <see cref="T:HttpAgent.IHttpRemoteBuilder" />
            </returns>
        </member>
    </members>
</doc>
