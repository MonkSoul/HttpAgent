<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HttpAgent</name>
    </assembly>
    <members>
        <member name="T:HttpAgent.HttpFileDownloadBuilder">
            <summary>
                HTTP 文件下载构建器
            </summary>
            <remarks>使用 <c>HttpRequestBuilder.Download(requestUri, destinationPath)</c> 静态方法创建。</remarks>
        </member>
        <member name="M:HttpAgent.HttpFileDownloadBuilder.#ctor(System.Net.Http.HttpMethod,System.Uri)">
            <summary>
                <inheritdoc cref="T:HttpAgent.HttpFileDownloadBuilder" />
            </summary>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址</param>
        </member>
        <member name="P:HttpAgent.HttpFileDownloadBuilder.RequestUri">
            <summary>
                请求地址
            </summary>
        </member>
        <member name="P:HttpAgent.HttpFileDownloadBuilder.Method">
            <summary>
                请求方式
            </summary>
        </member>
        <member name="P:HttpAgent.HttpFileDownloadBuilder.BufferSize">
            <summary>
                用于传输操作的缓冲区大小
            </summary>
            <remarks>以字节为单位，默认值为 <c>80 KB</c>。</remarks>
        </member>
        <member name="P:HttpAgent.HttpFileDownloadBuilder.DestinationPath">
            <summary>
                文件保存的目标路径
            </summary>
        </member>
        <member name="P:HttpAgent.HttpFileDownloadBuilder.FileExistsBehavior">
            <summary>
                当目标文件已存在时的行为
            </summary>
            <remarks>默认值为创建新文件，如果文件已存在则抛出异常。</remarks>
        </member>
        <member name="P:HttpAgent.HttpFileDownloadBuilder.ProgressInterval">
            <summary>
                进度更新（通知）的间隔时间
            </summary>
            <remarks>默认值为 1 秒。</remarks>
        </member>
        <member name="P:HttpAgent.HttpFileDownloadBuilder.OnTransferStarted">
            <summary>
                用于处理在文件开始传输时的操作
            </summary>
        </member>
        <member name="P:HttpAgent.HttpFileDownloadBuilder.OnTransferCompleted">
            <summary>
                用于处理在文件传输完成时的操作
            </summary>
        </member>
        <member name="P:HttpAgent.HttpFileDownloadBuilder.OnTransferFailed">
            <summary>
                用于处理在文件传输发生异常时的操作
            </summary>
        </member>
        <member name="P:HttpAgent.HttpFileDownloadBuilder.OnProgressChanged">
            <summary>
                用于传输进度发生变化时的操作
            </summary>
        </member>
        <member name="P:HttpAgent.HttpFileDownloadBuilder.FileTransferEventHandlerType">
            <summary>
                实现 <see cref="T:HttpAgent.IHttpFileTransferEventHandler" /> 的类型
            </summary>
        </member>
        <member name="M:HttpAgent.HttpFileDownloadBuilder.SetBufferSize(System.Int32)">
            <summary>
                设置用于传输操作的缓冲区大小
            </summary>
            <param name="bufferSize">用于传输操作的缓冲区大小</param>
            <remarks>以字节为单位，默认值为 <c>80 KB</c>。</remarks>
            <returns>
                <see cref="T:HttpAgent.HttpFileDownloadBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpFileDownloadBuilder.SetDestinationPath(System.String)">
            <summary>
                设置文件保存的目标路径
            </summary>
            <param name="destinationPath">文件保存的目标路径</param>
            <remarks>
                如果设置为 <c>null</c>，则尝试获取 HTTP 模块的 <see cref="T:HttpAgent.HttpRemoteBuilder" /> 构建器的 <c>DefaultFileDownloadDirectory</c>
                的属性配置。
            </remarks>
            <returns>
                <see cref="T:HttpAgent.HttpFileDownloadBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpFileDownloadBuilder.SetOnProgressChanged(System.Func{HttpAgent.FileTransferProgress,System.Threading.Tasks.Task})">
            <summary>
                设置用于传输进度发生变化时执行的委托
            </summary>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpFileDownloadBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpFileDownloadBuilder.SetFileExistsBehavior(HttpAgent.FileExistsBehavior)">
            <summary>
                设置当目标文件已存在时的行为
            </summary>
            <param name="fileExistsBehavior">
                <see cref="P:HttpAgent.HttpFileDownloadBuilder.FileExistsBehavior" />
            </param>
            <returns>
                <see cref="T:HttpAgent.HttpFileDownloadBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpFileDownloadBuilder.SetProgressInterval(System.TimeSpan)">
            <summary>
                设置进度更新（通知）的间隔时间
            </summary>
            <param name="progressInterval">进度更新（通知）的间隔时间</param>
            <returns>
                <see cref="T:HttpAgent.HttpFileDownloadBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpFileDownloadBuilder.SetOnTransferStarted(System.Action)">
            <summary>
                设置在文件开始传输时的操作
            </summary>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpFileDownloadBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpFileDownloadBuilder.SetOnTransferCompleted(System.Action{System.Int64})">
            <summary>
                设置在文件传输完成时的操作
            </summary>
            <param name="configure">自定义配置委托；委托参数为文件传输总花费时间（毫秒）</param>
            <returns>
                <see cref="T:HttpAgent.HttpFileDownloadBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpFileDownloadBuilder.SetOnTransferFailed(System.Action{System.Exception})">
            <summary>
                设置在文件传输发生异常时的操作
            </summary>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpFileDownloadBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpFileDownloadBuilder.SetEventHandler(System.Type)">
            <summary>
                设置 HTTP 文件传输事件处理程序
            </summary>
            <param name="fileTransferEventHandlerType">实现 <see cref="T:HttpAgent.IHttpFileTransferEventHandler" /> 接口的类型</param>
            <returns>
                <see cref="T:HttpAgent.HttpFileDownloadBuilder" />
            </returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:HttpAgent.HttpFileDownloadBuilder.SetEventHandler``1">
            <summary>
                设置 HTTP 文件传输事件处理程序
            </summary>
            <typeparam name="TFileTransferEventHandler">
                <see cref="T:HttpAgent.IHttpFileTransferEventHandler" />
            </typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpFileDownloadBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpFileDownloadBuilder.Build(HttpAgent.HttpRemoteOptions,System.Action{HttpAgent.HttpRequestBuilder})">
            <summary>
                构建 <see cref="T:HttpAgent.HttpRequestBuilder" /> 实例
            </summary>
            <param name="httpRemoteOptions">
                <see cref="T:HttpAgent.HttpRemoteOptions" />
            </param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="T:HttpAgent.HttpFileUploadBuilder">
            <summary>
                HTTP 文件上传构建器
            </summary>
            <remarks>使用 <c>HttpRequestBuilder.Upload(requestUri, fileFullName, name)</c> 静态方法创建。</remarks>
        </member>
        <member name="M:HttpAgent.HttpFileUploadBuilder.#ctor(System.Net.Http.HttpMethod,System.Uri,System.String,System.String)">
            <summary>
                <inheritdoc cref="T:HttpAgent.HttpFileUploadBuilder" />
            </summary>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址</param>
            <param name="fileFullName">文件完整路径</param>
            <param name="name">表单名称</param>
        </member>
        <member name="P:HttpAgent.HttpFileUploadBuilder.RequestUri">
            <summary>
                请求地址
            </summary>
        </member>
        <member name="P:HttpAgent.HttpFileUploadBuilder.Method">
            <summary>
                请求方式
            </summary>
        </member>
        <member name="P:HttpAgent.HttpFileUploadBuilder.FileFullName">
            <summary>
                文件完整路径
            </summary>
        </member>
        <member name="P:HttpAgent.HttpFileUploadBuilder.Name">
            <summary>
                表单名称
            </summary>
        </member>
        <member name="P:HttpAgent.HttpFileUploadBuilder.ContentType">
            <summary>
                内容类型
            </summary>
        </member>
        <member name="P:HttpAgent.HttpFileUploadBuilder.ProgressInterval">
            <summary>
                进度更新（通知）的间隔时间
            </summary>
            <remarks>默认值为 1 秒。</remarks>
        </member>
        <member name="P:HttpAgent.HttpFileUploadBuilder.OnTransferStarted">
            <summary>
                用于处理在文件开始传输时的操作
            </summary>
        </member>
        <member name="P:HttpAgent.HttpFileUploadBuilder.OnTransferCompleted">
            <summary>
                用于处理在文件传输完成时的操作
            </summary>
        </member>
        <member name="P:HttpAgent.HttpFileUploadBuilder.OnTransferFailed">
            <summary>
                用于处理在文件传输发生异常时的操作
            </summary>
        </member>
        <member name="P:HttpAgent.HttpFileUploadBuilder.OnProgressChanged">
            <summary>
                用于传输进度发生变化时的操作
            </summary>
        </member>
        <member name="P:HttpAgent.HttpFileUploadBuilder.FileTransferEventHandlerType">
            <summary>
                实现 <see cref="T:HttpAgent.IHttpFileTransferEventHandler" /> 的类型
            </summary>
        </member>
        <member name="M:HttpAgent.HttpFileUploadBuilder.SetContentType(System.String)">
            <summary>
                设置内容类型
            </summary>
            <param name="contentType">内容类型</param>
            <returns>
                <see cref="T:HttpAgent.HttpFileUploadBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpFileUploadBuilder.SetOnProgressChanged(System.Func{HttpAgent.FileTransferProgress,System.Threading.Tasks.Task})">
            <summary>
                设置用于上传进度发生变化时执行的委托
            </summary>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpFileUploadBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpFileUploadBuilder.SetProgressInterval(System.TimeSpan)">
            <summary>
                设置进度更新（通知）的间隔时间
            </summary>
            <param name="progressInterval">进度更新（通知）的间隔时间</param>
            <returns>
                <see cref="T:HttpAgent.HttpFileUploadBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpFileUploadBuilder.SetOnTransferStarted(System.Action)">
            <summary>
                设置在文件开始传输时的操作
            </summary>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpFileUploadBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpFileUploadBuilder.SetOnTransferCompleted(System.Action{System.Int64})">
            <summary>
                设置在文件传输完成时的操作
            </summary>
            <param name="configure">自定义配置委托；委托参数为文件传输总花费时间（毫秒）</param>
            <returns>
                <see cref="T:HttpAgent.HttpFileUploadBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpFileUploadBuilder.SetOnTransferFailed(System.Action{System.Exception})">
            <summary>
                设置在文件传输发生异常时的操作
            </summary>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpFileUploadBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpFileUploadBuilder.SetEventHandler(System.Type)">
            <summary>
                设置 HTTP 文件传输事件处理程序
            </summary>
            <param name="fileTransferEventHandlerType">实现 <see cref="T:HttpAgent.IHttpFileTransferEventHandler" /> 接口的类型</param>
            <returns>
                <see cref="T:HttpAgent.HttpFileUploadBuilder" />
            </returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:HttpAgent.HttpFileUploadBuilder.SetEventHandler``1">
            <summary>
                设置 HTTP 文件传输事件处理程序
            </summary>
            <typeparam name="TFileTransferEventHandler">
                <see cref="T:HttpAgent.IHttpFileTransferEventHandler" />
            </typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpFileUploadBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpFileUploadBuilder.Build(HttpAgent.HttpRemoteOptions,System.Threading.Channels.Channel{HttpAgent.FileTransferProgress},System.Action{HttpAgent.HttpRequestBuilder})">
            <summary>
                构建 <see cref="T:HttpAgent.HttpRequestBuilder" /> 实例
            </summary>
            <param name="httpRemoteOptions">
                <see cref="T:HttpAgent.HttpRemoteOptions" />
            </param>
            <param name="progressChannel">文件传输进度信息的通道</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="T:HttpAgent.HttpLongPollingBuilder">
            <summary>
                HTTP 长轮询构建器
            </summary>
            <remarks>使用 <c>HttpRequestBuilder.LongPolling(httpMethod, requestUri, onDataReceived)</c> 静态方法创建。</remarks>
        </member>
        <member name="M:HttpAgent.HttpLongPollingBuilder.#ctor(System.Net.Http.HttpMethod,System.Uri)">
            <summary>
                <inheritdoc cref="T:HttpAgent.HttpLongPollingBuilder" />
            </summary>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址</param>
        </member>
        <member name="P:HttpAgent.HttpLongPollingBuilder.RequestUri">
            <summary>
                请求地址
            </summary>
        </member>
        <member name="P:HttpAgent.HttpLongPollingBuilder.Method">
            <summary>
                请求方式
            </summary>
        </member>
        <member name="P:HttpAgent.HttpLongPollingBuilder.PollingInterval">
            <summary>
                轮询间隔
            </summary>
            <remarks>默认值为 5 秒。</remarks>
        </member>
        <member name="P:HttpAgent.HttpLongPollingBuilder.MaxRetries">
            <summary>
                最大重试次数
            </summary>
            <remarks>默认最大重试次数为 100。</remarks>
        </member>
        <member name="P:HttpAgent.HttpLongPollingBuilder.OnDataReceived">
            <summary>
                用于在长轮询时接收到数据时的操作
            </summary>
        </member>
        <member name="P:HttpAgent.HttpLongPollingBuilder.LongPollingEventHandlerType">
            <summary>
                实现 <see cref="T:HttpAgent.IHttpLongPollingEventHandler" /> 的类型
            </summary>
        </member>
        <member name="M:HttpAgent.HttpLongPollingBuilder.SetPollingInterval(System.TimeSpan)">
            <summary>
                设置轮询间隔
            </summary>
            <param name="pollingInterval">轮询间隔</param>
            <returns>
                <see cref="T:HttpAgent.HttpLongPollingBuilder" />
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:HttpAgent.HttpLongPollingBuilder.SetMaxRetries(System.Int32)">
            <summary>
                设置最大重试次数
            </summary>
            <param name="maxRetries">最大重试次数</param>
            <returns>
                <see cref="T:HttpAgent.HttpLongPollingBuilder" />
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:HttpAgent.HttpLongPollingBuilder.SetOnDataReceived(System.Func{System.Net.Http.HttpResponseMessage,System.Threading.Tasks.Task})">
            <summary>
                设置在长轮询时接收到数据时的操作
            </summary>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpLongPollingBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpLongPollingBuilder.SetEventHandler(System.Type)">
            <summary>
                设置长轮询事件处理程序
            </summary>
            <param name="longPollingEventHandlerType">实现 <see cref="T:HttpAgent.IHttpLongPollingEventHandler" /> 接口的类型</param>
            <returns>
                <see cref="T:HttpAgent.HttpLongPollingBuilder" />
            </returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:HttpAgent.HttpLongPollingBuilder.SetEventHandler``1">
            <summary>
                设置长轮询事件处理程序
            </summary>
            <typeparam name="TLongPollingEventHandler">
                <see cref="T:HttpAgent.IHttpLongPollingEventHandler" />
            </typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpLongPollingBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpLongPollingBuilder.Build(HttpAgent.HttpRemoteOptions,System.Action{HttpAgent.HttpRequestBuilder})">
            <summary>
                构建 <see cref="T:HttpAgent.HttpRequestBuilder" /> 实例
            </summary>
            <param name="httpRemoteOptions">
                <see cref="T:HttpAgent.HttpRemoteOptions" />
            </param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="T:HttpAgent.HttpMultipartFormDataBuilder">
            <summary>
                <see cref="T:System.Net.Http.MultipartFormDataContent" /> 构建器
            </summary>
        </member>
        <member name="F:HttpAgent.HttpMultipartFormDataBuilder._httpRequestBuilder">
            <inheritdoc cref="T:HttpAgent.HttpRequestBuilder" />
        </member>
        <member name="F:HttpAgent.HttpMultipartFormDataBuilder._partContents">
            <summary>
                <see cref="T:HttpAgent.MultipartFormDataItem" /> 集合
            </summary>
        </member>
        <member name="M:HttpAgent.HttpMultipartFormDataBuilder.#ctor(HttpAgent.HttpRequestBuilder)">
            <summary>
                <inheritdoc cref="T:HttpAgent.HttpMultipartFormDataBuilder" />
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </param>
        </member>
        <member name="P:HttpAgent.HttpMultipartFormDataBuilder.Boundary">
            <summary>
                多部分内容的边界
            </summary>
        </member>
        <member name="M:HttpAgent.HttpMultipartFormDataBuilder.SetBoundary(System.String)">
            <summary>
                设置多部分内容的边界
            </summary>
            <param name="boundary">多部分内容的边界</param>
            <returns>
                <see cref="T:HttpAgent.HttpMultipartFormDataBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpMultipartFormDataBuilder.AddJson(System.Object,System.Text.Encoding)">
            <summary>
                添加 JSON 内容
            </summary>
            <param name="rawJson">JSON 字符串/原始对象</param>
            <param name="contentEncoding">内容编码</param>
            <returns>
                <see cref="T:HttpAgent.HttpMultipartFormDataBuilder" />
            </returns>
            <exception cref="T:System.Text.Json.JsonException"></exception>
        </member>
        <member name="M:HttpAgent.HttpMultipartFormDataBuilder.AddJsonProperty(System.Object,System.String,System.Text.Encoding)">
            <summary>
                添加 JSON 单个属性值
            </summary>
            <param name="value">表单值</param>
            <param name="name">表单名称</param>
            <param name="contentEncoding">内容编码</param>
            <returns>
                <see cref="T:HttpAgent.HttpMultipartFormDataBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpMultipartFormDataBuilder.AddHtml(System.String,System.String,System.Text.Encoding)">
            <summary>
                添加 HTML 内容
            </summary>
            <param name="htmlString">HTML 字符串</param>
            <param name="name">表单名称</param>
            <param name="contentEncoding">内容编码</param>
            <returns>
                <see cref="T:HttpAgent.HttpMultipartFormDataBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpMultipartFormDataBuilder.AddXml(System.String,System.String,System.Text.Encoding)">
            <summary>
                添加 XML 内容
            </summary>
            <param name="xmlString">XML 字符串</param>
            <param name="name">表单名称</param>
            <param name="contentEncoding">内容编码</param>
            <returns>
                <see cref="T:HttpAgent.HttpMultipartFormDataBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpMultipartFormDataBuilder.AddText(System.String,System.String,System.Text.Encoding)">
            <summary>
                添加文本内容
            </summary>
            <param name="text">文本</param>
            <param name="name">表单名称</param>
            <param name="contentEncoding">内容编码</param>
            <returns>
                <see cref="T:HttpAgent.HttpMultipartFormDataBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpMultipartFormDataBuilder.AddRaw(System.Object,System.String,System.String,System.Text.Encoding)">
            <summary>
                添加原始内容（字符串/对象）
            </summary>
            <param name="rawObject">字符串/原始对象</param>
            <param name="name">表单名称</param>
            <param name="contentType">内容类型</param>
            <param name="contentEncoding">内容编码</param>
            <returns>
                <see cref="T:HttpAgent.HttpMultipartFormDataBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpMultipartFormDataBuilder.AddFileStream(System.String,System.String,System.String,System.Text.Encoding)">
            <summary>
                添加文件
            </summary>
            <param name="fileFullName">文件完整路径</param>
            <param name="name">表单名称</param>
            <param name="contentType">内容类型</param>
            <param name="contentEncoding">内容编码</param>
            <returns>
                <see cref="T:HttpAgent.HttpMultipartFormDataBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpMultipartFormDataBuilder.AddProgressFileStream(System.String,System.String,System.Threading.Channels.Channel{HttpAgent.FileTransferProgress},System.String,System.Text.Encoding)">
            <summary>
                添加文件（带上传进度）
            </summary>
            <param name="fileFullName">文件完整路径</param>
            <param name="name">表单名称</param>
            <param name="progressChannel">文件传输进度信息的通道</param>
            <param name="contentType">内容类型</param>
            <param name="contentEncoding">内容编码</param>
            <returns>
                <see cref="T:HttpAgent.HttpMultipartFormDataBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpMultipartFormDataBuilder.AddFileBytes(System.String,System.String,System.String,System.Text.Encoding)">
            <summary>
                添加文件
            </summary>
            <param name="fileFullName">文件完整路径</param>
            <param name="name">表单名称</param>
            <param name="contentType">内容类型</param>
            <param name="contentEncoding">内容编码</param>
            <returns>
                <see cref="T:HttpAgent.HttpMultipartFormDataBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpMultipartFormDataBuilder.AddStream(System.IO.Stream,System.String,System.String,System.Nullable{System.Int64},System.String,System.Text.Encoding)">
            <summary>
                添加流
            </summary>
            <param name="stream">
                <see cref="T:System.IO.Stream" />
            </param>
            <param name="name">表单名称</param>
            <param name="fileName">文件名</param>
            <param name="fileSize">文件大小</param>
            <param name="contentType">内容类型</param>
            <param name="contentEncoding">内容编码</param>
            <returns>
                <see cref="T:HttpAgent.HttpMultipartFormDataBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpMultipartFormDataBuilder.AddByteArray(System.Byte[],System.String,System.String,System.Nullable{System.Int64},System.String,System.Text.Encoding)">
            <summary>
                添加字节数组
            </summary>
            <param name="byteArray">字节数组</param>
            <param name="name">表单名称</param>
            <param name="fileName">文件名</param>
            <param name="fileSize">文件大小</param>
            <param name="contentType">内容类型</param>
            <param name="contentEncoding">内容编码</param>
            <returns>
                <see cref="T:HttpAgent.HttpMultipartFormDataBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpMultipartFormDataBuilder.AddFormUrlEncoded(System.Object,System.String,System.Text.Encoding)">
            <summary>
                添加 URL 表单
            </summary>
            <param name="rawObject">原始对象</param>
            <param name="name">表单名称</param>
            <param name="contentEncoding">内容编码</param>
            <returns>
                <see cref="T:HttpAgent.HttpMultipartFormDataBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpMultipartFormDataBuilder.AddMultipartFormData(System.Object,System.String,System.Text.Encoding)">
            <summary>
                添加多行表单
            </summary>
            <param name="rawObject">原始对象</param>
            <param name="name">表单名称</param>
            <param name="contentEncoding">内容编码</param>
            <returns>
                <see cref="T:HttpAgent.HttpMultipartFormDataBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpMultipartFormDataBuilder.Add(System.Net.Http.HttpContent,System.String,System.String,System.Text.Encoding)">
            <summary>
                添加 <see cref="T:System.Net.Http.HttpContent" />
            </summary>
            <param name="httpContent">
                <see cref="T:System.Net.Http.HttpContent" />
            </param>
            <param name="name">表单名称</param>
            <param name="contentType">内容类型</param>
            <param name="contentEncoding">内容编码</param>
            <returns>
                <see cref="T:HttpAgent.HttpMultipartFormDataBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpMultipartFormDataBuilder.Build(HttpAgent.HttpRemoteOptions,HttpAgent.IHttpContentProcessorFactory,HttpAgent.IHttpContentProcessor[])">
            <summary>
                构建 <see cref="T:System.Net.Http.MultipartFormDataContent" /> 实例
            </summary>
            <param name="httpRemoteOptions">
                <see cref="T:HttpAgent.HttpRemoteOptions" />
            </param>
            <param name="httpContentProcessorFactory">
                <see cref="T:HttpAgent.IHttpContentProcessorFactory" />
            </param>
            <param name="processors"><see cref="T:HttpAgent.IHttpContentProcessor" /> 集合</param>
            <returns>
                <see cref="T:System.Net.Http.MultipartFormDataContent" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpMultipartFormDataBuilder.BuildHttpContent(HttpAgent.MultipartFormDataItem,HttpAgent.IHttpContentProcessorFactory,HttpAgent.IHttpContentProcessor[])">
            <summary>
                构建 <see cref="T:System.Net.Http.HttpContent" /> 实例
            </summary>
            <param name="multipartFormDataItem">
                <see cref="T:HttpAgent.MultipartFormDataItem" />
            </param>
            <param name="httpContentProcessorFactory">
                <see cref="T:HttpAgent.IHttpContentProcessorFactory" />
            </param>
            <param name="processors"><see cref="T:HttpAgent.IHttpContentProcessor" /> 集合</param>
            <returns>
                <see cref="T:System.Net.Http.HttpContent" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpMultipartFormDataBuilder.ParseContentType(System.String,System.Text.Encoding,System.Text.Encoding@)">
            <summary>
                解析内容类型字符串
            </summary>
            <param name="contentType">内容类型</param>
            <param name="contentEncoding">内容编码</param>
            <param name="encoding">内容编码</param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="T:HttpAgent.HttpRemoteBuilder">
            <summary>
                HTTP 远程请求构建器
            </summary>
        </member>
        <member name="F:HttpAgent.HttpRemoteBuilder._httpContentConverterProviders">
            <summary>
                <see cref="T:HttpAgent.IHttpContentConverter" /> 集合
            </summary>
        </member>
        <member name="F:HttpAgent.HttpRemoteBuilder._httpContentProcessorProviders">
            <summary>
                <see cref="T:HttpAgent.IHttpContentProcessor" /> 集合
            </summary>
        </member>
        <member name="F:HttpAgent.HttpRemoteBuilder._objectContentConverterFactoryType">
            <summary>
                <see cref="T:HttpAgent.IObjectContentConverterFactory" /> 实现类型
            </summary>
        </member>
        <member name="P:HttpAgent.HttpRemoteBuilder.DefaultContentType">
            <summary>
                默认请求内容类型
            </summary>
        </member>
        <member name="P:HttpAgent.HttpRemoteBuilder.DefaultFileDownloadDirectory">
            <summary>
                默认文件下载保存目录
            </summary>
        </member>
        <member name="M:HttpAgent.HttpRemoteBuilder.SetDefaultContentType(System.String)">
            <summary>
                设置默认请求内容类型
            </summary>
            <param name="contentType">内容类型</param>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRemoteBuilder.SetDefaultFileDownloadDirectory(System.String)">
            <summary>
                设置默认文件下载保存目录
            </summary>
            <param name="fileDownloadDirectory">文件下载保存目录</param>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRemoteBuilder.AddHttpContentProcessors(System.Func{System.Collections.Generic.IEnumerable{HttpAgent.IHttpContentProcessor}})">
            <summary>
                添加 <see cref="T:HttpAgent.IHttpContentProcessor" /> 集合提供器
            </summary>
            <remarks>支持多次调用。</remarks>
            <param name="configure"><see cref="T:HttpAgent.IHttpContentProcessor" /> 实例提供器</param>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRemoteBuilder.AddHttpContentConverters(System.Func{System.Collections.Generic.IEnumerable{HttpAgent.IHttpContentConverter}})">
            <summary>
                添加 <see cref="T:HttpAgent.IHttpContentProcessor" /> 集合提供器
            </summary>
            <remarks>支持多次调用。</remarks>
            <param name="configure"><see cref="T:HttpAgent.IHttpContentProcessor" /> 实例提供器</param>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRemoteBuilder.UseObjectContentConverterFactory``1">
            <summary>
                添加自定义 <see cref="T:HttpAgent.ObjectContentConverter`1" /> 工厂
            </summary>
            <typeparam name="TFactory">
                <see cref="T:HttpAgent.IObjectContentConverterFactory" />
            </typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRemoteBuilder.UseObjectContentConverterFactory(System.Type)">
            <summary>
                添加自定义 <see cref="T:HttpAgent.ObjectContentConverter`1" /> 工厂
            </summary>
            <param name="factoryType">
                <see cref="T:HttpAgent.IObjectContentConverterFactory" />
            </param>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteBuilder" />
            </returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:HttpAgent.HttpRemoteBuilder.Build(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
                构建模块服务
            </summary>
            <param name="services">
                <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
            </param>
        </member>
        <member name="M:HttpAgent.HttpRemoteBuilder.EnsureLegalData(System.String)">
            <summary>
                检查默认请求内容类型合法性
            </summary>
            <param name="defaultContentType">内容类型</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="T:HttpAgent.HttpRequestBuilder">
            <summary>
                <see cref="T:System.Net.Http.HttpRequestMessage" /> 构建器
            </summary>
            <summary>
                <see cref="T:System.Net.Http.HttpRequestMessage" /> 构建器
            </summary>
            <summary>
                <see cref="T:System.Net.Http.HttpRequestMessage" /> 构建器
            </summary>
            <summary>
                <see cref="T:System.Net.Http.HttpRequestMessage" /> 构建器
            </summary>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.#ctor(System.Net.Http.HttpMethod,System.Uri)">
            <summary>
                <inheritdoc cref="T:HttpAgent.HttpRequestBuilder" />
            </summary>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址</param>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.Build(HttpAgent.HttpRemoteOptions,HttpAgent.IHttpContentProcessorFactory,System.Uri)">
            <summary>
                构建 <see cref="T:System.Net.Http.HttpRequestMessage" /> 实例
            </summary>
            <param name="httpRemoteOptions">
                <see cref="T:HttpAgent.HttpRemoteOptions" />
            </param>
            <param name="httpContentProcessorFactory">
                <see cref="T:HttpAgent.IHttpContentProcessorFactory" />
            </param>
            <param name="baseUri">基地址</param>
            <returns>
                <see cref="T:System.Net.Http.HttpRequestMessage" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.BuildFinalRequestUri(System.Uri)">
            <summary>
                构建最终的请求地址
            </summary>
            <param name="baseUri">基地址</param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.AppendFragment(System.UriBuilder)">
            <summary>
                追加片段标识符
            </summary>
            <param name="uriBuilder">
                <see cref="T:System.UriBuilder" />
            </param>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.AppendQueryParameters(System.UriBuilder)">
            <summary>
                追加查询参数
            </summary>
            <param name="uriBuilder">
                <see cref="T:System.UriBuilder" />
            </param>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.ReplacePathPlaceholders(System.UriBuilder)">
            <summary>
                替换路径参数
            </summary>
            <param name="uriBuilder">
                <see cref="T:System.UriBuilder" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.AppendHeaders(System.Net.Http.HttpRequestMessage)">
            <summary>
                追加请求标头
            </summary>
            <param name="httpRequestMessage">
                <see cref="T:System.Net.Http.HttpRequestMessage" />
            </param>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.AppendCookies(System.Net.Http.HttpRequestMessage)">
            <summary>
                追加 Cookies
            </summary>
            <param name="httpRequestMessage">
                <see cref="T:System.Net.Http.HttpRequestMessage" />
            </param>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.BuildAndSetContent(System.Net.Http.HttpRequestMessage,HttpAgent.IHttpContentProcessorFactory,HttpAgent.HttpRemoteOptions)">
            <summary>
                构建并设置指定的 <see cref="T:System.Net.Http.HttpRequestMessage" /> 请求消息的内容
            </summary>
            <param name="httpRequestMessage">
                <see cref="T:System.Net.Http.HttpRequestMessage" />
            </param>
            <param name="httpContentProcessorFactory">
                <see cref="T:HttpAgent.IHttpContentProcessorFactory" />
            </param>
            <param name="httpRemoteOptions">
                <see cref="T:HttpAgent.HttpRemoteOptions" />
            </param>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.SetDefaultContentType(System.String)">
            <summary>
                设置默认的内容类型
            </summary>
            <param name="defaultContentType">默认请求内容类型</param>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.SetTraceIdentifier(System.String,System.Boolean)">
            <summary>
                设置跟踪标识
            </summary>
            <param name="traceIdentifier">设置跟踪标识</param>
            <param name="escape">是否转义字符串，默认 <c>false</c></param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.SetContentType(System.String)">
            <summary>
                设置内容类型
            </summary>
            <param name="contentType">内容类型</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.SetContentEncoding(System.Text.Encoding)">
            <summary>
                设置内容类型
            </summary>
            <param name="encoding">内容编码</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.SetContentEncoding(System.String)">
            <summary>
                设置内容类型
            </summary>
            <param name="encodingName">内容编码名</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.SetJsonContent(System.Object,System.Text.Encoding)">
            <summary>
                设置 JSON 内容
            </summary>
            <param name="rawJson">JSON 字符串/原始对象</param>
            <param name="contentEncoding">内容编码</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.SetHtmlContent(System.String,System.Text.Encoding)">
            <summary>
                设置 HTML 内容
            </summary>
            <param name="htmlString">HTML 字符串</param>
            <param name="contentEncoding">内容编码</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.SetXmlContent(System.String,System.Text.Encoding)">
            <summary>
                设置 XML 内容
            </summary>
            <param name="xmlString">XML 字符串</param>
            <param name="contentEncoding">内容编码</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.SetTextContent(System.String,System.Text.Encoding)">
            <summary>
                设置文本内容
            </summary>
            <param name="text">文本</param>
            <param name="contentEncoding">内容编码</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.SetFormUrlEncodedContent(System.Object,System.Text.Encoding,System.Boolean)">
            <summary>
                设置 URL 表单内容
            </summary>
            <param name="rawObject">原始对象</param>
            <param name="contentEncoding">内容编码</param>
            <param name="useStringContent">
                是否使用 <see cref="T:System.Net.Http.StringContent" /> 构建
                <see cref="T:System.Net.Http.FormUrlEncodedContent" />。默认 <c>false</c>。
            </param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.SetRawContent(System.Object,System.String,System.Text.Encoding)">
            <summary>
                设置原始请求内容
            </summary>
            <param name="rawContent">原始请求内容</param>
            <param name="contentType">内容类型</param>
            <param name="contentEncoding">内容编码</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.SetMultipartContent(System.Action{HttpAgent.HttpMultipartFormDataBuilder})">
            <summary>
                设置请求内容，请求类型为 <c>multipart/form-data</c>
            </summary>
            <remarks>
                该操作将强制覆盖 <see cref="M:HttpAgent.HttpRequestBuilder.SetRawContent(System.Object,System.String,System.Text.Encoding)" />、<see cref="M:HttpAgent.HttpRequestBuilder.SetContentEncoding(System.Text.Encoding)" /> 和
                <see cref="M:HttpAgent.HttpRequestBuilder.SetContentType(System.String)" /> 设置的内容。
            </remarks>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.SetMultipartContent(HttpAgent.HttpMultipartFormDataBuilder)">
            <summary>
                设置请求内容，请求类型为 <c>multipart/form-data</c>
            </summary>
            <remarks>
                该操作将强制覆盖 <see cref="M:HttpAgent.HttpRequestBuilder.SetRawContent(System.Object,System.String,System.Text.Encoding)" />、<see cref="M:HttpAgent.HttpRequestBuilder.SetContentEncoding(System.Text.Encoding)" /> 和
                <see cref="M:HttpAgent.HttpRequestBuilder.SetContentType(System.String)" /> 设置的内容。
            </remarks>
            <param name="httpMultipartFormDataBuilder">
                <see cref="T:HttpAgent.HttpMultipartFormDataBuilder" />
            </param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.WithHeaders(System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,System.Globalization.CultureInfo,System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
                设置请求标头
            </summary>
            <remarks>支持多次调用。</remarks>
            <param name="headers">请求标头集合</param>
            <param name="escape">是否转义字符串，默认 <c>false</c></param>
            <param name="culture">
                <see cref="T:System.Globalization.CultureInfo" />
            </param>
            <param name="comparer">
                <see cref="T:System.Collections.Generic.IEqualityComparer`1" />
            </param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.WithHeaders(System.Object,System.Boolean,System.Globalization.CultureInfo,System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
                设置请求标头
            </summary>
            <remarks>支持多次调用。</remarks>
            <param name="headerSource">请求头源对象</param>
            <param name="escape">是否转义字符串，默认 <c>false</c></param>
            <param name="culture">
                <see cref="T:System.Globalization.CultureInfo" />
            </param>
            <param name="comparer">
                <see cref="T:System.Collections.Generic.IEqualityComparer`1" />
            </param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.SetFragment(System.String,System.Boolean)">
            <summary>
                设置片段标识符
            </summary>
            <param name="fragment">片段标识符</param>
            <param name="escape">是否转义字符串，默认 <c>false</c></param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.SetTimeout(System.TimeSpan)">
            <summary>
                设置超时时间
            </summary>
            <param name="timeout">超时时间</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.SetTimeout(System.Double)">
            <summary>
                设置超时时间
            </summary>
            <param name="timeoutMilliseconds">超时时间（毫秒）</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.WithQueryParameters(System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,System.Globalization.CultureInfo,System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
                设置查询参数集合
            </summary>
            <remarks>支持多次调用。</remarks>
            <param name="parameters">查询参数集合</param>
            <param name="escape">是否转义字符串，默认 <c>false</c></param>
            <param name="culture">
                <see cref="T:System.Globalization.CultureInfo" />
            </param>
            <param name="comparer">
                <see cref="T:System.Collections.Generic.IEqualityComparer`1" />
            </param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.WithQueryParameters(System.Object,System.Boolean,System.Globalization.CultureInfo,System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
                设置查询参数集合
            </summary>
            <remarks>支持多次调用。</remarks>
            <param name="parameterSource">查询参数集合</param>
            <param name="escape">是否转义字符串，默认 <c>false</c></param>
            <param name="culture">
                <see cref="T:System.Globalization.CultureInfo" />
            </param>
            <param name="comparer">
                <see cref="T:System.Collections.Generic.IEqualityComparer`1" />
            </param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.WithPathParameters(System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,System.Globalization.CultureInfo,System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
                设置路径参数集合
            </summary>
            <remarks>支持多次调用。</remarks>
            <param name="parameters">路径参数集合</param>
            <param name="escape">是否转义字符串，默认 <c>false</c></param>
            <param name="culture">
                <see cref="T:System.Globalization.CultureInfo" />
            </param>
            <param name="comparer">
                <see cref="T:System.Collections.Generic.IEqualityComparer`1" />
            </param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.WithPathParameters(System.Object,System.Boolean,System.Globalization.CultureInfo,System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
                设置路径参数集合
            </summary>
            <remarks>支持多次调用。</remarks>
            <param name="parameterSource">路径参数源对象</param>
            <param name="escape">是否转义字符串，默认 <c>false</c></param>
            <param name="culture">
                <see cref="T:System.Globalization.CultureInfo" />
            </param>
            <param name="comparer">
                <see cref="T:System.Collections.Generic.IEqualityComparer`1" />
            </param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.WithCookies(System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,System.Globalization.CultureInfo,System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
                设置 Cookies 集合
            </summary>
            <remarks>支持多次调用。</remarks>
            <param name="cookies">Cookies 集合</param>
            <param name="escape">是否转义字符串，默认 <c>false</c></param>
            <param name="culture">
                <see cref="T:System.Globalization.CultureInfo" />
            </param>
            <param name="comparer">
                <see cref="T:System.Collections.Generic.IEqualityComparer`1" />
            </param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.WithCookies(System.Object,System.Boolean,System.Globalization.CultureInfo,System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
                设置 Cookies 集合
            </summary>
            <remarks>支持多次调用。</remarks>
            <param name="cookieSource">Cookie 参数源对象</param>
            <param name="escape">是否转义字符串，默认 <c>false</c></param>
            <param name="culture">
                <see cref="T:System.Globalization.CultureInfo" />
            </param>
            <param name="comparer">
                <see cref="T:System.Collections.Generic.IEqualityComparer`1" />
            </param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.SetHttpClientFactoryName(System.String)">
            <summary>
                设置 <see cref="T:System.Net.Http.HttpClient" /> 实例的配置名称
            </summary>
            <param name="httpClientFactoryName"><see cref="T:System.Net.Http.HttpClient" /> 实例的配置名称</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.SetHttpClientProvider(System.Func{System.ValueTuple{System.Net.Http.HttpClient,System.Action{System.Net.Http.HttpClient}}})">
            <summary>
                设置 <see cref="T:System.Net.Http.HttpClient" /> 实例提供器
            </summary>
            <param name="configure"><inheritdoc cref="T:System.Net.Http.HttpClient" /> 实例提供器</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.AddHttpContentProcessors(System.Func{System.Collections.Generic.IEnumerable{HttpAgent.IHttpContentProcessor}})">
            <summary>
                添加 <see cref="T:HttpAgent.IHttpContentProcessor" /> 集合提供器
            </summary>
            <remarks>支持多次调用。</remarks>
            <param name="configure"><see cref="T:HttpAgent.IHttpContentProcessor" /> 实例提供器</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.AddHttpContentConverters(System.Func{System.Collections.Generic.IEnumerable{HttpAgent.IHttpContentConverter}})">
            <summary>
                添加 <see cref="T:HttpAgent.IHttpContentProcessor" /> 集合提供器
            </summary>
            <remarks>支持多次调用。</remarks>
            <param name="configure"><see cref="T:HttpAgent.IHttpContentProcessor" /> 实例提供器</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.SetOnPreSetContent(System.Action{System.Net.Http.HttpContent})">
            <summary>
                设置用于处理在设置 <see cref="T:System.Net.Http.HttpRequestMessage" /> 的 <c>Content</c> 时的操作
            </summary>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.SetOnPreSendRequest(System.Action{System.Net.Http.HttpRequestMessage})">
            <summary>
                设置在发送 HTTP 请求之前执行的操作
            </summary>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.SetOnPostSendRequest(System.Action{System.Net.Http.HttpResponseMessage})">
            <summary>
                设置在发送 HTTP 请求之后执行的操作
            </summary>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.SetOnSendRequestFailed(System.Action{System.Exception,System.Net.Http.HttpResponseMessage})">
            <summary>
                设置在发送 HTTP 请求发生异常时的操作
            </summary>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.EnsureSuccessStatusCode">
            <summary>
                如果 HTTP 响应的 IsSuccessStatusCode 属性是 <c>false</c>，则引发异常。
            </summary>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.EnsureSuccessStatusCode(System.Boolean)">
            <summary>
                设置是否如果 HTTP 响应的 IsSuccessStatusCode 属性是 <c>false</c>，则引发异常。
            </summary>
            <param name="enabled">布尔值</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.AddBasicAuthentication(System.String,System.String)">
            <summary>
                设置 Basic 身份验证凭据请求授权标头
            </summary>
            <param name="username">用户名</param>
            <param name="password">密码</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.AddJwtBearerAuthentication(System.String)">
            <summary>
                设置 JWT (JSON Web Token) 身份验证凭据请求授权标头
            </summary>
            <param name="jwtToken">JWT 字符串</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.AddAuthentication(System.Net.Http.Headers.AuthenticationHeaderValue)">
            <summary>
                设置身份验证凭据请求授权标头
            </summary>
            <param name="authenticationHeader">
                <see cref="T:System.Net.Http.Headers.AuthenticationHeaderValue" />
            </param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.DisableCache">
            <summary>
                设置禁用 HTTP 缓存
            </summary>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.DisableCache(System.Boolean)">
            <summary>
                设置禁用 HTTP 缓存
            </summary>
            <param name="disabled">布尔值</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.SetEventHandler(System.Type)">
            <summary>
                设置 HTTP 远程请求事件处理程序
            </summary>
            <param name="requestEventHandlerType">实现 <see cref="T:HttpAgent.IHttpRequestEventHandler" /> 接口的类型</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.SetEventHandler``1">
            <summary>
                设置 HTTP 远程请求事件处理程序
            </summary>
            <typeparam name="TRequestEventHandler">
                <see cref="T:HttpAgent.IHttpRequestEventHandler" />
            </typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.UseHttpClientPool">
            <summary>
                设置是否启用 <see cref="T:System.Net.Http.HttpClient" /> 的池化管理
            </summary>
            <remarks>用于在并发请求中复用同一个 <see cref="T:System.Net.Http.HttpClient" /> 实例。</remarks>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.ReleaseHttpClientPooling">
            <summary>
                手动释放 <see cref="T:System.Net.Http.HttpClient" /> 实例管理器
            </summary>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.AddDisposable(System.IDisposable)">
            <summary>
                添加请求结束时需要释放的对象
            </summary>
            <param name="disposable">
                <see cref="T:System.IDisposable" />
            </param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="P:HttpAgent.HttpRequestBuilder.RequestUri">
            <summary>
                请求地址
            </summary>
        </member>
        <member name="P:HttpAgent.HttpRequestBuilder.Method">
            <summary>
                请求方式
            </summary>
        </member>
        <member name="P:HttpAgent.HttpRequestBuilder.TraceIdentifier">
            <summary>
                跟踪标识
            </summary>
            <remarks>
                <para>可为每个请求指定唯一标识符，用于请求的跟踪和调试。</para>
                <para>唯一标识符将在 <see cref="T:System.Net.Http.HttpRequestMessage" /> 类型实例的 <c>Headers</c> 属性中通过 <c>X-Trace-ID</c> 作为键指定。</para>
            </remarks>
        </member>
        <member name="P:HttpAgent.HttpRequestBuilder.ContentType">
            <summary>
                内容类型
            </summary>
        </member>
        <member name="P:HttpAgent.HttpRequestBuilder.ContentEncoding">
            <summary>
                内容编码
            </summary>
            <remarks>默认值为 <c>utf-8</c> 编码。</remarks>
        </member>
        <member name="P:HttpAgent.HttpRequestBuilder.RawContent">
            <summary>
                原始请求内容
            </summary>
            <remarks>此属性值最终将转换为 <see cref="T:System.Net.Http.HttpContent" /> 类型实例。</remarks>
        </member>
        <member name="P:HttpAgent.HttpRequestBuilder.Headers">
            <summary>
                请求标头集合
            </summary>
        </member>
        <member name="P:HttpAgent.HttpRequestBuilder.Fragment">
            <summary>
                片段标识符
            </summary>
            <remarks>请求地址中的 <c>#</c> 符号后面的部分。</remarks>
        </member>
        <member name="P:HttpAgent.HttpRequestBuilder.Timeout">
            <summary>
                超时时间
            </summary>
            <remarks>可为单次请求设置超时时间。</remarks>
        </member>
        <member name="P:HttpAgent.HttpRequestBuilder.QueryParameters">
            <summary>
                查询参数集合
            </summary>
            <remarks>请求地址中位于 <c>?</c> 符号之后且 <c>#</c> 符号之前的部分。</remarks>
        </member>
        <member name="P:HttpAgent.HttpRequestBuilder.PathParameters">
            <summary>
                路径参数集合
            </summary>
            <remarks>用于替换请求地址中符合 <c>{\w+}</c> 正则表达式匹配的数据。</remarks>
        </member>
        <member name="P:HttpAgent.HttpRequestBuilder.Cookies">
            <summary>
                Cookies 集合
            </summary>
            <remarks>
                <para>可为单次请求设置 Cookies。</para>
                <para>Cookies 将在 <see cref="T:System.Net.Http.HttpRequestMessage" /> 类型实例的 <c>Headers</c> 属性中通过 <c>Cookie</c> 作为键指定。</para>
                <para>使用该方式不会自动处理服务器返回的 <c>Set-Cookie</c> 头。</para>
            </remarks>
        </member>
        <member name="P:HttpAgent.HttpRequestBuilder.HttpClientFactoryName">
            <summary>
                <see cref="T:System.Net.Http.HttpClient" /> 实例的配置名称。
            </summary>
            <remarks>
                <para>此属性用于指定 <see cref="T:System.Net.Http.IHttpClientFactory" /> 创建 <see cref="T:System.Net.Http.HttpClient" /> 实例时传递的名称。</para>
                <para>该名称用于标识在服务容器中与特定 <see cref="T:System.Net.Http.HttpClient" /> 实例相关的配置。</para>
            </remarks>
        </member>
        <member name="P:HttpAgent.HttpRequestBuilder.HttpClientProvider">
            <summary>
                <see cref="T:System.Net.Http.HttpClient" /> 实例提供器
            </summary>
            <value>
                <para>返回一个包含 <see cref="T:System.Net.Http.HttpClient" /> 实例及其释放方法的委托。</para>
                <para>释放方法的委托用于在不再需要 <see cref="T:System.Net.Http.HttpClient" /> 实例时释放资源。</para>
            </value>
        </member>
        <member name="P:HttpAgent.HttpRequestBuilder.HttpContentProcessorProviders">
            <summary>
                <see cref="T:HttpAgent.IHttpContentProcessor" /> 集合提供器
            </summary>
            <value>返回多个包含实现 <see cref="T:HttpAgent.IHttpContentProcessor" /> 集合的集合。</value>
        </member>
        <member name="P:HttpAgent.HttpRequestBuilder.HttpContentConverterProviders">
            <summary>
                <see cref="T:HttpAgent.IHttpContentConverter" /> 集合提供器
            </summary>
            <value>返回多个包含实现 <see cref="T:HttpAgent.IHttpContentConverter" /> 集合的集合。</value>
        </member>
        <member name="P:HttpAgent.HttpRequestBuilder.OnPreSetContent">
            <summary>
                用于处理在设置 <see cref="T:System.Net.Http.HttpRequestMessage" /> 的请求消息的内容时的操作
            </summary>
        </member>
        <member name="P:HttpAgent.HttpRequestBuilder.OnPreSendRequest">
            <summary>
                用于处理在发送 HTTP 请求之前的操作
            </summary>
        </member>
        <member name="P:HttpAgent.HttpRequestBuilder.OnPostSendRequest">
            <summary>
                用于处理在发送 HTTP 请求之后的操作
            </summary>
        </member>
        <member name="P:HttpAgent.HttpRequestBuilder.OnSendRequestFailed">
            <summary>
                用于处理在发送 HTTP 请求发生异常时的操作
            </summary>
        </member>
        <member name="P:HttpAgent.HttpRequestBuilder.AuthenticationHeader">
            <summary>
                身份验证凭据请求授权标头
            </summary>
            <remarks>可为单次请求设置身份验证凭据请求授权标头。</remarks>
        </member>
        <member name="P:HttpAgent.HttpRequestBuilder.MultipartFormDataBuilder">
            <summary>
                <inheritdoc cref="T:HttpAgent.HttpMultipartFormDataBuilder" />
            </summary>
        </member>
        <member name="P:HttpAgent.HttpRequestBuilder.EnsureSuccessStatusCodeEnabled">
            <summary>
                如果 HTTP 响应的 <c>IsSuccessStatusCode</c> 属性是 <c>false</c>，则引发异常。
            </summary>
            <remarks>默认值为 <c>false</c>。</remarks>
        </member>
        <member name="P:HttpAgent.HttpRequestBuilder.DisableCacheEnabled">
            <summary>
                是否禁用 HTTP 缓存
            </summary>
            <remarks>可为单次请求设置禁用 HTTP 缓存。</remarks>
        </member>
        <member name="P:HttpAgent.HttpRequestBuilder.RequestEventHandlerType">
            <summary>
                实现 <see cref="T:HttpAgent.IHttpRequestEventHandler" /> 的类型
            </summary>
        </member>
        <member name="P:HttpAgent.HttpRequestBuilder.Disposables">
            <summary>
                用于请求结束时需要释放的对象集合
            </summary>
        </member>
        <member name="P:HttpAgent.HttpRequestBuilder.HttpClientPooling">
            <summary>
                <see cref="T:System.Net.Http.HttpClient" /> 实例管理器
            </summary>
        </member>
        <member name="P:HttpAgent.HttpRequestBuilder.HttpClientPoolingEnabled">
            <summary>
                是否启用 <see cref="T:System.Net.Http.HttpClient" /> 的池化管理
            </summary>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.Get(System.String,System.Action{HttpAgent.HttpRequestBuilder})">
            <summary>
                创建 <c>GET</c> 请求的 <see cref="T:HttpAgent.HttpRequestBuilder" /> 构建器
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.Get(System.Uri,System.Action{HttpAgent.HttpRequestBuilder})">
            <summary>
                创建 <c>GET</c> 请求的 <see cref="T:HttpAgent.HttpRequestBuilder" /> 构建器
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.Put(System.String,System.Action{HttpAgent.HttpRequestBuilder})">
            <summary>
                创建 <c>PUT</c> 请求的 <see cref="T:HttpAgent.HttpRequestBuilder" /> 构建器
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.Put(System.Uri,System.Action{HttpAgent.HttpRequestBuilder})">
            <summary>
                创建 <c>PUT</c> 请求的 <see cref="T:HttpAgent.HttpRequestBuilder" /> 构建器
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.Post(System.String,System.Action{HttpAgent.HttpRequestBuilder})">
            <summary>
                创建 <c>POST</c> 请求的 <see cref="T:HttpAgent.HttpRequestBuilder" /> 构建器
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.Post(System.Uri,System.Action{HttpAgent.HttpRequestBuilder})">
            <summary>
                创建 <c>POST</c> 请求的 <see cref="T:HttpAgent.HttpRequestBuilder" /> 构建器
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.Delete(System.String,System.Action{HttpAgent.HttpRequestBuilder})">
            <summary>
                创建 <c>DELETE</c> 请求的 <see cref="T:HttpAgent.HttpRequestBuilder" /> 构建器
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.Delete(System.Uri,System.Action{HttpAgent.HttpRequestBuilder})">
            <summary>
                创建 <c>DELETE</c> 请求的 <see cref="T:HttpAgent.HttpRequestBuilder" /> 构建器
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.Head(System.String,System.Action{HttpAgent.HttpRequestBuilder})">
            <summary>
                创建 <c>HEAD</c> 请求的 <see cref="T:HttpAgent.HttpRequestBuilder" /> 构建器
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.Head(System.Uri,System.Action{HttpAgent.HttpRequestBuilder})">
            <summary>
                创建 <c>HEAD</c> 请求的 <see cref="T:HttpAgent.HttpRequestBuilder" /> 构建器
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.Options(System.String,System.Action{HttpAgent.HttpRequestBuilder})">
            <summary>
                创建 <c>OPTIONS</c> 请求的 <see cref="T:HttpAgent.HttpRequestBuilder" /> 构建器
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.Options(System.Uri,System.Action{HttpAgent.HttpRequestBuilder})">
            <summary>
                创建 <c>OPTIONS</c> 请求的 <see cref="T:HttpAgent.HttpRequestBuilder" /> 构建器
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.Trace(System.String,System.Action{HttpAgent.HttpRequestBuilder})">
            <summary>
                创建 <c>TRACE</c> 请求的 <see cref="T:HttpAgent.HttpRequestBuilder" /> 构建器
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.Trace(System.Uri,System.Action{HttpAgent.HttpRequestBuilder})">
            <summary>
                创建 <c>TRACE</c> 请求的 <see cref="T:HttpAgent.HttpRequestBuilder" /> 构建器
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.Patch(System.String,System.Action{HttpAgent.HttpRequestBuilder})">
            <summary>
                创建 <c>PATCH</c> 请求的 <see cref="T:HttpAgent.HttpRequestBuilder" /> 构建器
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.Patch(System.Uri,System.Action{HttpAgent.HttpRequestBuilder})">
            <summary>
                创建 <c>PATCH</c> 请求的 <see cref="T:HttpAgent.HttpRequestBuilder" /> 构建器
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.Create(System.Net.Http.HttpMethod,System.Uri)">
            <summary>
                创建 <see cref="T:HttpAgent.HttpRequestBuilder" /> 构建器
            </summary>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.Create(System.Net.Http.HttpMethod,System.String)">
            <summary>
                创建 <see cref="T:HttpAgent.HttpRequestBuilder" /> 构建器
            </summary>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.Create(System.String,System.String)">
            <summary>
                创建 <see cref="T:HttpAgent.HttpRequestBuilder" /> 构建器
            </summary>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.Create(System.String,System.Uri)">
            <summary>
                创建 <see cref="T:HttpAgent.HttpRequestBuilder" /> 构建器
            </summary>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.Create(System.Net.Http.HttpMethod,System.Uri,System.Action{HttpAgent.HttpRequestBuilder})">
            <summary>
                创建 <see cref="T:HttpAgent.HttpRequestBuilder" /> 构建器
            </summary>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.Create(System.Net.Http.HttpMethod,System.String,System.Action{HttpAgent.HttpRequestBuilder})">
            <summary>
                创建 <see cref="T:HttpAgent.HttpRequestBuilder" /> 构建器
            </summary>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.Create(System.String,System.String,System.Action{HttpAgent.HttpRequestBuilder})">
            <summary>
                创建 <see cref="T:HttpAgent.HttpRequestBuilder" /> 构建器
            </summary>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.DownloadFile(System.Net.Http.HttpMethod,System.Uri,System.String,System.Func{HttpAgent.FileTransferProgress,System.Threading.Tasks.Task})">
            <summary>
                创建 <see cref="T:HttpAgent.HttpFileDownloadBuilder" /> 构建器
            </summary>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址</param>
            <param name="destinationPath">文件保存的目标路径</param>
            <param name="onProgressChanged">用于传输进度发生变化时执行的委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpFileDownloadBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.DownloadFile(System.Uri,System.String,System.Func{HttpAgent.FileTransferProgress,System.Threading.Tasks.Task})">
            <summary>
                创建 <see cref="T:HttpAgent.HttpFileDownloadBuilder" /> 构建器
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="destinationPath">文件保存的目标路径</param>
            <param name="onProgressChanged">用于传输进度发生变化时执行的委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpFileDownloadBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.DownloadFile(System.String,System.String,System.Func{HttpAgent.FileTransferProgress,System.Threading.Tasks.Task})">
            <summary>
                创建 <see cref="T:HttpAgent.HttpFileDownloadBuilder" /> 构建器
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="destinationPath">文件保存的目标路径</param>
            <param name="onProgressChanged">用于传输进度发生变化时执行的委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpFileDownloadBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.UploadFile(System.Net.Http.HttpMethod,System.Uri,System.String,System.String,System.Func{HttpAgent.FileTransferProgress,System.Threading.Tasks.Task})">
            <summary>
                创建 <see cref="T:HttpAgent.HttpFileUploadBuilder" /> 构建器
            </summary>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址</param>
            <param name="fileFullName">文件完整路径</param>
            <param name="name">表单名称；默认值为 <c>file</c>。</param>
            <param name="onProgressChanged">用于传输进度发生变化时执行的委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpFileUploadBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.UploadFile(System.Uri,System.String,System.String,System.Func{HttpAgent.FileTransferProgress,System.Threading.Tasks.Task})">
            <summary>
                创建 <see cref="T:HttpAgent.HttpFileUploadBuilder" /> 构建器
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="fileFullName">文件完整路径</param>
            <param name="name">表单名称；默认值为 <c>file</c>。</param>
            <param name="onProgressChanged">用于传输进度发生变化时执行的委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpFileUploadBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.UploadFile(System.String,System.String,System.String,System.Func{HttpAgent.FileTransferProgress,System.Threading.Tasks.Task})">
            <summary>
                创建 <see cref="T:HttpAgent.HttpFileUploadBuilder" /> 构建器
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="fileFullName">文件完整路径</param>
            <param name="name">表单名称；默认值为 <c>file</c>。</param>
            <param name="onProgressChanged">用于传输进度发生变化时执行的委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpFileUploadBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.ServerSentEvents(System.Uri,System.Func{HttpAgent.ServerSentEventsData,System.Threading.Tasks.Task})">
            <summary>
                创建 <see cref="T:HttpAgent.HttpServerSentEventsBuilder" /> 构建器
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="onMessage">用于在从事件源接收到数据时的操作</param>
            <returns>
                <see cref="T:HttpAgent.HttpServerSentEventsBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.ServerSentEvents(System.String,System.Func{HttpAgent.ServerSentEventsData,System.Threading.Tasks.Task})">
            <summary>
                创建 <see cref="T:HttpAgent.HttpServerSentEventsBuilder" /> 构建器
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="onMessage">用于在从事件源接收到数据时的操作</param>
            <returns>
                <see cref="T:HttpAgent.HttpServerSentEventsBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.StressTestHarness(System.Net.Http.HttpMethod,System.Uri)">
            <summary>
                创建 <see cref="T:HttpAgent.HttpStressTestHarnessBuilder" /> 构建器
            </summary>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址</param>
            <returns>
                <see cref="T:HttpAgent.HttpStressTestHarnessBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.StressTestHarness(System.Uri)">
            <summary>
                创建 <see cref="T:HttpAgent.HttpStressTestHarnessBuilder" /> 构建器
            </summary>
            <param name="requestUri">请求地址</param>
            <returns>
                <see cref="T:HttpAgent.HttpStressTestHarnessBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.StressTestHarness(System.String)">
            <summary>
                创建 <see cref="T:HttpAgent.HttpStressTestHarnessBuilder" /> 构建器
            </summary>
            <param name="requestUri">请求地址</param>
            <returns>
                <see cref="T:HttpAgent.HttpStressTestHarnessBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.LongPolling(System.Net.Http.HttpMethod,System.Uri,System.Func{System.Net.Http.HttpResponseMessage,System.Threading.Tasks.Task})">
            <summary>
                创建 <see cref="T:HttpAgent.HttpLongPollingBuilder" /> 构建器
            </summary>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址</param>
            <param name="onDataReceived">用于在长轮询时接收到数据时的操作</param>
            <returns>
                <see cref="T:HttpAgent.HttpLongPollingBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.LongPolling(System.Uri,System.Func{System.Net.Http.HttpResponseMessage,System.Threading.Tasks.Task})">
            <summary>
                创建 <see cref="T:HttpAgent.HttpLongPollingBuilder" /> 构建器
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="onDataReceived">用于在长轮询时接收到数据时的操作</param>
            <returns>
                <see cref="T:HttpAgent.HttpLongPollingBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRequestBuilder.LongPolling(System.String,System.Func{System.Net.Http.HttpResponseMessage,System.Threading.Tasks.Task})">
            <summary>
                创建 <see cref="T:HttpAgent.HttpLongPollingBuilder" /> 构建器
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="onDataReceived">用于在长轮询时接收到数据时的操作</param>
            <returns>
                <see cref="T:HttpAgent.HttpLongPollingBuilder" />
            </returns>
        </member>
        <member name="T:HttpAgent.HttpServerSentEventsBuilder">
            <summary>
                HTTP Server-Sent Events 构建器
            </summary>
            <remarks>
                <para>使用 <c>HttpRequestBuilder.EventSource(requestUri, onMessage)</c> 静态方法创建。</para>
                <para>参考文献：https://developer.mozilla.org/zh-CN/docs/Web/API/Server-sent_events/Using_server-sent_events。</para>
            </remarks>
        </member>
        <member name="M:HttpAgent.HttpServerSentEventsBuilder.#ctor(System.Uri)">
            <summary>
                <inheritdoc cref="T:HttpAgent.HttpServerSentEventsBuilder" />
            </summary>
            <param name="requestUri">请求地址</param>
        </member>
        <member name="P:HttpAgent.HttpServerSentEventsBuilder.RequestUri">
            <summary>
                请求地址
            </summary>
        </member>
        <member name="P:HttpAgent.HttpServerSentEventsBuilder.DefaultRetryInterval">
            <summary>
                默认重新连接的间隔时间（毫秒）
            </summary>
            <remarks>默认值为 2000 毫秒。</remarks>
        </member>
        <member name="P:HttpAgent.HttpServerSentEventsBuilder.MaxRetries">
            <summary>
                最大重试次数
            </summary>
            <remarks>默认最大重试次数为 100。</remarks>
        </member>
        <member name="P:HttpAgent.HttpServerSentEventsBuilder.OnOpen">
            <summary>
                用于在与事件源的连接打开时的操作
            </summary>
        </member>
        <member name="P:HttpAgent.HttpServerSentEventsBuilder.OnMessage">
            <summary>
                用于在从事件源接收到数据时的操作
            </summary>
        </member>
        <member name="P:HttpAgent.HttpServerSentEventsBuilder.OnError">
            <summary>
                用于在事件源连接未能打开时的操作
            </summary>
        </member>
        <member name="P:HttpAgent.HttpServerSentEventsBuilder.ServerSentEventsEventHandlerType">
            <summary>
                实现 <see cref="T:HttpAgent.IHttpServerSentEventsEventHandler" /> 的类型
            </summary>
        </member>
        <member name="M:HttpAgent.HttpServerSentEventsBuilder.SetDefaultRetryInterval(System.Int32)">
            <summary>
                设置默认重新连接的间隔时间
            </summary>
            <param name="retryInterval">默认重新连接的间隔时间</param>
            <returns>
                <see cref="T:HttpAgent.HttpServerSentEventsBuilder" />
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:HttpAgent.HttpServerSentEventsBuilder.SetMaxRetries(System.Int32)">
            <summary>
                设置最大重试次数
            </summary>
            <param name="maxRetries">最大重试次数</param>
            <returns>
                <see cref="T:HttpAgent.HttpServerSentEventsBuilder" />
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:HttpAgent.HttpServerSentEventsBuilder.SetOnOpen(System.Action)">
            <summary>
                设置用于在与事件源的连接打开时的操作
            </summary>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpServerSentEventsBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpServerSentEventsBuilder.SetOnMessage(System.Func{HttpAgent.ServerSentEventsData,System.Threading.Tasks.Task})">
            <summary>
                设置用于在从事件源接收到数据时的操作
            </summary>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpServerSentEventsBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpServerSentEventsBuilder.SetOnError(System.Action{System.Exception})">
            <summary>
                设置用于在事件源连接未能打开时的操作
            </summary>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpServerSentEventsBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpServerSentEventsBuilder.SetEventHandler(System.Type)">
            <summary>
                设置 Server-Sent Events 事件处理程序
            </summary>
            <param name="serverSentEventsEventHandlerType">实现 <see cref="T:HttpAgent.IHttpServerSentEventsEventHandler" /> 接口的类型</param>
            <returns>
                <see cref="T:HttpAgent.HttpServerSentEventsBuilder" />
            </returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:HttpAgent.HttpServerSentEventsBuilder.SetEventHandler``1">
            <summary>
                设置 Server-Sent Events 事件处理程序
            </summary>
            <typeparam name="TServerSentEventsEventHandler">
                <see cref="T:HttpAgent.IHttpServerSentEventsEventHandler" />
            </typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpServerSentEventsBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpServerSentEventsBuilder.Build(HttpAgent.HttpRemoteOptions,System.Action{HttpAgent.HttpRequestBuilder})">
            <summary>
                构建 <see cref="T:HttpAgent.HttpRequestBuilder" /> 实例
            </summary>
            <param name="httpRemoteOptions">
                <see cref="T:HttpAgent.HttpRemoteOptions" />
            </param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="T:HttpAgent.HttpStressTestHarnessBuilder">
            <summary>
                压力测试构建器
            </summary>
            <remarks>使用 <c>HttpRequestBuilder.StressTestHarness(requestUri)</c> 静态方法创建。</remarks>
        </member>
        <member name="M:HttpAgent.HttpStressTestHarnessBuilder.#ctor(System.Net.Http.HttpMethod,System.Uri)">
            <summary>
                <inheritdoc cref="T:HttpAgent.HttpStressTestHarnessBuilder" />
            </summary>
            <param name="httpMethod">请求方式</param>
            <param name="requestUri">请求地址</param>
        </member>
        <member name="P:HttpAgent.HttpStressTestHarnessBuilder.RequestUri">
            <summary>
                请求地址
            </summary>
        </member>
        <member name="P:HttpAgent.HttpStressTestHarnessBuilder.Method">
            <summary>
                请求方式
            </summary>
        </member>
        <member name="P:HttpAgent.HttpStressTestHarnessBuilder.NumberOfRequests">
            <summary>
                并发请求数量
            </summary>
            <remarks>默认值为：100。</remarks>
        </member>
        <member name="P:HttpAgent.HttpStressTestHarnessBuilder.MaxDegreeOfParallelism">
            <summary>
                最大并发度
            </summary>
            <remarks>用于控制系统在同一时间内处理的请求数量。默认值为：100。</remarks>
        </member>
        <member name="P:HttpAgent.HttpStressTestHarnessBuilder.NumberOfRounds">
            <summary>
                压测轮次
            </summary>
            <remarks>默认值为：1。</remarks>
        </member>
        <member name="M:HttpAgent.HttpStressTestHarnessBuilder.SetNumberOfRequests(System.Int32)">
            <summary>
                设置并发请求数量
            </summary>
            <param name="numberOfRequests">并发请求数量</param>
            <returns>
                <see cref="T:HttpAgent.HttpStressTestHarnessBuilder" />
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:HttpAgent.HttpStressTestHarnessBuilder.SetMaxDegreeOfParallelism(System.Int32)">
            <summary>
                设置最大并发度
            </summary>
            <param name="maxDegreeOfParallelism">最大并发度</param>
            <returns>
                <see cref="T:HttpAgent.HttpStressTestHarnessBuilder" />
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:HttpAgent.HttpStressTestHarnessBuilder.SetNumberOfRounds(System.Int32)">
            <summary>
                设置压测轮次
            </summary>
            <param name="numberOfRounds">压测轮次</param>
            <returns>
                <see cref="T:HttpAgent.HttpStressTestHarnessBuilder" />
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:HttpAgent.HttpStressTestHarnessBuilder.Build(HttpAgent.HttpRemoteOptions,System.Action{HttpAgent.HttpRequestBuilder})">
            <summary>
                构建 <see cref="T:HttpAgent.HttpRequestBuilder" /> 实例
            </summary>
            <param name="httpRemoteOptions">
                <see cref="T:HttpAgent.HttpRemoteOptions" />
            </param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </returns>
        </member>
        <member name="T:HttpAgent.Constants">
            <summary>
                HTTP 远程请求模块常量配置
            </summary>
        </member>
        <member name="F:HttpAgent.Constants.X_TRACE_ID_HEADER">
            <summary>
                请求跟踪标识标头
            </summary>
        </member>
        <member name="F:HttpAgent.Constants.UTF8_ENCODING">
            <summary>
                <c>UTF-8</c> 编码名
            </summary>
        </member>
        <member name="F:HttpAgent.Constants.UNKNOWN_USER_AGENT_VERSION">
            <summary>
                未知 <c>User Agent</c> 版本
            </summary>
        </member>
        <member name="F:HttpAgent.Constants.FORM_DATA_DISPOSITION_TYPE">
            <summary>
                内容正文部分的处置类型
            </summary>
        </member>
        <member name="F:HttpAgent.Constants.BASIC_AUTHENTICATION_SCHEME">
            <summary>
                Basic 授权标识
            </summary>
        </member>
        <member name="F:HttpAgent.Constants.JWT_BEARER_AUTHENTICATION_SCHEME">
            <summary>
                JWT (JSON Web Token) 授权标识
            </summary>
        </member>
        <member name="F:HttpAgent.Constants.DEFAULT_CONTENT_TYPE">
            <summary>
                默认请求内容类型
            </summary>
        </member>
        <member name="F:HttpAgent.Constants.X_END_OF_STREAM_HEADER">
            <summary>
                响应结束符标头
            </summary>
        </member>
        <member name="F:HttpAgent.Constants.X_ORIGINAL_URL_HEADER">
            <summary>
                请求原始地址标头
            </summary>
        </member>
        <member name="F:HttpAgent.Constants.X_STRESS_TEST_HEADER">
            <summary>
                压力测试标头
            </summary>
        </member>
        <member name="F:HttpAgent.Constants.X_STRESS_TEST_VALUE">
            <summary>
                压力测试标头值
            </summary>
        </member>
        <member name="T:HttpAgent.FileExistsBehavior">
            <summary>
                指定当目标文件已存在时的行为
            </summary>
        </member>
        <member name="F:HttpAgent.FileExistsBehavior.CreateNew">
            <summary>
                创建新文件
            </summary>
            <remarks>如果文件已存在则抛出异常。</remarks>
        </member>
        <member name="F:HttpAgent.FileExistsBehavior.Overwrite">
            <summary>
                覆盖现有文件
            </summary>
        </member>
        <member name="F:HttpAgent.FileExistsBehavior.Skip">
            <summary>
                保留现有文件
            </summary>
            <remarks>不进行任何操作。</remarks>
        </member>
        <member name="T:HttpAgent.ByteArrayContentConverter">
            <summary>
                字节数组内容转换器
            </summary>
        </member>
        <member name="M:HttpAgent.ByteArrayContentConverter.Read(System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.ByteArrayContentConverter.ReadAsync(System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:HttpAgent.IHttpContentConverter">
            <summary>
                <see cref="T:HttpAgent.IHttpContentConverter`1" /> 默认实现接口
            </summary>
        </member>
        <member name="T:HttpAgent.IHttpContentConverter`1">
            <summary>
                <see cref="T:System.Net.Http.HttpResponseMessage" /> 转换器
            </summary>
            <typeparam name="TResult">转换的目标类型</typeparam>
        </member>
        <member name="M:HttpAgent.IHttpContentConverter`1.Read(System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)">
            <summary>
                从 <see cref="T:System.Net.Http.HttpResponseMessage" /> 中同步读取数据并转换为目标类型
            </summary>
            <param name="httpResponseMessage">
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <typeparamref name="TResult" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpContentConverter`1.ReadAsync(System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)">
            <summary>
                从 <see cref="T:System.Net.Http.HttpResponseMessage" /> 中异步读取数据并转换为目标类型
            </summary>
            <param name="httpResponseMessage">
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <typeparamref name="TResult" />
            </returns>
        </member>
        <member name="T:HttpAgent.ObjectContentConverter`1">
            <summary>
                对象转换器
            </summary>
            <typeparam name="TResult">转换的目标类型</typeparam>
        </member>
        <member name="M:HttpAgent.ObjectContentConverter`1.Read(System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.ObjectContentConverter`1.ReadAsync(System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:HttpAgent.StreamContentConverter">
            <summary>
                流内容转换器
            </summary>
        </member>
        <member name="M:HttpAgent.StreamContentConverter.Read(System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.StreamContentConverter.ReadAsync(System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:HttpAgent.StringContentConverter">
            <summary>
                字符串内容转换器
            </summary>
        </member>
        <member name="M:HttpAgent.StringContentConverter.Read(System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.StringContentConverter.ReadAsync(System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:HttpAgent.Core.Extensions.AssemblyExtensions">
            <summary>
                <see cref="T:System.Reflection.Assembly" /> 拓展类
            </summary>
        </member>
        <member name="M:HttpAgent.Core.Extensions.AssemblyExtensions.GetVersion(System.Reflection.Assembly)">
            <summary>
                获取程序集版本
            </summary>
            <param name="assembly">
                <see cref="T:System.Reflection.Assembly" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:HttpAgent.Core.Extensions.AssemblyExtensions.ConvertTo``1(System.Reflection.Assembly,System.Func{System.Reflection.Assembly,``0})">
            <summary>
                将程序集转换成指定类型返回
            </summary>
            <param name="assembly">
                <see cref="T:System.Reflection.Assembly" />
            </param>
            <param name="configure">自定义配置委托</param>
            <typeparam name="TResult">结果类型</typeparam>
            <returns>
                <typeparamref name="TResult" />
            </returns>
        </member>
        <member name="T:HttpAgent.Core.Extensions.DelegateExtensions">
            <summary>
                委托拓展类
            </summary>
        </member>
        <member name="M:HttpAgent.Core.Extensions.DelegateExtensions.TryInvokeAsync``1(System.Func{``0,System.Threading.Tasks.Task},``0)">
            <summary>
                尝试执行异步委托
            </summary>
            <param name="func">异步委托</param>
            <param name="parameter">参数</param>
            <typeparam name="T">参数类型</typeparam>
        </member>
        <member name="M:HttpAgent.Core.Extensions.DelegateExtensions.TryInvoke``2(System.Action{``0,``1},``0,``1)">
            <summary>
                尝试执行同步委托
            </summary>
            <param name="action">同步委托</param>
            <param name="parameter1">参数 1</param>
            <param name="parameter2">参数 2</param>
            <typeparam name="T1">参数类型</typeparam>
            <typeparam name="T2">参数类型</typeparam>
        </member>
        <member name="M:HttpAgent.Core.Extensions.DelegateExtensions.TryInvoke``1(System.Action{``0},``0)">
            <summary>
                尝试执行同步委托
            </summary>
            <param name="action">同步委托</param>
            <param name="parameter">参数</param>
            <typeparam name="T">参数类型</typeparam>
        </member>
        <member name="M:HttpAgent.Core.Extensions.DelegateExtensions.TryInvoke(System.Action)">
            <summary>
                尝试执行同步委托
            </summary>
            <param name="action">同步委托</param>
        </member>
        <member name="T:HttpAgent.Core.Extensions.ICollectionExtensions">
            <summary>
                <see cref="T:System.Collections.Generic.ICollection`1" /> 拓展类
            </summary>
        </member>
        <member name="M:HttpAgent.Core.Extensions.ICollectionExtensions.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
                判断集合是否为空
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="collection">
                <see cref="T:System.Collections.Generic.ICollection`1" />
            </param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="T:HttpAgent.Core.Extensions.IDictionaryExtensions">
            <summary>
                <see cref="T:System.Collections.Generic.IDictionary`2" /> 拓展类
            </summary>
        </member>
        <member name="M:HttpAgent.Core.Extensions.IDictionaryExtensions.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,System.Collections.Generic.List{``1}},System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
                添加或更新
            </summary>
            <typeparam name="TKey">字典键类型</typeparam>
            <typeparam name="TValue">字典值类型</typeparam>
            <param name="dictionary">
                <see cref="T:System.Collections.Generic.IDictionary`2" />
            </param>
            <param name="concatDictionary">
                <see cref="T:System.Collections.Generic.IDictionary`2" />
            </param>
        </member>
        <member name="M:HttpAgent.Core.Extensions.IDictionaryExtensions.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
                添加或更新
            </summary>
            <typeparam name="TKey">字典键类型</typeparam>
            <typeparam name="TValue">字典值类型</typeparam>
            <param name="dictionary">
                <see cref="T:System.Collections.Generic.IDictionary`2" />
            </param>
            <param name="concatDictionary">
                <see cref="T:System.Collections.Generic.IDictionary`2" />
            </param>
        </member>
        <member name="M:HttpAgent.Core.Extensions.IDictionaryExtensions.TryAdd``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IEnumerable{``1},System.Func{``1,``0})">
            <summary>
                尝试添加
            </summary>
            <remarks>其中键是由值通过给定的选择器函数生成的。</remarks>
            <param name="dictionary">
                <see cref="T:System.Collections.Generic.IDictionary`2" />
            </param>
            <param name="values">
                <see cref="T:System.Collections.Generic.IEnumerable`1" />
            </param>
            <param name="keySelector">键选择器</param>
            <typeparam name="TKey">字典键类型</typeparam>
            <typeparam name="TValue">字典值类型</typeparam>
        </member>
        <member name="T:HttpAgent.Core.Extensions.NumberExtensions">
            <summary>
                数值类型拓展类
            </summary>
        </member>
        <member name="M:HttpAgent.Core.Extensions.NumberExtensions.ToSizeUnits(System.Double,System.String)">
            <summary>
                根据指定的单位将字节数进行转换
            </summary>
            <param name="byteSize">字节数</param>
            <param name="unit">单位。可选值为：<c>B</c>, <c>KB</c>, <c>MB</c>, <c>GB</c>, <c>TB</c>, <c>PB</c>, <c>EB</c>。</param>
            <returns>
                <see cref="T:System.Double" />
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:HttpAgent.Core.Extensions.NumberExtensions.ToSizeUnits(System.Int64,System.String)">
            <summary>
                根据指定的单位将字节数进行转换
            </summary>
            <param name="byteSize">字节数</param>
            <param name="unit">单位。可选值为：<c>B</c>, <c>KB</c>, <c>MB</c>, <c>GB</c>, <c>TB</c>, <c>PB</c>, <c>EB</c>。</param>
            <returns>
                <see cref="T:System.Double" />
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="T:HttpAgent.Core.Extensions.ObjectExtensions">
            <summary>
                <see cref="T:System.Object" /> 拓展类
            </summary>
        </member>
        <member name="M:HttpAgent.Core.Extensions.ObjectExtensions.ToCultureString(System.Object,System.Globalization.CultureInfo,System.Boolean)">
            <summary>
                将对象转换为基于特定文化的字符串表示形式
            </summary>
            <param name="obj">
                <see cref="T:System.Object" />
            </param>
            <param name="culture">
                <see cref="T:System.Globalization.CultureInfo" />
            </param>
            <param name="enumAsString">指示是否将枚举类型的值作为名称输出，默认为 <c>true</c>。若为 <c>false</c>，则输出枚举的值</param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:HttpAgent.Core.Extensions.ObjectExtensions.ObjectToDictionary(System.Object)">
            <summary>
                将对象转换为 <see cref="T:System.Collections.Generic.IDictionary`2" /> 类型对象
            </summary>
            <param name="obj">
                <see cref="T:System.Object" />
            </param>
            <returns>
                <see cref="T:System.Collections.Generic.IDictionary`2" />
            </returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="T:HttpAgent.Core.Extensions.StringExtensions">
            <summary>
                <see cref="T:System.String" /> 拓展类
            </summary>
        </member>
        <member name="M:HttpAgent.Core.Extensions.StringExtensions.EscapeDataString(System.String,System.Boolean)">
            <summary>
                将字符串进行转义
            </summary>
            <param name="input">
                <see cref="T:System.String" />
            </param>
            <param name="escape">是否转义字符串</param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:HttpAgent.Core.Extensions.StringExtensions.IsIn(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.IEqualityComparer)">
            <summary>
                检查字符串是否存在于给定的集合中
            </summary>
            <param name="input">
                <see cref="T:System.String" />
            </param>
            <param name="collection">
                <see cref="T:System.Collections.Generic.IEnumerable`1" />
            </param>
            <param name="comparer">
                <see cref="T:System.Collections.IEqualityComparer" />
            </param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:HttpAgent.Core.Extensions.StringExtensions.ParseUrlQueryParameters(System.String)">
            <summary>
                解析 URL 中的查询字符串为键值对列表
            </summary>
            <param name="urlQuery">URL 中的查询字符串</param>
            <returns>
                <see cref="T:System.Collections.Generic.List`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.Core.Extensions.StringExtensions.PadStringToByteLength(System.String,System.Int32)">
            <summary>
                基于 GBK 编码将字符串右填充至指定的字节数
            </summary>
            <remarks>调用之前需确保上下文存在 <c>Encoding.RegisterProvider(CodePagesEncodingProvider.Instance);</c> 代码。</remarks>
            <param name="output">字符串</param>
            <param name="totalByteCount">目标字节数</param>
            <returns>
                <see cref="T:System.String" />
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:HttpAgent.Core.Extensions.StringExtensions.ReplacePlaceholders(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
                替换字符串中的占位符为实际值
            </summary>
            <param name="template">包含占位符的模板字符串</param>
            <param name="replacementSource">
                <see cref="T:System.Collections.Generic.IDictionary`2" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:HttpAgent.Core.Extensions.StringExtensions.PlaceholderRegex">
            <remarks>
            Pattern:<br/>
            <code>\\{(\\w+)\\}</code><br/>
            Explanation:<br/>
            <code>
            ○ Match '{'.<br/>
            ○ 1st capture group.<br/>
                ○ Match a word character atomically at least once.<br/>
            ○ Match '}'.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:HttpAgent.Core.Extensions.TypeExtensions">
            <summary>
                <see cref="T:System.Type" /> 拓展类
            </summary>
        </member>
        <member name="M:HttpAgent.Core.Extensions.TypeExtensions.IsBasicType(System.Type)">
            <summary>
                检查类型是否是基本类型
            </summary>
            <param name="type">
                <see cref="T:System.Type" />
            </param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:HttpAgent.Core.Extensions.TypeExtensions.IsKeyValuePair(System.Type)">
            <summary>
                检查类型是否是 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 类型
            </summary>
            <param name="type">
                <see cref="T:System.Type" />
            </param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:HttpAgent.Core.Extensions.TypeExtensions.IsKeyValueCollection(System.Type,System.Boolean@)">
            <summary>
                检查类型是否是键值对集合类型
            </summary>
            <param name="type">
                <see cref="T:System.Type" />
            </param>
            <param name="isKeyValuePairCollection">是否是 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 集合类型</param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:HttpAgent.Core.Extensions.TypeExtensions.GetKeyValuePairOrJPropertyGetters(System.Type)">
            <summary>
                获取 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 或 <c>Newtonsoft.Json.Linq.JProperty</c> 类型键值属性值访问器
            </summary>
            <param name="keyValuePairType">
                <see cref="T:System.Type" />
            </param>
            <returns>
                <see cref="T:System.Tuple`2" />
            </returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:HttpAgent.Core.Extensions.TypeExtensions.CreatePropertyGetter(System.Type,System.Reflection.PropertyInfo)">
            <summary>
                创建实例属性值访问器
            </summary>
            <param name="type">
                <see cref="T:System.Type" />
            </param>
            <param name="propertyInfo">
                <see cref="T:System.Reflection.PropertyInfo" />
            </param>
            <returns>
                <see cref="T:System.Func`2" />
            </returns>
        </member>
        <member name="T:HttpAgent.Core.Utilities.NetworkUtility">
            <summary>
                提供网络相关的实用方法
            </summary>
        </member>
        <member name="M:HttpAgent.Core.Utilities.NetworkUtility.FindAvailableTcpPort">
            <summary>
                查找一个可用的 TCP 端口
            </summary>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:HttpAgent.Core.Utilities.NetworkUtility.IsPortInUse(System.Int32)">
            <summary>
                检查指定端口是否正在使用
            </summary>
            <remarks>如果端口正在使用则返回 <c>true</c>，否则返回 <c>false</c>。</remarks>
            <param name="port">要检查的端口号。</param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="T:HttpAgent.Core.Utilities.StringUtility">
            <summary>
                提供字符串实用方法
            </summary>
        </member>
        <member name="M:HttpAgent.Core.Utilities.StringUtility.FormatKeyValuesSummary(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Collections.Generic.IEnumerable{System.String}}},System.String)">
            <summary>
                格式化键值集合摘要
            </summary>
            <param name="keyValues">键值集合</param>
            <param name="summary">摘要</param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="T:HttpAgent.ProfilerDelegatingHandler">
            <summary>
                HTTP 远程请求分析工具中间件
            </summary>
            <remarks>参考文献：https://learn.microsoft.com/zh-cn/aspnet/core/fundamentals/http-requests?view=aspnetcore-8.0#outgoing-request-middleware</remarks>
            <param name="logger">
                <see cref="T:Microsoft.Extensions.Logging.Logger`1" />
            </param>
        </member>
        <member name="M:HttpAgent.ProfilerDelegatingHandler.#ctor(Microsoft.Extensions.Logging.ILogger{HttpAgent.Logging})">
            <summary>
                HTTP 远程请求分析工具中间件
            </summary>
            <remarks>参考文献：https://learn.microsoft.com/zh-cn/aspnet/core/fundamentals/http-requests?view=aspnetcore-8.0#outgoing-request-middleware</remarks>
            <param name="logger">
                <see cref="T:Microsoft.Extensions.Logging.Logger`1" />
            </param>
        </member>
        <member name="M:HttpAgent.ProfilerDelegatingHandler.Send(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.ProfilerDelegatingHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.ProfilerDelegatingHandler.LogRequestHeaders(System.Net.Http.HttpRequestMessage)">
            <summary>
                记录请求标头
            </summary>
            <param name="request">
                <see cref="T:System.Net.Http.HttpRequestMessage" />
            </param>
        </member>
        <member name="M:HttpAgent.ProfilerDelegatingHandler.LogResponseHeadersAndSummary(System.Net.Http.HttpResponseMessage,System.Int64)">
            <summary>
                记录常规和响应标头
            </summary>
            <param name="httpResponseMessage">
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </param>
            <param name="requestDuration">请求耗时（毫秒）</param>
        </member>
        <member name="M:HttpAgent.ProfilerDelegatingHandler.Log(System.String)">
            <summary>
                打印日志
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="T:HttpAgent.Extensions.HttpRemoteExtensions">
            <summary>
                HTTP 远程服务拓展类
            </summary>
        </member>
        <member name="M:HttpAgent.Extensions.HttpRemoteExtensions.AddProfilerDelegatingHandler(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder)">
            <summary>
                添加 HTTP 远程请求分析工具中间件
            </summary>
            <param name="builder">
                <see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" />
            </param>
            <returns>
                <see cref="T:Microsoft.Extensions.DependencyInjection.IHttpClientBuilder" />
            </returns>
        </member>
        <member name="M:HttpAgent.Extensions.HttpRemoteExtensions.ProfilerHeaders(System.Net.Http.HttpRequestMessage,System.String)">
            <summary>
                分析 <see cref="T:System.Net.Http.HttpRequestMessage" /> 标头
            </summary>
            <param name="httpRequestMessage">
                <see cref="T:System.Net.Http.HttpRequestMessage" />
            </param>
            <param name="summary">摘要</param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:HttpAgent.Extensions.HttpRemoteExtensions.ProfilerHeaders(System.Net.Http.HttpResponseMessage,System.String)">
            <summary>
                分析 <see cref="T:System.Net.Http.HttpResponseMessage" /> 标头
            </summary>
            <param name="httpResponseMessage">
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </param>
            <param name="summary">摘要</param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:HttpAgent.Extensions.HttpRemoteExtensions.ProfilerGeneralAndHeaders(System.Net.Http.HttpResponseMessage,System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Collections.Generic.IEnumerable{System.String}}})">
            <summary>
                分析常规和 <see cref="T:System.Net.Http.HttpResponseMessage" /> 标头
            </summary>
            <param name="httpResponseMessage">
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </param>
            <param name="responseSummary">响应标头摘要</param>
            <param name="generalSummary">常规摘要</param>
            <param name="generalCustomKeyValues">自定义常规摘要键值集合</param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="T:HttpAgent.HttpContentConverterFactory">
            <inheritdoc cref="T:HttpAgent.IHttpContentConverterFactory" />
        </member>
        <member name="F:HttpAgent.HttpContentConverterFactory._converters">
            <summary>
                <see cref="T:HttpAgent.IHttpContentConverter`1" /> 字典集合
            </summary>
        </member>
        <member name="F:HttpAgent.HttpContentConverterFactory._serviceProvider">
            <inheritdoc cref="T:System.IServiceProvider" />
        </member>
        <member name="M:HttpAgent.HttpContentConverterFactory.#ctor(System.IServiceProvider,HttpAgent.IHttpContentConverter[])">
            <summary>
                <inheritdoc cref="T:HttpAgent.HttpContentConverterFactory" />
            </summary>
            <param name="serviceProvider">
                <see cref="T:System.IServiceProvider" />
            </param>
            <param name="converters"><see cref="T:HttpAgent.IHttpContentConverter`1" /> 数组</param>
        </member>
        <member name="M:HttpAgent.HttpContentConverterFactory.GetConverter``1(HttpAgent.IHttpContentConverter[])">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpContentConverterFactory.Read``1(System.Net.Http.HttpResponseMessage,HttpAgent.IHttpContentConverter[],System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpContentConverterFactory.ReadAsync``1(System.Net.Http.HttpResponseMessage,HttpAgent.IHttpContentConverter[],System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:HttpAgent.HttpContentProcessorFactory">
            <inheritdoc cref="T:HttpAgent.IHttpContentProcessorFactory" />
        </member>
        <member name="F:HttpAgent.HttpContentProcessorFactory._processors">
            <summary>
                <see cref="T:HttpAgent.IHttpContentProcessor" /> 字典集合
            </summary>
        </member>
        <member name="M:HttpAgent.HttpContentProcessorFactory.#ctor(HttpAgent.IHttpContentProcessor[])">
            <summary>
                <inheritdoc cref="T:HttpAgent.HttpContentProcessorFactory" />
            </summary>
            <param name="processors"><see cref="T:HttpAgent.IHttpContentProcessor" /> 数组</param>
        </member>
        <member name="M:HttpAgent.HttpContentProcessorFactory.GetProcessor(System.Object,System.String,HttpAgent.IHttpContentProcessor[])">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpContentProcessorFactory.BuildHttpContent(System.Object,System.String,System.Text.Encoding,HttpAgent.IHttpContentProcessor[])">
            <inheritdoc />
        </member>
        <member name="T:HttpAgent.IHttpContentConverterFactory">
            <summary>
                <see cref="T:HttpAgent.IHttpContentConverter`1" /> 工厂
            </summary>
        </member>
        <member name="M:HttpAgent.IHttpContentConverterFactory.GetConverter``1(HttpAgent.IHttpContentConverter[])">
            <summary>
                获取 <see cref="T:HttpAgent.IHttpContentConverter`1" /> 实例
            </summary>
            <param name="converters"><see cref="T:HttpAgent.IHttpContentConverter`1" /> 数组</param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.IHttpContentConverter`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpContentConverterFactory.Read``1(System.Net.Http.HttpResponseMessage,HttpAgent.IHttpContentConverter[],System.Threading.CancellationToken)">
            <summary>
                将 <see cref="T:System.Net.Http.HttpResponseMessage" /> 转换为
                <typeparamref name="TResult" />
                实例
            </summary>
            <param name="httpResponseMessage"></param>
            <param name="converters"><see cref="T:HttpAgent.IHttpContentConverter`1" /> 数组</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <typeparamref name="TResult" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpContentConverterFactory.ReadAsync``1(System.Net.Http.HttpResponseMessage,HttpAgent.IHttpContentConverter[],System.Threading.CancellationToken)">
            <summary>
                将 <see cref="T:System.Net.Http.HttpResponseMessage" /> 转换为
                <typeparamref name="TResult" />
                实例
            </summary>
            <param name="httpResponseMessage"></param>
            <param name="converters"><see cref="T:HttpAgent.IHttpContentConverter`1" /> 数组</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <typeparamref name="TResult" />
            </returns>
        </member>
        <member name="T:HttpAgent.IHttpContentProcessorFactory">
            <summary>
                <see cref="T:HttpAgent.IHttpContentProcessor" /> 工厂
            </summary>
        </member>
        <member name="M:HttpAgent.IHttpContentProcessorFactory.GetProcessor(System.Object,System.String,HttpAgent.IHttpContentProcessor[])">
            <summary>
                查找可以处理指定内容类型或数据类型的 <see cref="T:HttpAgent.IHttpContentProcessor" /> 实例
            </summary>
            <param name="rawContent">原始请求内容</param>
            <param name="contentType">内容类型</param>
            <param name="processors">自定义 <see cref="T:HttpAgent.IHttpContentProcessor" /> 数组</param>
            <returns>
                <see cref="T:HttpAgent.IHttpContentProcessor" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpContentProcessorFactory.BuildHttpContent(System.Object,System.String,System.Text.Encoding,HttpAgent.IHttpContentProcessor[])">
            <summary>
                构建 <see cref="T:System.Net.Http.HttpContent" /> 实例
            </summary>
            <param name="rawContent">原始请求内容</param>
            <param name="contentType">内容类型</param>
            <param name="encoding">内容编码</param>
            <param name="processors"><see cref="T:HttpAgent.IHttpContentProcessor" /> 数组</param>
            <returns>
                <see cref="T:System.Net.Http.HttpContent" />
            </returns>
        </member>
        <member name="T:HttpAgent.IObjectContentConverterFactory">
            <summary>
                <see cref="T:HttpAgent.ObjectContentConverter`1" /> 工厂
            </summary>
        </member>
        <member name="M:HttpAgent.IObjectContentConverterFactory.GetConverter``1">
            <summary>
                获取 <see cref="T:HttpAgent.ObjectContentConverter`1" /> 实例
            </summary>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.ObjectContentConverter`1" />
            </returns>
        </member>
        <member name="T:HttpAgent.IHttpFileTransferEventHandler">
            <summary>
                HTTP 文件传输事件处理程序
            </summary>
        </member>
        <member name="M:HttpAgent.IHttpFileTransferEventHandler.OnTransferStarted">
            <summary>
                用于处理在文件开始传输时的操作
            </summary>
        </member>
        <member name="M:HttpAgent.IHttpFileTransferEventHandler.OnTransferCompleted(System.Int64)">
            <summary>
                用于处理在文件传输完成时的操作
            </summary>
            <param name="duration">总耗时（毫秒）</param>
        </member>
        <member name="M:HttpAgent.IHttpFileTransferEventHandler.OnTransferFailed(System.Exception)">
            <summary>
                用于处理在文件传输发生异常时的操作
            </summary>
            <param name="exception">
                <see cref="T:System.Exception" />
            </param>
        </member>
        <member name="M:HttpAgent.IHttpFileTransferEventHandler.OnProgressChangedAsync(HttpAgent.FileTransferProgress)">
            <summary>
                用于传输进度发生变化时的操作
            </summary>
            <param name="fileTransferProgress">
                <see cref="T:HttpAgent.FileTransferProgress" />
            </param>
            <returns>
                <see cref="T:System.Threading.Tasks.Task" />
            </returns>
        </member>
        <member name="T:HttpAgent.IHttpLongPollingEventHandler">
            <summary>
                长轮询事件处理程序
            </summary>
        </member>
        <member name="M:HttpAgent.IHttpLongPollingEventHandler.OnDataReceivedAsync(System.Net.Http.HttpResponseMessage)">
            <summary>
                用于在长轮询时接收到数据时的操作
            </summary>
            <param name="httpResponseMessage">
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </param>
            <returns>
                <see cref="T:System.Threading.Tasks.Task" />
            </returns>
        </member>
        <member name="T:HttpAgent.IHttpRequestEventHandler">
            <summary>
                HTTP 远程请求事件处理程序
            </summary>
        </member>
        <member name="M:HttpAgent.IHttpRequestEventHandler.OnPreSendRequest(System.Net.Http.HttpRequestMessage)">
            <summary>
                用于处理在发送 HTTP 请求之前的操作
            </summary>
            <param name="httpRequestMessage">
                <see cref="T:System.Net.Http.HttpRequestMessage" />
            </param>
        </member>
        <member name="M:HttpAgent.IHttpRequestEventHandler.OnPostSendRequest(System.Net.Http.HttpResponseMessage)">
            <summary>
                用于处理在发送 HTTP 请求之后的操作
            </summary>
            <param name="httpResponseMessage">
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </param>
        </member>
        <member name="M:HttpAgent.IHttpRequestEventHandler.OnSendRequestFailed(System.Exception,System.Net.Http.HttpResponseMessage)">
            <summary>
                用于处理在发送 HTTP 请求发生异常时的操作
            </summary>
            <param name="exception">
                <see cref="T:System.Exception" />
            </param>
            <param name="httpResponseMessage">
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </param>
        </member>
        <member name="T:HttpAgent.IHttpServerSentEventsEventHandler">
            <summary>
                Server-Sent Events 事件处理程序
            </summary>
        </member>
        <member name="M:HttpAgent.IHttpServerSentEventsEventHandler.OnOpen">
            <summary>
                用于在与事件源的连接打开时的操作
            </summary>
        </member>
        <member name="M:HttpAgent.IHttpServerSentEventsEventHandler.OnMessageAsync(HttpAgent.ServerSentEventsData)">
            <summary>
                用于在从事件源接收到数据时的操作
            </summary>
            <param name="serverSentEventsData">
                <see cref="T:HttpAgent.ServerSentEventsData" />
            </param>
            <returns>
                <see cref="T:System.Threading.Tasks.Task" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpServerSentEventsEventHandler.OnError(System.Exception)">
            <summary>
                用于在事件源连接未能打开时的操作
            </summary>
            <param name="exception">
                <see cref="T:System.Exception" />
            </param>
        </member>
        <member name="T:HttpAgent.Helpers">
            <summary>
                HTTP 远程请求模块帮助类
            </summary>
        </member>
        <member name="M:HttpAgent.Helpers.GetFileNameFromUri(System.Uri)">
            <summary>
                从 <see cref="T:System.Uri" /> 中解析文件名
            </summary>
            <param name="uri">
                <see cref="T:System.Uri" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:HttpAgent.Helpers.ParseHttpMethod(System.String)">
            <summary>
                解析 HTTP 谓词
            </summary>
            <param name="httpMethod">HTTP 谓词</param>
            <returns>
                <see cref="T:System.Net.Http.HttpMethod" />
            </returns>
        </member>
        <member name="M:HttpAgent.Helpers.IsFormUrlEncodedFormat(System.String)">
            <summary>
                验证字符串是否是 <c>application/x-www-form-urlencoded</c> 格式
            </summary>
            <param name="output">字符串</param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:HttpAgent.Helpers.FormUrlEncodedFormatRegex">
            <remarks>
            Pattern:<br/>
            <code>^(?:(?:[a-zA-Z0-9-._~]+|%(?:[0-9A-Fa-f]{2}))+=(?:[a-zA-Z0-9-._~]*|%(?:[0-9A-Fa-f]{2}))+)(?:&amp;(?:[a-zA-Z0-9-._~]+|%(?:[0-9A-Fa-f]{2}))+=(?:[a-zA-Z0-9-._~]*|%(?:[0-9A-Fa-f]{2}))+)*$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Loop greedily at least once.<br/>
                ○ Match with 2 alternative expressions.<br/>
                    ○ Match a character in the set [-.0-9A-Z_a-z~] greedily at least once.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '%'.<br/>
                        ○ Match a character in the set [0-9A-Fa-f] exactly 2 times.<br/>
            ○ Match '='.<br/>
            ○ Loop greedily at least once.<br/>
                ○ Match with 2 alternative expressions.<br/>
                    ○ Match a character in the set [-.0-9A-Z_a-z~] greedily any number of times.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '%'.<br/>
                        ○ Match a character in the set [0-9A-Fa-f] exactly 2 times.<br/>
            ○ Loop greedily any number of times.<br/>
                ○ Match '&amp;'.<br/>
                ○ Loop greedily at least once.<br/>
                    ○ Match with 2 alternative expressions.<br/>
                        ○ Match a character in the set [-.0-9A-Z_a-z~] greedily at least once.<br/>
                        ○ Match a sequence of expressions.<br/>
                            ○ Match '%'.<br/>
                            ○ Match a character in the set [0-9A-Fa-f] exactly 2 times.<br/>
                ○ Match '='.<br/>
                ○ Loop greedily at least once.<br/>
                    ○ Match with 2 alternative expressions.<br/>
                        ○ Match a character in the set [-.0-9A-Z_a-z~] greedily any number of times.<br/>
                        ○ Match a sequence of expressions.<br/>
                            ○ Match '%'.<br/>
                            ○ Match a character in the set [0-9A-Fa-f] exactly 2 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:HttpAgent.FileDownloadManager">
            <summary>
                文件下载管理器
            </summary>
        </member>
        <member name="F:HttpAgent.FileDownloadManager._httpFileDownloadBuilder">
            <inheritdoc cref="T:HttpAgent.HttpFileDownloadBuilder" />
        </member>
        <member name="F:HttpAgent.FileDownloadManager._httpRemoteService">
            <inheritdoc cref="T:HttpAgent.IHttpRemoteService" />
        </member>
        <member name="F:HttpAgent.FileDownloadManager._progressChannel">
            <summary>
                文件传输进度信息的通道
            </summary>
        </member>
        <member name="M:HttpAgent.FileDownloadManager.#ctor(HttpAgent.IHttpRemoteService,HttpAgent.HttpFileDownloadBuilder,System.Action{HttpAgent.HttpRequestBuilder})">
            <summary>
                <inheritdoc cref="T:HttpAgent.FileDownloadManager" />
            </summary>
            <param name="httpRemoteService">
                <see cref="T:HttpAgent.IHttpRemoteService" />
            </param>
            <param name="httpFileDownloadBuilder">
                <see cref="T:HttpAgent.HttpFileDownloadBuilder" />
            </param>
            <param name="configure">自定义配置委托</param>
        </member>
        <member name="P:HttpAgent.FileDownloadManager.RequestBuilder">
            <summary>
                <inheritdoc cref="T:HttpAgent.HttpRequestBuilder" />
            </summary>
        </member>
        <member name="P:HttpAgent.FileDownloadManager.FileTransferEventHandler">
            <summary>
                <inheritdoc cref="T:HttpAgent.IHttpFileTransferEventHandler" />
            </summary>
        </member>
        <member name="M:HttpAgent.FileDownloadManager.Start(System.Threading.CancellationToken)">
            <summary>
                开始下载
            </summary>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:HttpAgent.FileDownloadManager.StartAsync(System.Threading.CancellationToken)">
            <summary>
                开始下载
            </summary>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:HttpAgent.FileDownloadManager.ReportProgressAsync(System.Threading.CancellationToken)">
            <summary>
                文件传输进度报告任务
            </summary>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:HttpAgent.FileDownloadManager.HandleTransferStarted">
            <summary>
                处理文件传输开始
            </summary>
        </member>
        <member name="M:HttpAgent.FileDownloadManager.HandleTransferCompleted(System.Int64)">
            <summary>
                处理文件传输完成
            </summary>
            <param name="duration">文件传输总花费时间</param>
        </member>
        <member name="M:HttpAgent.FileDownloadManager.HandleTransferFailed(System.Exception)">
            <summary>
                处理文件传输失败
            </summary>
            <param name="e">
                <see cref="T:System.Exception" />
            </param>
        </member>
        <member name="M:HttpAgent.FileDownloadManager.HandleProgressChangedAsync(HttpAgent.FileTransferProgress)">
            <summary>
                处理文件传输进度变化
            </summary>
            <param name="fileTransferProgress">
                <see cref="T:HttpAgent.FileTransferProgress" />
            </param>
        </member>
        <member name="M:HttpAgent.FileDownloadManager.ShouldContinueWithDownload(System.Net.Http.HttpResponseMessage,System.String@)">
            <summary>
                根据文件是否存在及配置的行为来决定是否应继续进行文件下载
            </summary>
            <param name="httpResponseMessage">
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </param>
            <param name="destinationPath">文件保存的目标路径</param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:HttpAgent.FileDownloadManager.GetFileName(System.Net.Http.HttpResponseMessage)">
            <summary>
                获取文件下载名
            </summary>
            <param name="httpResponseMessage">
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:HttpAgent.FileDownloadManager.MoveTempFileToDestinationPath(System.IO.FileStream,System.String,System.String)">
            <summary>
                移动临时文件至文件保存的目标路径
            </summary>
            <param name="fileStream">
                <see cref="T:System.IO.FileStream" />
            </param>
            <param name="tempDestinationPath">临时文件路径</param>
            <param name="destinationPath">文件保存的目标路径</param>
        </member>
        <member name="T:HttpAgent.FileUploadManager">
            <summary>
                文件上传管理器
            </summary>
        </member>
        <member name="F:HttpAgent.FileUploadManager._httpFileUploadBuilder">
            <inheritdoc cref="T:HttpAgent.HttpFileUploadBuilder" />
        </member>
        <member name="F:HttpAgent.FileUploadManager._httpRemoteService">
            <inheritdoc cref="T:HttpAgent.IHttpRemoteService" />
        </member>
        <member name="F:HttpAgent.FileUploadManager._progressChannel">
            <summary>
                文件传输进度信息的通道
            </summary>
        </member>
        <member name="M:HttpAgent.FileUploadManager.#ctor(HttpAgent.IHttpRemoteService,HttpAgent.HttpFileUploadBuilder,System.Action{HttpAgent.HttpRequestBuilder})">
            <summary>
                <inheritdoc cref="T:HttpAgent.FileUploadManager" />
            </summary>
            <param name="httpRemoteService">
                <see cref="T:HttpAgent.IHttpRemoteService" />
            </param>
            <param name="httpFileUploadBuilder">
                <see cref="T:HttpAgent.HttpFileUploadBuilder" />
            </param>
            <param name="configure">自定义配置委托</param>
        </member>
        <member name="P:HttpAgent.FileUploadManager.RequestBuilder">
            <summary>
                <inheritdoc cref="T:HttpAgent.HttpRequestBuilder" />
            </summary>
        </member>
        <member name="P:HttpAgent.FileUploadManager.FileTransferEventHandler">
            <summary>
                <inheritdoc cref="T:HttpAgent.IHttpFileTransferEventHandler" />
            </summary>
        </member>
        <member name="M:HttpAgent.FileUploadManager.Start(System.Threading.CancellationToken)">
            <summary>
                开始上传
            </summary>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:HttpAgent.FileUploadManager.StartAsync(System.Threading.CancellationToken)">
            <summary>
                开始上传
            </summary>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Threading.Tasks.Task`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.FileUploadManager.ReportProgressAsync(System.Threading.CancellationToken)">
            <summary>
                文件传输进度报告任务
            </summary>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:HttpAgent.FileUploadManager.HandleTransferStarted">
            <summary>
                处理文件传输开始
            </summary>
        </member>
        <member name="M:HttpAgent.FileUploadManager.HandleTransferCompleted(System.Int64)">
            <summary>
                处理文件传输完成
            </summary>
            <param name="duration">文件传输总花费时间</param>
        </member>
        <member name="M:HttpAgent.FileUploadManager.HandleTransferFailed(System.Exception)">
            <summary>
                处理文件传输失败
            </summary>
            <param name="e">
                <see cref="T:System.Exception" />
            </param>
        </member>
        <member name="M:HttpAgent.FileUploadManager.HandleProgressChangedAsync(HttpAgent.FileTransferProgress)">
            <summary>
                处理文件传输进度变化
            </summary>
            <param name="fileTransferProgress">
                <see cref="T:HttpAgent.FileTransferProgress" />
            </param>
        </member>
        <member name="T:HttpAgent.LongPollingManager">
            <summary>
                长轮询管理器
            </summary>
        </member>
        <member name="F:HttpAgent.LongPollingManager._dataChannel">
            <summary>
                数据接收传输的通道
            </summary>
        </member>
        <member name="F:HttpAgent.LongPollingManager._httpLongPollingBuilder">
            <inheritdoc cref="T:HttpAgent.HttpLongPollingBuilder" />
        </member>
        <member name="F:HttpAgent.LongPollingManager._httpRemoteService">
            <inheritdoc cref="T:HttpAgent.IHttpRemoteService" />
        </member>
        <member name="M:HttpAgent.LongPollingManager.#ctor(HttpAgent.IHttpRemoteService,HttpAgent.HttpLongPollingBuilder,System.Action{HttpAgent.HttpRequestBuilder})">
            <summary>
                <inheritdoc cref="T:HttpAgent.LongPollingManager" />
            </summary>
            <param name="httpRemoteService">
                <see cref="T:HttpAgent.IHttpRemoteService" />
            </param>
            <param name="httpLongPollingBuilder">
                <see cref="T:HttpAgent.HttpLongPollingBuilder" />
            </param>
            <param name="configure">自定义配置委托</param>
        </member>
        <member name="P:HttpAgent.LongPollingManager.CurrentRetries">
            <summary>
                当前重试次数
            </summary>
        </member>
        <member name="P:HttpAgent.LongPollingManager.RequestBuilder">
            <summary>
                <inheritdoc cref="T:HttpAgent.HttpRequestBuilder" />
            </summary>
        </member>
        <member name="P:HttpAgent.LongPollingManager.LongPollingEventHandler">
            <summary>
                <inheritdoc cref="T:HttpAgent.IHttpLongPollingEventHandler" />
            </summary>
        </member>
        <member name="M:HttpAgent.LongPollingManager.Start(System.Threading.CancellationToken)">
            <summary>
                开始请求
            </summary>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:HttpAgent.LongPollingManager.StartAsync(System.Threading.CancellationToken)">
            <summary>
                开始请求
            </summary>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:HttpAgent.LongPollingManager.ShouldTerminatePolling(System.Net.Http.HttpResponseMessage)">
            <summary>
                检查是否应该终止长轮询
            </summary>
            <param name="httpResponseMessage">
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:HttpAgent.LongPollingManager.ReceiveDataAsync(System.Threading.CancellationToken)">
            <summary>
                接收数据任务
            </summary>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:HttpAgent.LongPollingManager.HandleDataReceivedAsync(System.Net.Http.HttpResponseMessage)">
            <summary>
                处理服务器发送的数据
            </summary>
            <param name="httpResponseMessage">
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </param>
        </member>
        <member name="T:HttpAgent.ServerSentEventsManager">
            <summary>
                Server-Sent Events 管理器
            </summary>
            <remarks>参考文献：https://developer.mozilla.org/zh-CN/docs/Web/API/Server-sent_events/Using_server-sent_events。</remarks>
        </member>
        <member name="F:HttpAgent.ServerSentEventsManager._httpRemoteService">
            <inheritdoc cref="T:HttpAgent.IHttpRemoteService" />
        </member>
        <member name="F:HttpAgent.ServerSentEventsManager._httpServerSentEventsBuilder">
            <inheritdoc cref="T:HttpAgent.HttpServerSentEventsBuilder" />
        </member>
        <member name="F:HttpAgent.ServerSentEventsManager._messageChannel">
            <summary>
                事件消息传输的通道
            </summary>
        </member>
        <member name="M:HttpAgent.ServerSentEventsManager.#ctor(HttpAgent.IHttpRemoteService,HttpAgent.HttpServerSentEventsBuilder,System.Action{HttpAgent.HttpRequestBuilder})">
            <summary>
                <inheritdoc cref="T:HttpAgent.ServerSentEventsManager" />
            </summary>
            <param name="httpRemoteService">
                <see cref="T:HttpAgent.IHttpRemoteService" />
            </param>
            <param name="httpServerSentEventsBuilder">
                <see cref="T:HttpAgent.HttpServerSentEventsBuilder" />
            </param>
            <param name="configure">自定义配置委托</param>
        </member>
        <member name="P:HttpAgent.ServerSentEventsManager.CurrentRetryInterval">
            <summary>
                当前重新连接的时间（毫秒）
            </summary>
        </member>
        <member name="P:HttpAgent.ServerSentEventsManager.CurrentRetries">
            <summary>
                当前重试次数
            </summary>
        </member>
        <member name="P:HttpAgent.ServerSentEventsManager.RequestBuilder">
            <summary>
                <inheritdoc cref="T:HttpAgent.HttpRequestBuilder" />
            </summary>
        </member>
        <member name="P:HttpAgent.ServerSentEventsManager.ServerSentEventsEventHandler">
            <summary>
                <inheritdoc cref="T:HttpAgent.IHttpServerSentEventsEventHandler" />
            </summary>
        </member>
        <member name="M:HttpAgent.ServerSentEventsManager.Start(System.Threading.CancellationToken)">
            <summary>
                开始接收
            </summary>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:HttpAgent.ServerSentEventsManager.StartAsync(System.Threading.CancellationToken)">
            <summary>
                开始接收
            </summary>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:HttpAgent.ServerSentEventsManager.Retry(System.Threading.CancellationToken)">
            <summary>
                重新开始接收
            </summary>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:HttpAgent.ServerSentEventsManager.RetryAsync(System.Threading.CancellationToken)">
            <summary>
                重新开始接收
            </summary>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:HttpAgent.ServerSentEventsManager.IsEventComplete(HttpAgent.ServerSentEventsData)">
            <summary>
                检查是否已经收集了一个完整的事件
            </summary>
            <param name="serverSentEventsData">
                <see cref="T:HttpAgent.ServerSentEventsData" />
            </param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:HttpAgent.ServerSentEventsManager.TryParseEventLine(System.String,HttpAgent.ServerSentEventsData@)">
            <summary>
                尝试解析事件消息行文本
            </summary>
            <param name="line"></param>
            <param name="serverSentEventsData">
                <see cref="T:HttpAgent.ServerSentEventsData" />
            </param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:HttpAgent.ServerSentEventsManager.ReceiveDataAsync(System.Threading.CancellationToken)">
            <summary>
                接收事件消息任务
            </summary>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:HttpAgent.ServerSentEventsManager.HandleOpen">
            <summary>
                处理与事件源的连接打开
            </summary>
        </member>
        <member name="M:HttpAgent.ServerSentEventsManager.HandleError(System.Exception)">
            <summary>
                处理与事件源的连接错误
            </summary>
            <param name="e">
                <see cref="T:System.Exception" />
            </param>
        </member>
        <member name="M:HttpAgent.ServerSentEventsManager.HandleMessageReceivedAsync(HttpAgent.ServerSentEventsData)">
            <summary>
                处理服务器发送的事件消息
            </summary>
            <param name="serverSentEventsData">
                <see cref="T:HttpAgent.ServerSentEventsData" />
            </param>
        </member>
        <member name="T:HttpAgent.StressTestHarnessManager">
            <summary>
                压力测试管理器
            </summary>
        </member>
        <member name="F:HttpAgent.StressTestHarnessManager._httpRemoteService">
            <inheritdoc cref="T:HttpAgent.IHttpRemoteService" />
        </member>
        <member name="F:HttpAgent.StressTestHarnessManager._httpStressTestHarnessBuilder">
            <inheritdoc cref="T:HttpAgent.HttpStressTestHarnessBuilder" />
        </member>
        <member name="M:HttpAgent.StressTestHarnessManager.#ctor(HttpAgent.IHttpRemoteService,HttpAgent.HttpStressTestHarnessBuilder,System.Action{HttpAgent.HttpRequestBuilder})">
            <summary>
                <inheritdoc cref="T:HttpAgent.StressTestHarnessManager" />
            </summary>
            <param name="httpRemoteService">
                <see cref="T:HttpAgent.IHttpRemoteService" />
            </param>
            <param name="httpStressTestHarnessBuilder">
                <see cref="T:HttpAgent.HttpStressTestHarnessBuilder" />
            </param>
            <param name="configure">自定义配置委托</param>
        </member>
        <member name="P:HttpAgent.StressTestHarnessManager.RequestBuilder">
            <summary>
                <inheritdoc cref="T:HttpAgent.HttpRequestBuilder" />
            </summary>
        </member>
        <member name="M:HttpAgent.StressTestHarnessManager.Start(System.Threading.CancellationToken)">
            <summary>
                开始测试
            </summary>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:HttpAgent.StressTestHarnessResult" />
            </returns>
        </member>
        <member name="M:HttpAgent.StressTestHarnessManager.StartAsync(System.Threading.CancellationToken)">
            <summary>
                开始测试
            </summary>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Threading.Tasks.Task`1" />
            </returns>
        </member>
        <member name="T:HttpAgent.FileTransferProgress">
            <summary>
                文件传输的进度信息
            </summary>
        </member>
        <member name="F:HttpAgent.FileTransferProgress._epsilon">
            <summary>
                使用一个小的正值来防止除零错误
            </summary>
        </member>
        <member name="M:HttpAgent.FileTransferProgress.#ctor(System.String,System.Int64)">
            <summary>
                <inheritdoc cref="T:HttpAgent.FileTransferProgress" />
            </summary>
            <param name="fileFullName">文件完整路径</param>
            <param name="totalFileSize">文件的总大小</param>
        </member>
        <member name="P:HttpAgent.FileTransferProgress.FileFullName">
            <summary>
                文件完整路径
            </summary>
        </member>
        <member name="P:HttpAgent.FileTransferProgress.FileName">
            <summary>
                文件的名称
            </summary>
        </member>
        <member name="P:HttpAgent.FileTransferProgress.TotalFileSize">
            <summary>
                文件的总大小
            </summary>
            <remarks>以字节为单位。</remarks>
        </member>
        <member name="P:HttpAgent.FileTransferProgress.Transferred">
            <summary>
                已传输的数据量
            </summary>
            <remarks>以字节为单位。</remarks>
        </member>
        <member name="P:HttpAgent.FileTransferProgress.PercentageComplete">
            <summary>
                已完成的传输百分比
            </summary>
        </member>
        <member name="P:HttpAgent.FileTransferProgress.TransferRate">
            <summary>
                获取当前的传输速率
            </summary>
            <remarks>以字节/秒为单位。</remarks>
        </member>
        <member name="P:HttpAgent.FileTransferProgress.TimeElapsed">
            <summary>
                从开始传输到现在的持续时间
            </summary>
        </member>
        <member name="P:HttpAgent.FileTransferProgress.EstimatedTimeRemaining">
            <summary>
                预估剩余传输时间
            </summary>
        </member>
        <member name="M:HttpAgent.FileTransferProgress.ToString">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.FileTransferProgress.UpdateProgress(System.Int64,System.TimeSpan)">
            <summary>
                更新文件传输进度
            </summary>
            <param name="transferred">已传输的数据量</param>
            <param name="timeElapsed">从开始传输到现在的持续时间</param>
        </member>
        <member name="M:HttpAgent.FileTransferProgress.CalculateEstimatedTimeRemaining">
            <summary>
                计算预估剩余传输时间
            </summary>
            <returns>
                <see cref="T:System.TimeSpan" />
            </returns>
        </member>
        <member name="T:HttpAgent.HttpClientPooling">
            <summary>
                管理 <see cref="T:System.Net.Http.HttpClient" /> 实例及及其释放操作
            </summary>
        </member>
        <member name="M:HttpAgent.HttpClientPooling.#ctor(System.Net.Http.HttpClient,System.Action{System.Net.Http.HttpClient})">
            <summary>
                <inheritdoc cref="T:HttpAgent.HttpClientPooling" />
            </summary>
            <param name="httpClient">
                <see cref="T:System.Net.Http.HttpClient" />
            </param>
            <param name="release">用于释放 <see cref="T:System.Net.Http.HttpClient" /> 实例的方法委托</param>
        </member>
        <member name="P:HttpAgent.HttpClientPooling.Instance">
            <summary>
                <see cref="T:System.Net.Http.HttpClient" />
            </summary>
        </member>
        <member name="P:HttpAgent.HttpClientPooling.Release">
            <summary>
                用于释放 <see cref="T:System.Net.Http.HttpClient" /> 实例的方法委托
            </summary>
        </member>
        <member name="T:HttpAgent.HttpRemoteResult`1">
            <summary>
                HTTP 远程请求结果
            </summary>
            <remarks>用于将原始的 <see cref="T:System.Net.Http.HttpResponseMessage" /> 进行包装转换。</remarks>
            <typeparam name="TResult">转换的目标类型</typeparam>
        </member>
        <member name="M:HttpAgent.HttpRemoteResult`1.#ctor(System.Net.Http.HttpResponseMessage)">
            <summary>
                <inheritdoc cref="T:HttpAgent.HttpRemoteResult`1" />
            </summary>
            <param name="httpResponseMessage">
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </param>
        </member>
        <member name="P:HttpAgent.HttpRemoteResult`1.ResponseMessage">
            <inheritdoc cref="T:System.Net.Http.HttpResponseMessage" />
        </member>
        <member name="P:HttpAgent.HttpRemoteResult`1.ContentType">
            <summary>
                内容类型
            </summary>
        </member>
        <member name="P:HttpAgent.HttpRemoteResult`1.CharSet">
            <summary>
                内容编码
            </summary>
        </member>
        <member name="P:HttpAgent.HttpRemoteResult`1.ContentLength">
            <summary>
                内容大小
            </summary>
        </member>
        <member name="P:HttpAgent.HttpRemoteResult`1.RawSetCookies">
            <summary>
                原始响应标头 <c>Set-Cookie</c> 集合
            </summary>
        </member>
        <member name="P:HttpAgent.HttpRemoteResult`1.SetCookies">
            <summary>
                <see cref="T:Microsoft.Net.Http.Headers.SetCookieHeaderValue" /> 集合
            </summary>
        </member>
        <member name="P:HttpAgent.HttpRemoteResult`1.StatusCode">
            <summary>
                响应状态码
            </summary>
        </member>
        <member name="P:HttpAgent.HttpRemoteResult`1.IsSuccessStatusCode">
            <summary>
                是否请求成功
            </summary>
        </member>
        <member name="P:HttpAgent.HttpRemoteResult`1.Result">
            <summary>
                <typeparamref name="TResult" />
            </summary>
            <remarks>注意 <c>HEAD</c> 请求不包含响应体。</remarks>
        </member>
        <member name="P:HttpAgent.HttpRemoteResult`1.RequestDuration">
            <summary>
                请求耗时（毫秒）
            </summary>
        </member>
        <member name="P:HttpAgent.HttpRemoteResult`1.Headers">
            <summary>
                响应标头
            </summary>
        </member>
        <member name="P:HttpAgent.HttpRemoteResult`1.ContentHeaders">
            <summary>
                响应体标头
            </summary>
        </member>
        <member name="M:HttpAgent.HttpRemoteResult`1.Initialize">
            <summary>
                初始化
            </summary>
        </member>
        <member name="M:HttpAgent.HttpRemoteResult`1.ParseStatusCode">
            <summary>
                解析响应状态码
            </summary>
        </member>
        <member name="M:HttpAgent.HttpRemoteResult`1.ParseHeaders">
            <summary>
                解析响应标头
            </summary>
        </member>
        <member name="M:HttpAgent.HttpRemoteResult`1.ParseContentMetadata(System.Net.Http.Headers.HttpContentHeaders)">
            <summary>
                解析响应体标头元数据
            </summary>
            <param name="contentHeaders">
                <see cref="T:System.Net.Http.Headers.HttpContentHeaders" />
            </param>
        </member>
        <member name="M:HttpAgent.HttpRemoteResult`1.ParseSetCookies(System.Net.Http.Headers.HttpResponseHeaders)">
            <summary>
                解析响应标头 <c>Set-Cookie</c> 集合
            </summary>
            <param name="responseHeaders">
                <see cref="T:System.Net.Http.Headers.HttpResponseHeaders" />
            </param>
        </member>
        <member name="M:HttpAgent.HttpRemoteResult`1.ToString">
            <inheritdoc />
        </member>
        <member name="T:HttpAgent.Logging">
            <summary>
                HTTP 远程服务日志类别
            </summary>
        </member>
        <member name="T:HttpAgent.MultipartFormDataItem">
            <summary>
                <see cref="T:System.Net.Http.MultipartFormDataContent" /> 条目
            </summary>
        </member>
        <member name="M:HttpAgent.MultipartFormDataItem.#ctor(System.String)">
            <summary>
                <inheritdoc cref="T:HttpAgent.MultipartFormDataItem" />
            </summary>
            <param name="name">表单名称</param>
        </member>
        <member name="P:HttpAgent.MultipartFormDataItem.Name">
            <summary>
                表单名称
            </summary>
        </member>
        <member name="P:HttpAgent.MultipartFormDataItem.ContentType">
            <summary>
                内容类型
            </summary>
        </member>
        <member name="P:HttpAgent.MultipartFormDataItem.ContentEncoding">
            <summary>
                内容编码
            </summary>
            <remarks>默认值为 <c>utf-8</c> 编码。</remarks>
        </member>
        <member name="P:HttpAgent.MultipartFormDataItem.RawContent">
            <summary>
                原始请求内容
            </summary>
            <remarks>此属性值最终将转换为 <see cref="T:System.Net.Http.HttpContent" /> 类型实例。</remarks>
        </member>
        <member name="P:HttpAgent.MultipartFormDataItem.FileName">
            <summary>
                文件名
            </summary>
            <remarks>用于 <see cref="P:HttpAgent.MultipartFormDataItem.RawContent" /> 类型为 <see cref="T:System.IO.Stream" /> 或 <c>byte[]</c> 时有效。</remarks>
        </member>
        <member name="P:HttpAgent.MultipartFormDataItem.FileSize">
            <summary>
                文件大小
            </summary>
        </member>
        <member name="T:HttpAgent.ProgressFileStream">
            <summary>
                带读写进度的文件流
            </summary>
        </member>
        <member name="F:HttpAgent.ProgressFileStream._fileLength">
            <summary>
                文件大小
            </summary>
        </member>
        <member name="F:HttpAgent.ProgressFileStream._fileStream">
            <inheritdoc cref="T:System.IO.FileStream" />
        </member>
        <member name="F:HttpAgent.ProgressFileStream._fileTransferProgress">
            <inheritdoc cref="T:HttpAgent.FileTransferProgress" />
        </member>
        <member name="F:HttpAgent.ProgressFileStream._progressChannel">
            <summary>
                文件传输进度信息的通道
            </summary>
        </member>
        <member name="F:HttpAgent.ProgressFileStream._stopwatch">
            <inheritdoc cref="T:System.Diagnostics.Stopwatch" />
        </member>
        <member name="F:HttpAgent.ProgressFileStream._transferred">
            <summary>
                已传输的数据量
            </summary>
        </member>
        <member name="M:HttpAgent.ProgressFileStream.#ctor(System.IO.FileStream,System.IO.FileInfo,System.Threading.Channels.Channel{HttpAgent.FileTransferProgress})">
            <summary>
                <inheritdoc cref="T:HttpAgent.ProgressFileStream" />
            </summary>
            <param name="fileStream">
                <see cref="T:System.IO.FileStream" />
            </param>
            <param name="fileInfo">
                <see cref="T:System.IO.FileInfo" />
            </param>
            <param name="progressChannel">文件传输进度信息的通道</param>
        </member>
        <member name="P:HttpAgent.ProgressFileStream.CanRead">
            <inheritdoc />
        </member>
        <member name="P:HttpAgent.ProgressFileStream.CanSeek">
            <inheritdoc />
        </member>
        <member name="P:HttpAgent.ProgressFileStream.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:HttpAgent.ProgressFileStream.CanTimeout">
            <inheritdoc />
        </member>
        <member name="P:HttpAgent.ProgressFileStream.Length">
            <inheritdoc />
        </member>
        <member name="P:HttpAgent.ProgressFileStream.Position">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.ProgressFileStream.Flush">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.ProgressFileStream.Read(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.ProgressFileStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.ProgressFileStream.SetLength(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.ProgressFileStream.Write(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.ProgressFileStream.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.ProgressFileStream.ReportProgress(System.Int32)">
            <summary>
                报告进度
            </summary>
            <param name="increment">增加的数据量</param>
        </member>
        <member name="T:HttpAgent.ServerSentEventsData">
            <summary>
                Server-Sent Events 事件流格式
            </summary>
            <remarks>参考文献：https://developer.mozilla.org/zh-CN/docs/Web/API/Server-sent_events/Using_server-sent_events#%E5%AD%97%E6%AE%B5。</remarks>
        </member>
        <member name="F:HttpAgent.ServerSentEventsData._dataBuffer">
            <summary>
                消息数据构建器
            </summary>
        </member>
        <member name="F:HttpAgent.ServerSentEventsData._cachedData">
            <summary>
                消息数据缓存字段
            </summary>
        </member>
        <member name="M:HttpAgent.ServerSentEventsData.#ctor">
            <summary>
                <inheritdoc cref="T:HttpAgent.ServerSentEventsData" />
            </summary>
        </member>
        <member name="P:HttpAgent.ServerSentEventsData.Event">
            <summary>
                事件类型
            </summary>
            <remarks>
                一个用于标识事件类型的字符串。如果指定了这个字符串，浏览器会将具有指定事件名称的事件分派给相应的监听器；网站源代码应该使用 <c>addEventListener()</c>
                来监听指定的事件。如果一个消息没有指定事件名称，那么 <c>onmessage</c> 处理程序就会被调用。
            </remarks>
        </member>
        <member name="P:HttpAgent.ServerSentEventsData.Data">
            <summary>
                消息
            </summary>
            <remarks>消息的数据字段。当 <c>EventSource</c> 接收到多个以 <c>data</c>: 开头的连续行时，会将它们连接起来，在它们之间插入一个换行符。末尾的换行符会被删除。</remarks>
        </member>
        <member name="P:HttpAgent.ServerSentEventsData.Id">
            <summary>
                事件 ID
            </summary>
            <remarks>事件 ID，会成为当前 <c>EventSource</c> 对象的内部属性“最后一个事件 ID 的属性值。</remarks>
        </member>
        <member name="P:HttpAgent.ServerSentEventsData.Retry">
            <summary>
                重新连接的时间
            </summary>
            <remarks>重新连接的时间。如果与服务器的连接丢失，浏览器将等待指定的时间，然后尝试重新连接。这必须是一个整数，以毫秒为单位指定重新连接的时间。如果指定了一个非整数值，该字段将被忽略。</remarks>
        </member>
        <member name="M:HttpAgent.ServerSentEventsData.AppendData(System.String)">
            <summary>
                追加消息数据
            </summary>
            <param name="value">消息数据</param>
        </member>
        <member name="T:HttpAgent.StressTestHarnessResult">
            <summary>
                压力测试结果
            </summary>
        </member>
        <member name="F:HttpAgent.StressTestHarnessResult._ticksPerMillisecond">
            <summary>
                用于将 <see cref="T:System.Diagnostics.Stopwatch" /> 的 <c>ticks</c> 转换为毫秒
            </summary>
        </member>
        <member name="M:HttpAgent.StressTestHarnessResult.#ctor(System.Int64,System.Double,System.Int64,System.Int64,System.Int64[])">
            <summary>
                <inheritdoc cref="T:HttpAgent.StressTestHarnessResult" />
            </summary>
            <param name="totalRequests">总请求次数</param>
            <param name="totalTimeInSeconds">总用时（秒）</param>
            <param name="successfulRequests">成功请求次数</param>
            <param name="failedRequests">失败请求次数</param>
            <param name="responseTimes">请求的响应时间数组</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="P:HttpAgent.StressTestHarnessResult.TotalRequests">
            <summary>
                总请求次数
            </summary>
        </member>
        <member name="P:HttpAgent.StressTestHarnessResult.TotalTimeInSeconds">
            <summary>
                总用时（秒）
            </summary>
        </member>
        <member name="P:HttpAgent.StressTestHarnessResult.SuccessfulRequests">
            <summary>
                成功请求次数
            </summary>
        </member>
        <member name="P:HttpAgent.StressTestHarnessResult.FailedRequests">
            <summary>
                失败请求次数
            </summary>
        </member>
        <member name="P:HttpAgent.StressTestHarnessResult.QueriesPerSecond">
            <summary>
                每秒查询率 (QPS)
            </summary>
        </member>
        <member name="P:HttpAgent.StressTestHarnessResult.MinResponseTime">
            <summary>
                最小响应时间（毫秒）
            </summary>
        </member>
        <member name="P:HttpAgent.StressTestHarnessResult.MaxResponseTime">
            <summary>
                最大响应时间（毫秒）
            </summary>
        </member>
        <member name="P:HttpAgent.StressTestHarnessResult.AverageResponseTime">
            <summary>
                平均响应时间（毫秒）
            </summary>
        </member>
        <member name="P:HttpAgent.StressTestHarnessResult.Percentile10ResponseTime">
            <summary>
                P10 响应时间（毫秒）
            </summary>
        </member>
        <member name="P:HttpAgent.StressTestHarnessResult.Percentile25ResponseTime">
            <summary>
                P25 响应时间（毫秒）
            </summary>
        </member>
        <member name="P:HttpAgent.StressTestHarnessResult.Percentile50ResponseTime">
            <summary>
                P50 响应时间（毫秒）
            </summary>
        </member>
        <member name="P:HttpAgent.StressTestHarnessResult.Percentile75ResponseTime">
            <summary>
                P75 响应时间（毫秒）
            </summary>
        </member>
        <member name="P:HttpAgent.StressTestHarnessResult.Percentile90ResponseTime">
            <summary>
                P90 响应时间（毫秒）
            </summary>
        </member>
        <member name="P:HttpAgent.StressTestHarnessResult.Percentile99ResponseTime">
            <summary>
                P99 响应时间（毫秒）
            </summary>
        </member>
        <member name="P:HttpAgent.StressTestHarnessResult.Percentile9999ResponseTime">
            <summary>
                P99.99 响应时间（毫秒）
            </summary>
        </member>
        <member name="M:HttpAgent.StressTestHarnessResult.ToString">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.StressTestHarnessResult.CalculateQueriesPerSecond(System.Int64,System.Double)">
            <summary>
                计算每秒查询率 (QPS)
            </summary>
            <param name="totalRequests">总请求次数</param>
            <param name="totalTimeInSeconds">总用时（秒）</param>
        </member>
        <member name="M:HttpAgent.StressTestHarnessResult.CalculateMinMaxAvgResponseTime(System.Int64[],System.Int64)">
            <summary>
                计算最小、最大和平均响应时间（毫秒）
            </summary>
            <param name="responseTimes">每个请求的响应时间数组</param>
            <param name="totalRequests">总请求次数</param>
        </member>
        <member name="M:HttpAgent.StressTestHarnessResult.CalculatePercentiles(System.Int64[])">
            <summary>
                计算各个百分位的响应时间（毫秒）
            </summary>
            <param name="responseTimes">请求的响应时间数组</param>
        </member>
        <member name="M:HttpAgent.StressTestHarnessResult.CalculatePercentile(System.Int64[],System.Double)">
            <summary>
                计算百分位数并转换为毫秒
            </summary>
            <param name="sortedResponseTimes">排序后的请求的响应时间数组</param>
            <param name="percentile">百分位数</param>
            <returns>
                <see cref="T:System.Double" />
            </returns>
        </member>
        <member name="T:HttpAgent.HttpRemoteOptions">
            <summary>
                HTTP 远程请求选项
            </summary>
        </member>
        <member name="P:HttpAgent.HttpRemoteOptions.DefaultContentType">
            <summary>
                默认请求内容类型
            </summary>
        </member>
        <member name="P:HttpAgent.HttpRemoteOptions.DefaultFileDownloadDirectory">
            <summary>
                默认文件下载保存目录
            </summary>
        </member>
        <member name="T:HttpAgent.ByteArrayContentProcessor">
            <summary>
                字节数组内容处理器
            </summary>
        </member>
        <member name="M:HttpAgent.ByteArrayContentProcessor.CanProcess(System.Object,System.String)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.ByteArrayContentProcessor.Process(System.Object,System.String,System.Text.Encoding)">
            <inheritdoc />
        </member>
        <member name="T:HttpAgent.FormUrlEncodedContentProcessor">
            <summary>
                URL 编码的表单内容处理器
            </summary>
        </member>
        <member name="M:HttpAgent.FormUrlEncodedContentProcessor.CanProcess(System.Object,System.String)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.FormUrlEncodedContentProcessor.Process(System.Object,System.String,System.Text.Encoding)">
            <inheritdoc />
        </member>
        <member name="T:HttpAgent.IHttpContentProcessor">
            <summary>
                <see cref="T:System.Net.Http.HttpContent" /> 处理器
            </summary>
            <remarks>用于将原始请求内容转换成 <see cref="T:System.Net.Http.HttpContent" /> 实例</remarks>
        </member>
        <member name="M:HttpAgent.IHttpContentProcessor.CanProcess(System.Object,System.String)">
            <summary>
                判断当前处理器是否可以处理指定的内容类型
            </summary>
            <param name="rawContent">原始请求内容</param>
            <param name="contentType">内容类型</param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpContentProcessor.Process(System.Object,System.String,System.Text.Encoding)">
            <summary>
                将原始内容转换为 <see cref="T:System.Net.Http.HttpContent" /> 实例
            </summary>
            <param name="rawContent">原始请求内容</param>
            <param name="contentType">内容类型</param>
            <param name="encoding">内容编码</param>
            <returns>
                <see cref="T:System.Net.Http.HttpContent" />
            </returns>
        </member>
        <member name="T:HttpAgent.MultipartFormDataContentProcessor">
            <summary>
                多部分表单数据内容处理器
            </summary>
        </member>
        <member name="M:HttpAgent.MultipartFormDataContentProcessor.CanProcess(System.Object,System.String)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.MultipartFormDataContentProcessor.Process(System.Object,System.String,System.Text.Encoding)">
            <inheritdoc />
        </member>
        <member name="T:HttpAgent.StreamContentProcessor">
            <summary>
                流内容处理器
            </summary>
        </member>
        <member name="M:HttpAgent.StreamContentProcessor.CanProcess(System.Object,System.String)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.StreamContentProcessor.Process(System.Object,System.String,System.Text.Encoding)">
            <inheritdoc />
        </member>
        <member name="T:HttpAgent.StringContentForFormUrlEncodedContentProcessor">
            <summary>
                URL 编码的表单内容处理器
            </summary>
            <remarks>解决 <see cref="T:System.Net.Http.FormUrlEncodedContent" /> 无法设置编码问题。</remarks>
        </member>
        <member name="M:HttpAgent.StringContentForFormUrlEncodedContentProcessor.Process(System.Object,System.String,System.Text.Encoding)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.StringContentForFormUrlEncodedContentProcessor.GetContentString(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
                获取 URL 编码的表单内容格式
            </summary>
            <param name="nameValueCollection">键值对集合</param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:HttpAgent.StringContentForFormUrlEncodedContentProcessor.Encode(System.String)">
            <summary>
                对数据进行 URL 编码
            </summary>
            <param name="data">数据</param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="T:HttpAgent.StringContentProcessor">
            <summary>
                字符串内容处理器
            </summary>
        </member>
        <member name="M:HttpAgent.StringContentProcessor.CanProcess(System.Object,System.String)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.StringContentProcessor.Process(System.Object,System.String,System.Text.Encoding)">
            <inheritdoc />
        </member>
        <member name="T:HttpAgent.HttpRemoteService">
            <summary>
                <inheritdoc cref="T:HttpAgent.IHttpRemoteService" />
            </summary>
            <summary>
                <inheritdoc cref="T:HttpAgent.IHttpRemoteService" />
            </summary>
            <summary>
                <inheritdoc cref="T:HttpAgent.IHttpRemoteService" />
            </summary>
        </member>
        <member name="F:HttpAgent.HttpRemoteService._httpClientFactory">
            <inheritdoc cref="T:System.Net.Http.IHttpClientFactory" />
        </member>
        <member name="F:HttpAgent.HttpRemoteService._httpContentConverterFactory">
            <inheritdoc cref="T:HttpAgent.IHttpContentConverterFactory" />
        </member>
        <member name="F:HttpAgent.HttpRemoteService._httpContentProcessorFactory">
            <inheritdoc cref="T:HttpAgent.IHttpContentProcessorFactory" />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.#ctor(System.IServiceProvider,System.Net.Http.IHttpClientFactory,HttpAgent.IHttpContentProcessorFactory,HttpAgent.IHttpContentConverterFactory,HttpAgent.HttpRemoteOptions)">
            <summary>
                <inheritdoc cref="T:HttpAgent.HttpRemoteService" />
            </summary>
            <param name="serviceProvider">
                <see cref="T:System.IServiceProvider" />
            </param>
            <param name="httpClientFactory">
                <see cref="T:System.Net.Http.IHttpClientFactory" />
            </param>
            <param name="httpContentProcessorFactory">
                <see cref="T:HttpAgent.IHttpContentProcessorFactory" />
            </param>
            <param name="httpContentConverterFactory">
                <see cref="T:HttpAgent.IHttpContentConverterFactory" />
            </param>
            <param name="httpRemoteOptions">
                <see cref="T:HttpAgent.HttpRemoteOptions" />
            </param>
        </member>
        <member name="P:HttpAgent.HttpRemoteService.RemoteOptions">
            <inheritdoc />
        </member>
        <member name="P:HttpAgent.HttpRemoteService.ServiceProvider">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Send(HttpAgent.HttpRequestBuilder,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Send(HttpAgent.HttpRequestBuilder,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.SendAsync(HttpAgent.HttpRequestBuilder,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.SendAsync(HttpAgent.HttpRequestBuilder,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.SendAs``1(HttpAgent.HttpRequestBuilder,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.SendAs``1(HttpAgent.HttpRequestBuilder,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.SendAsAsync``1(HttpAgent.HttpRequestBuilder,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.SendAsAsync``1(HttpAgent.HttpRequestBuilder,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Send``1(HttpAgent.HttpRequestBuilder,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Send``1(HttpAgent.HttpRequestBuilder,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.SendAsync``1(HttpAgent.HttpRequestBuilder,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.SendAsync``1(HttpAgent.HttpRequestBuilder,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.SendAsyncCore(HttpAgent.HttpRequestBuilder,System.Net.Http.HttpCompletionOption,System.Func{System.Net.Http.HttpClient,System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}},System.Func{System.Net.Http.HttpClient,System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken,System.Net.Http.HttpResponseMessage},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP 远程请求并处理 <see cref="T:System.Net.Http.HttpResponseMessage" /> 实例
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="sendAsyncMethod">异步发送请求的委托</param>
            <param name="sendMethod">同步发送请求的委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Tuple`2" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRemoteService.HandlePreSendRequest(HttpAgent.HttpRequestBuilder,HttpAgent.IHttpRequestEventHandler,System.Net.Http.HttpRequestMessage)">
            <summary>
                处理发送请求之前
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </param>
            <param name="requestEventHandler">
                <see cref="T:HttpAgent.IHttpRequestEventHandler" />
            </param>
            <param name="httpRequestMessage">
                <see cref="T:System.Net.Http.HttpRequestMessage" />
            </param>
        </member>
        <member name="M:HttpAgent.HttpRemoteService.HandlePostSendRequest(HttpAgent.HttpRequestBuilder,HttpAgent.IHttpRequestEventHandler,System.Net.Http.HttpResponseMessage)">
            <summary>
                处理发送请求之后
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </param>
            <param name="requestEventHandler">
                <see cref="T:HttpAgent.IHttpRequestEventHandler" />
            </param>
            <param name="httpResponseMessage">
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </param>
        </member>
        <member name="M:HttpAgent.HttpRemoteService.HandleSendRequestFailed(HttpAgent.HttpRequestBuilder,HttpAgent.IHttpRequestEventHandler,System.Exception,System.Net.Http.HttpResponseMessage)">
            <summary>
                处理发送请求发送异常
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </param>
            <param name="requestEventHandler">
                <see cref="T:HttpAgent.IHttpRequestEventHandler" />
            </param>
            <param name="e">
                <see cref="T:System.Exception" />
            </param>
            <param name="httpResponseMessage">
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </param>
        </member>
        <member name="M:HttpAgent.HttpRemoteService.HandleDisposables(HttpAgent.HttpRequestBuilder)">
            <summary>
                处理需要释放的对象集合
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </param>
        </member>
        <member name="M:HttpAgent.HttpRemoteService.CreateHttpClientWithDefaults(HttpAgent.HttpRequestBuilder)">
            <summary>
                创建带有默认值的 <see cref="T:System.Net.Http.HttpClient" /> 实例
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </param>
            <returns>
                <see cref="T:HttpAgent.HttpClientPooling" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRemoteService.CreateHttpClientPooling(HttpAgent.HttpRequestBuilder)">
            <summary>
                创建 <see cref="T:System.Net.Http.HttpClient" /> 实例管理器
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </param>
            <returns>
                <see cref="T:HttpAgent.HttpClientPooling" />
            </returns>
        </member>
        <member name="M:HttpAgent.HttpRemoteService.AddDefaultUserAgentHeader(System.Net.Http.HttpClient)">
            <summary>
                向 <see cref="T:System.Net.Http.HttpClient" /> 添加默认的 <c>User-Agent</c> 标头
            </summary>
            <remarks>解决某些服务器可能需要这个头部信息才能正确响应请求。</remarks>
            <param name="httpClient">
                <see cref="T:System.Net.Http.HttpClient" />
            </param>
        </member>
        <member name="M:HttpAgent.HttpRemoteService.DownloadFile(System.String,System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Func{HttpAgent.FileTransferProgress,System.Threading.Tasks.Task},HttpAgent.FileExistsBehavior,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.DownloadFileAsync(System.String,System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Func{HttpAgent.FileTransferProgress,System.Threading.Tasks.Task},HttpAgent.FileExistsBehavior,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Send(HttpAgent.HttpFileDownloadBuilder,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.SendAsync(HttpAgent.HttpFileDownloadBuilder,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.UploadFile(System.String,System.String,System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Func{HttpAgent.FileTransferProgress,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.UploadFileAsync(System.String,System.String,System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Func{HttpAgent.FileTransferProgress,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Send(HttpAgent.HttpFileUploadBuilder,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.SendAsync(HttpAgent.HttpFileUploadBuilder,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.ServerSentEvents(System.String,System.Func{HttpAgent.ServerSentEventsData,System.Threading.Tasks.Task},System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.ServerSentEventsAsync(System.String,System.Func{HttpAgent.ServerSentEventsData,System.Threading.Tasks.Task},System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Send(HttpAgent.HttpServerSentEventsBuilder,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.SendAsync(HttpAgent.HttpServerSentEventsBuilder,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.StressTestHarness(System.String,System.Int32,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.StressTestHarnessAsync(System.String,System.Int32,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Send(HttpAgent.HttpStressTestHarnessBuilder,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.SendAsync(HttpAgent.HttpStressTestHarnessBuilder,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.LongPolling(System.String,System.Func{System.Net.Http.HttpResponseMessage,System.Threading.Tasks.Task},System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.LongPollingAsync(System.String,System.Func{System.Net.Http.HttpResponseMessage,System.Threading.Tasks.Task},System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Send(HttpAgent.HttpLongPollingBuilder,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.SendAsync(HttpAgent.HttpLongPollingBuilder,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Get(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Get(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.GetAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.GetAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.GetAs``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.GetAs``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.GetAsAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.GetAsAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Get``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Get``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.GetAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.GetAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Put(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Put(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PutAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PutAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PutAs``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PutAs``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PutAsAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PutAsAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Put``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Put``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PutAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PutAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Post(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Post(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PostAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PostAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PostAs``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PostAs``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PostAsAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PostAsAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Post``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Post``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PostAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PostAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Delete(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Delete(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.DeleteAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.DeleteAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.DeleteAs``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.DeleteAs``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.DeleteAsAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.DeleteAsAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Delete``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Delete``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.DeleteAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.DeleteAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Head(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Head(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.HeadAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.HeadAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.HeadAs``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.HeadAs``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.HeadAsAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.HeadAsAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Head``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Head``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.HeadAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.HeadAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Options(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Options(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.OptionsAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.OptionsAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.OptionsAs``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.OptionsAs``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.OptionsAsAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.OptionsAsAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Options``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Options``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.OptionsAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.OptionsAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Trace(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Trace(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.TraceAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.TraceAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.TraceAs``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.TraceAs``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.TraceAsAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.TraceAsAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Trace``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Trace``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.TraceAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.TraceAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Patch(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Patch(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PatchAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PatchAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PatchAs``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PatchAs``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PatchAsAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PatchAsAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Patch``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.Patch``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PatchAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.HttpRemoteService.PatchAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:HttpAgent.IHttpRemoteService">
            <summary>
                HTTP 远程请求服务
            </summary>
            <summary>
                HTTP 远程请求服务
            </summary>
            <summary>
                HTTP 远程请求服务
            </summary>
        </member>
        <member name="P:HttpAgent.IHttpRemoteService.RemoteOptions">
            <summary>
                <inheritdoc cref="T:HttpAgent.HttpRemoteOptions" />
            </summary>
        </member>
        <member name="P:HttpAgent.IHttpRemoteService.ServiceProvider">
            <summary>
                <inheritdoc cref="T:System.IServiceProvider" />
            </summary>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Send(HttpAgent.HttpRequestBuilder,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP 远程请求
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Send(HttpAgent.HttpRequestBuilder,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP 远程请求
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.SendAsync(HttpAgent.HttpRequestBuilder,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP 远程请求
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.SendAsync(HttpAgent.HttpRequestBuilder,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP 远程请求
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.SendAs``1(HttpAgent.HttpRequestBuilder,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP 远程请求
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <typeparamref name="TResult" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.SendAs``1(HttpAgent.HttpRequestBuilder,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP 远程请求
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <typeparamref name="TResult" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.SendAsAsync``1(HttpAgent.HttpRequestBuilder,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP 远程请求
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <typeparamref name="TResult" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.SendAsAsync``1(HttpAgent.HttpRequestBuilder,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP 远程请求
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <typeparamref name="TResult" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Send``1(HttpAgent.HttpRequestBuilder,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP 远程请求
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Send``1(HttpAgent.HttpRequestBuilder,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP 远程请求
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.SendAsync``1(HttpAgent.HttpRequestBuilder,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP 远程请求
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.SendAsync``1(HttpAgent.HttpRequestBuilder,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP 远程请求
            </summary>
            <param name="httpRequestBuilder">
                <see cref="T:HttpAgent.HttpRequestBuilder" />
            </param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.DownloadFile(System.String,System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Func{HttpAgent.FileTransferProgress,System.Threading.Tasks.Task},HttpAgent.FileExistsBehavior,System.Threading.CancellationToken)">
            <summary>
                下载文件
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="destinationPath">文件保存的目标路径</param>
            <param name="configure">自定义配置委托</param>
            <param name="onProgressChanged">用于传输进度发生变化时执行的委托</param>
            <param name="fileExistsBehavior">
                <see cref="T:HttpAgent.FileExistsBehavior" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.DownloadFileAsync(System.String,System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Func{HttpAgent.FileTransferProgress,System.Threading.Tasks.Task},HttpAgent.FileExistsBehavior,System.Threading.CancellationToken)">
            <summary>
                下载文件
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="destinationPath">文件保存的目标路径</param>
            <param name="configure">自定义配置委托</param>
            <param name="onProgressChanged">用于传输进度发生变化时执行的委托</param>
            <param name="fileExistsBehavior">
                <see cref="T:HttpAgent.FileExistsBehavior" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Threading.Tasks.Task" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Send(HttpAgent.HttpFileDownloadBuilder,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                下载文件
            </summary>
            <param name="httpFileDownloadBuilder">
                <see cref="T:HttpAgent.HttpFileDownloadBuilder" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.SendAsync(HttpAgent.HttpFileDownloadBuilder,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                下载文件
            </summary>
            <param name="httpFileDownloadBuilder">
                <see cref="T:HttpAgent.HttpFileDownloadBuilder" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Threading.Tasks.Task" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.UploadFile(System.String,System.String,System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Func{HttpAgent.FileTransferProgress,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
                上传文件
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="fileFullName">文件完整路径</param>
            <param name="name">表单名称；默认值为 <c>file</c>。</param>
            <param name="configure">自定义配置委托</param>
            <param name="onProgressChanged">用于传输进度发生变化时执行的委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.UploadFileAsync(System.String,System.String,System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Func{HttpAgent.FileTransferProgress,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
                上传文件
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="fileFullName">文件完整路径</param>
            <param name="name">表单名称；默认值为 <c>file</c>。</param>
            <param name="configure">自定义配置委托</param>
            <param name="onProgressChanged">用于传输进度发生变化时执行的委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Threading.Tasks.Task`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Send(HttpAgent.HttpFileUploadBuilder,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                上传文件
            </summary>
            <param name="httpFileUploadBuilder">
                <see cref="T:HttpAgent.HttpFileUploadBuilder" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.SendAsync(HttpAgent.HttpFileUploadBuilder,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                上传文件
            </summary>
            <param name="httpFileUploadBuilder">
                <see cref="T:HttpAgent.HttpFileUploadBuilder" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Threading.Tasks.Task`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.ServerSentEvents(System.String,System.Func{HttpAgent.ServerSentEventsData,System.Threading.Tasks.Task},System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 Server-Sent Events 请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="onMessage">用于在从事件源接收到数据时的操作</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.ServerSentEventsAsync(System.String,System.Func{HttpAgent.ServerSentEventsData,System.Threading.Tasks.Task},System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 Server-Sent Events 请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="onMessage">用于在从事件源接收到数据时的操作</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Threading.Tasks.Task" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Send(HttpAgent.HttpServerSentEventsBuilder,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 Server-Sent Events 请求
            </summary>
            <param name="httpServerSentEventsBuilder">
                <see cref="T:HttpAgent.HttpServerSentEventsBuilder" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.SendAsync(HttpAgent.HttpServerSentEventsBuilder,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 Server-Sent Events 请求
            </summary>
            <param name="httpServerSentEventsBuilder">
                <see cref="T:HttpAgent.HttpServerSentEventsBuilder" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Threading.Tasks.Task" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.StressTestHarness(System.String,System.Int32,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                压力测试
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="numberOfRequests">并发请求数量，默认值为：100。</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:HttpAgent.StressTestHarnessResult" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.StressTestHarnessAsync(System.String,System.Int32,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                压力测试
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="numberOfRequests">并发请求数量，默认值为：100。</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Threading.Tasks.Task`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Send(HttpAgent.HttpStressTestHarnessBuilder,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                压力测试
            </summary>
            <param name="httpStressTestHarnessBuilder">
                <see cref="T:HttpAgent.HttpStressTestHarnessBuilder" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:HttpAgent.StressTestHarnessResult" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.SendAsync(HttpAgent.HttpStressTestHarnessBuilder,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                压力测试
            </summary>
            <param name="httpStressTestHarnessBuilder">
                <see cref="T:HttpAgent.HttpStressTestHarnessBuilder" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Threading.Tasks.Task`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.LongPolling(System.String,System.Func{System.Net.Http.HttpResponseMessage,System.Threading.Tasks.Task},System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送长轮询请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="onDataReceived">用于在长轮询时接收到数据时的操作</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.LongPollingAsync(System.String,System.Func{System.Net.Http.HttpResponseMessage,System.Threading.Tasks.Task},System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送长轮询请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="onDataReceived">用于在长轮询时接收到数据时的操作</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Threading.Tasks.Task" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Send(HttpAgent.HttpLongPollingBuilder,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送长轮询请求
            </summary>
            <param name="httpLongPollingBuilder">
                <see cref="T:HttpAgent.HttpLongPollingBuilder" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.SendAsync(HttpAgent.HttpLongPollingBuilder,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送长轮询请求
            </summary>
            <param name="httpLongPollingBuilder">
                <see cref="T:HttpAgent.HttpLongPollingBuilder" />
            </param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Threading.Tasks.Task" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Get(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP GET 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Get(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP GET 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.GetAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP GET 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.GetAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP GET 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.GetAs``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP GET 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.GetAs``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP GET 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.GetAsAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP GET 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.GetAsAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP GET 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Get``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP GET 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Get``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP GET 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.GetAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP GET 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.GetAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP GET 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Put(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PUT 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Put(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PUT 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PutAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PUT 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PutAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PUT 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PutAs``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PUT 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PutAs``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PUT 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PutAsAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PUT 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PutAsAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PUT 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Put``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PUT 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Put``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PUT 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PutAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PUT 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PutAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PUT 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Post(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP POST 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Post(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP POST 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PostAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP POST 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PostAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP POST 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PostAs``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP POST 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PostAs``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP POST 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PostAsAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP POST 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PostAsAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP POST 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Post``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP POST 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Post``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP POST 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PostAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP POST 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PostAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP POST 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Delete(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP DELETE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Delete(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP DELETE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.DeleteAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP DELETE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.DeleteAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP DELETE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.DeleteAs``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP DELETE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.DeleteAs``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP DELETE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.DeleteAsAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP DELETE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.DeleteAsAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP DELETE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Delete``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP DELETE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Delete``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP DELETE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.DeleteAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP DELETE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.DeleteAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP DELETE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Head(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP HEAD 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Head(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP HEAD 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.HeadAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP HEAD 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.HeadAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP HEAD 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.HeadAs``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP HEAD 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.HeadAs``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP HEAD 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.HeadAsAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP HEAD 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.HeadAsAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP HEAD 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Head``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP HEAD 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Head``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP HEAD 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.HeadAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP HEAD 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.HeadAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP HEAD 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Options(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP OPTIONS 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Options(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP OPTIONS 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.OptionsAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP OPTIONS 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.OptionsAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP OPTIONS 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.OptionsAs``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP OPTIONS 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.OptionsAs``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP OPTIONS 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.OptionsAsAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP OPTIONS 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.OptionsAsAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP OPTIONS 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Options``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP OPTIONS 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Options``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP OPTIONS 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.OptionsAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP OPTIONS 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.OptionsAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP OPTIONS 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Trace(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP TRACE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Trace(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP TRACE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.TraceAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP TRACE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.TraceAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP TRACE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.TraceAs``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP TRACE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.TraceAs``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP TRACE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.TraceAsAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP TRACE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.TraceAsAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP TRACE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Trace``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP TRACE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Trace``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP TRACE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.TraceAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP TRACE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.TraceAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP TRACE 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Patch(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PATCH 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Patch(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PATCH 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PatchAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PATCH 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PatchAsync(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PATCH 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Net.Http.HttpResponseMessage" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PatchAs``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PATCH 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PatchAs``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PATCH 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PatchAsAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PATCH 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PatchAsAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PATCH 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Patch``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PATCH 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.Patch``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PATCH 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PatchAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PATCH 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="M:HttpAgent.IHttpRemoteService.PatchAsync``1(System.String,System.Action{HttpAgent.HttpRequestBuilder},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
                发送 HTTP PATCH 远程请求
            </summary>
            <param name="requestUri">请求地址</param>
            <param name="configure">自定义配置委托</param>
            <param name="completionOption">
                <see cref="T:System.Net.Http.HttpCompletionOption" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <see cref="T:HttpAgent.HttpRemoteResult`1" />
            </returns>
        </member>
        <member name="T:HttpAgent.WebSocketClient">
            <summary>
                WebSocket 客户端
            </summary>
            <summary>
                WebSocket 客户端
            </summary>
        </member>
        <member name="F:HttpAgent.WebSocketClient._clientWebSocket">
            <inheritdoc cref="T:System.Net.WebSockets.ClientWebSocket" />
        </member>
        <member name="F:HttpAgent.WebSocketClient._messageCancellationTokenSource">
            <summary>
                取消接收服务器消息标记
            </summary>
        </member>
        <member name="F:HttpAgent.WebSocketClient._receiveTask">
            <summary>
                接收服务器消息任务
            </summary>
        </member>
        <member name="M:HttpAgent.WebSocketClient.#ctor(System.String)">
            <summary>
                <inheritdoc cref="T:HttpAgent.WebSocketClient" />
            </summary>
            <param name="serverUri">服务器地址</param>
        </member>
        <member name="M:HttpAgent.WebSocketClient.#ctor(HttpAgent.WebSocketClientOptions)">
            <summary>
                <inheritdoc cref="T:HttpAgent.WebSocketClient" />
            </summary>
            <param name="options">
                <see cref="T:HttpAgent.WebSocketClientOptions" />
            </param>
        </member>
        <member name="P:HttpAgent.WebSocketClient.Options">
            <summary>
                <see cref="T:HttpAgent.WebSocketClientOptions" />
            </summary>
        </member>
        <member name="P:HttpAgent.WebSocketClient.CurrentReconnectRetries">
            <summary>
                当前重连次数
            </summary>
        </member>
        <member name="M:HttpAgent.WebSocketClient.Dispose">
            <inheritdoc />
        </member>
        <member name="M:HttpAgent.WebSocketClient.ConnectAsync(System.Threading.CancellationToken)">
            <summary>
                连接到服务器
            </summary>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:HttpAgent.WebSocketClient.ListeningAsync(System.Threading.CancellationToken)">
            <summary>
                开始监听服务器消息
            </summary>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
            <returns>
                <see cref="T:System.Threading.Tasks.Task" />
            </returns>
        </member>
        <member name="M:HttpAgent.WebSocketClient.WaitToReceiveAsync(System.Threading.CancellationToken)">
            <summary>
                等待接收服务器消息
            </summary>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:HttpAgent.WebSocketClient.ReconnectAsync(System.Threading.CancellationToken)">
            <summary>
                重新连接到服务器
            </summary>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:HttpAgent.WebSocketClient.ReceiveAsync(System.Threading.CancellationToken)">
            <summary>
                接收服务器消息
            </summary>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:HttpAgent.WebSocketClient.SendAsync(System.String,System.Threading.CancellationToken)">
            <summary>
                向服务器发送消息
            </summary>
            <param name="message">字符串消息</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:HttpAgent.WebSocketClient.SendAsync(System.String,System.Net.WebSockets.WebSocketMessageType,System.Threading.CancellationToken)">
            <summary>
                向服务器发送消息
            </summary>
            <param name="message">字符串消息</param>
            <param name="webSocketMessageType">
                <see cref="T:System.Net.WebSockets.WebSocketMessageType" />
            </param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:HttpAgent.WebSocketClient.SendAsync(System.Byte[],System.Threading.CancellationToken)">
            <summary>
                向服务器发送消息
            </summary>
            <param name="bytes">二进制消息</param>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="M:HttpAgent.WebSocketClient.DisconnectAsync(System.Threading.CancellationToken)">
            <summary>
                断开连接
            </summary>
            <param name="cancellationToken">
                <see cref="T:System.Threading.CancellationToken" />
            </param>
        </member>
        <member name="E:HttpAgent.WebSocketClient.Received">
            <summary>
                接收文本消息事件
            </summary>
        </member>
        <member name="E:HttpAgent.WebSocketClient.BinaryReceived">
            <summary>
                接收二进制消息事件
            </summary>
        </member>
        <member name="E:HttpAgent.WebSocketClient.Connecting">
            <summary>
                开始连接时触发事件
            </summary>
        </member>
        <member name="E:HttpAgent.WebSocketClient.Connected">
            <summary>
                连接成功时触发事件
            </summary>
        </member>
        <member name="E:HttpAgent.WebSocketClient.Reconnecting">
            <summary>
                开始重新连接时触发事件
            </summary>
        </member>
        <member name="E:HttpAgent.WebSocketClient.Reconnected">
            <summary>
                重新连接成功时触发事件
            </summary>
        </member>
        <member name="E:HttpAgent.WebSocketClient.Disconnected">
            <summary>
                断开连接时触发事件
            </summary>
        </member>
        <member name="E:HttpAgent.WebSocketClient.StartedReceiving">
            <summary>
                开始接收消息时触发事件
            </summary>
        </member>
        <member name="E:HttpAgent.WebSocketClient.StoppedReceiving">
            <summary>
                停止接收消息时触发事件
            </summary>
        </member>
        <member name="M:HttpAgent.WebSocketClient.OnConnecting">
            <summary>
                触发开始连接事件
            </summary>
        </member>
        <member name="M:HttpAgent.WebSocketClient.OnConnected">
            <summary>
                触发连接成功事件
            </summary>
        </member>
        <member name="M:HttpAgent.WebSocketClient.OnReconnecting">
            <summary>
                触发开始重新连接事件
            </summary>
        </member>
        <member name="M:HttpAgent.WebSocketClient.OnReconnected">
            <summary>
                触发重新连接成功事件
            </summary>
        </member>
        <member name="M:HttpAgent.WebSocketClient.OnDisconnected">
            <summary>
                触发断开连接事件
            </summary>
        </member>
        <member name="M:HttpAgent.WebSocketClient.OnStartedReceiving">
            <summary>
                触发开始接收消息事件
            </summary>
        </member>
        <member name="M:HttpAgent.WebSocketClient.OnStoppedReceiving">
            <summary>
                触发停止接收消息事件
            </summary>
        </member>
        <member name="M:HttpAgent.WebSocketClient.OnReceived(System.String)">
            <summary>
                触发接收文本消息事件
            </summary>
            <param name="message">消息</param>
        </member>
        <member name="M:HttpAgent.WebSocketClient.OnBinaryReceived(System.Byte[])">
            <summary>
                触发接收二进制消息事件
            </summary>
            <param name="bytes">二进制消息</param>
        </member>
        <member name="T:HttpAgent.WebSocketClientOptions">
            <summary>
                WebSocket 客户端配置选项
            </summary>
        </member>
        <member name="M:HttpAgent.WebSocketClientOptions.#ctor(System.String)">
            <summary>
                <inheritdoc cref="T:HttpAgent.WebSocketClientOptions" />
            </summary>
            <param name="serverUri">服务器地址</param>
        </member>
        <member name="M:HttpAgent.WebSocketClientOptions.#ctor(System.Uri)">
            <summary>
                <inheritdoc cref="T:HttpAgent.WebSocketClientOptions" />
            </summary>
            <param name="serverUri">服务器地址</param>
        </member>
        <member name="P:HttpAgent.WebSocketClientOptions.ServerUri">
            <summary>
                服务器地址
            </summary>
        </member>
        <member name="P:HttpAgent.WebSocketClientOptions.ReconnectInterval">
            <summary>
                重新连接的间隔时间（毫秒）
            </summary>
            <remarks>默认值为 2 秒。</remarks>
        </member>
        <member name="P:HttpAgent.WebSocketClientOptions.MaxReconnectRetries">
            <summary>
                最大重连次数
            </summary>
            <remarks>默认最大重连次数为 10。</remarks>
        </member>
        <member name="P:HttpAgent.WebSocketClientOptions.Timeout">
            <summary>
                超时时间
            </summary>
        </member>
        <member name="T:System.Debugging">
            <summary>
                向事件管理器中输出事件信息
            </summary>
        </member>
        <member name="M:System.Debugging.WriteLine(System.Int32,System.String)">
            <summary>
                输出一行事件信息
            </summary>
            <param name="level">
                <para>信息级别</para>
                <list type="number">
                    <item>
                        <description>跟踪</description>
                    </item>
                    <item>
                        <description>信息</description>
                    </item>
                    <item>
                        <description>警告</description>
                    </item>
                    <item>
                        <description>错误</description>
                    </item>
                    <item>
                        <description>文件</description>
                    </item>
                    <item>
                        <description>提示</description>
                    </item>
                    <item>
                        <description>搜索</description>
                    </item>
                    <item>
                        <description>时钟</description>
                    </item>
                </list>
            </param>
            <param name="message">事件信息</param>
        </member>
        <member name="M:System.Debugging.Error(System.String)">
            <summary>
                输出错误级别事件信息
            </summary>
            <param name="message">事件信息</param>
        </member>
        <member name="M:System.Debugging.File(System.String)">
            <summary>
                输出文件级别事件信息
            </summary>
            <param name="message">事件信息</param>
        </member>
        <member name="M:System.Debugging.GetLevelEmoji(System.Int32)">
            <summary>
                获取信息级别对应的 emoji
            </summary>
            <param name="level">
                <para>信息级别</para>
                <list type="number">
                    <item>
                        <description>跟踪</description>
                    </item>
                    <item>
                        <description>信息</description>
                    </item>
                    <item>
                        <description>警告</description>
                    </item>
                    <item>
                        <description>错误</description>
                    </item>
                    <item>
                        <description>文件</description>
                    </item>
                    <item>
                        <description>提示</description>
                    </item>
                    <item>
                        <description>搜索</description>
                    </item>
                    <item>
                        <description>时钟</description>
                    </item>
                </list>
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.PlaceholderRegex_0">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the PlaceholderRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.PlaceholderRegex_0.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.PlaceholderRegex_0.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.PlaceholderRegex_0.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.PlaceholderRegex_0.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.PlaceholderRegex_0.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.PlaceholderRegex_0.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.PlaceholderRegex_0.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.PlaceholderRegex_0.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.FormUrlEncodedFormatRegex_1">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the FormUrlEncodedFormatRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.FormUrlEncodedFormatRegex_1.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.FormUrlEncodedFormatRegex_1.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.FormUrlEncodedFormatRegex_1.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.FormUrlEncodedFormatRegex_1.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.FormUrlEncodedFormatRegex_1.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.FormUrlEncodedFormatRegex_1.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.FormUrlEncodedFormatRegex_1.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.FormUrlEncodedFormatRegex_1.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Utilities">
            <summary>Helper methods used by generated <see cref="T:System.Text.RegularExpressions.Regex"/>-derived implementations.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout">
            <summary>Default timeout value set in <see cref="T:System.AppContext"/>, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout"/> if none was set.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_hasTimeout">
            <summary>Whether <see cref="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout"/> is non-infinite.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.IsWordChar(System.Char)">
            <summary>Determines whether the character is part of the [\w] set.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPop(System.Int32[],System.Int32@,System.Int32@,System.Int32@)">
            <summary>Pops 2 values from the backtracking stack.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPush(System.Int32[]@,System.Int32@,System.Int32)">
            <summary>Pushes 1 value onto the backtracking stack.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPush(System.Int32[]@,System.Int32@,System.Int32,System.Int32)">
            <summary>Pushes 2 values onto the backtracking stack.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_ascii_60FF03FEFFFF87FEFFFF47">
            <summary>Supports searching for characters in or not in "-.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~".</summary>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.HttpRemoteServiceCollectionExtensions">
            <summary>
                HTTP 远程请求模块 <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> 拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.HttpRemoteServiceCollectionExtensions.AddHttpRemote(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{HttpAgent.HttpRemoteBuilder})">
            <summary>
                添加 HTTP 远程请求服务
            </summary>
            <param name="services">
                <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
            </param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
            </returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.HttpRemoteServiceCollectionExtensions.AddHttpRemote(Microsoft.Extensions.DependencyInjection.IServiceCollection,HttpAgent.HttpRemoteBuilder)">
            <summary>
                添加 HTTP 远程请求服务
            </summary>
            <param name="services">
                <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
            </param>
            <param name="httpRemoteBuilder">
                <see cref="T:HttpAgent.HttpRemoteBuilder" />
            </param>
            <returns>
                <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
            </returns>
        </member>
    </members>
</doc>
